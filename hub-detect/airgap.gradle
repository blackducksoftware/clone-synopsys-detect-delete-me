import java.io.File

final String distributionsFolder = "${buildDir}/distributions"
final String buildArtifactFolder = "${buildDir}/libs"
final String airGapFolder = "${buildArtifactFolder}/packaged-inspectors"
final String gradleAirGapPath = "${airGapFolder}/gradle"
final String nugetAirGapPath = "${airGapFolder}/nuget"
final String configAirGapPath = "${buildArtifactFolder}/config"
final String dockerAirGapPath = "${airGapFolder}/docker"
final String artifactoryIntegrationPath = "com/blackducksoftware/integration"

final String airGapZipName = "${project.name}-${version}-air-gap.zip"

configurations {
    airGap
}

dependencies {
    airGap 'com.blackducksoftware.integration:integration-gradle-inspector:latest.release'
}

void fetchFile(File outputFile, String url) {
    if (outputFile.exists()) {
        return
    }
    if (!outputFile.getParentFile().exists()) {
        outputFile.getParentFile().mkdirs()
    }
    new URL(url).withInputStream{ inputStream -> outputFile.withOutputStream{ it << inputStream }}
}

task downloadNugetInspector {
    doLast {
        final def nugetInspectorUrl = 'https://www.nuget.org/api/v2/package/IntegrationNugetInspector/'
        final def nugetInspectorFile = new File(nugetAirGapPath, 'integrationnugetinspector.nupkg')
        fetchFile(nugetInspectorFile, nugetInspectorUrl)
        copy {
            from zipTree(nugetInspectorFile)
            into new File(nugetAirGapPath)
        }
    }
}

task downloadGradleInspectorMavenMetadata {
    doLast {
        final def gradleInspectorMavenMetadataUrl = 'http://repo2.maven.org/maven2/com/blackducksoftware/integration/integration-gradle-inspector/maven-metadata.xml'
        fetchFile(new File(gradleAirGapPath, 'maven-metadata.xml'), gradleInspectorMavenMetadataUrl)
    }
}

task copyGradleInspectorAndDependencies(type: Copy) {
    dependsOn downloadGradleInspectorMavenMetadata
    from configurations.airGap
    include '*.jar'
    into gradleAirGapPath
}

task copyApplicationProperties(type: Copy) {
    from 'src/main/resources/'
    include 'application.properties'
    into configAirGapPath
}

task downloadDockerInspector() {
    doLast {
        final String dockerInspectorArtifactoryBaseUrl = 'https://test-repo.blackducksoftware.com/artifactory/bds-integrations-release/com/synopsys/integration/blackduck-docker-inspector'
        final String dockerInspectorMavenMetadataUrl = "${dockerInspectorArtifactoryBaseUrl}/maven-metadata.xml"
        final File dockerInspectorMetadataFile = new File(dockerAirGapPath, 'maven-metadata.xml')
        dockerInspectorMetadataFile.delete()
        fetchFile(dockerInspectorMetadataFile, dockerInspectorMavenMetadataUrl)
        final String mavenMetadataString = dockerInspectorMetadataFile.getText('UTF-8')
        final Node metadata = new XmlParser().parseText(mavenMetadataString)
        final String dockerInspectorLatestVersion = metadata.versioning.latest.text()
        println "dockerInspectorLatestVersion: ${dockerInspectorLatestVersion}"
        final String dockerInspectorAirGapZipUrl = "${dockerInspectorArtifactoryBaseUrl}/${dockerInspectorLatestVersion}/blackduck-docker-inspector-${dockerInspectorLatestVersion}-air-gap.zip"
        println "dockerInspectorAirGapZipUrl: ${dockerInspectorAirGapZipUrl}"
        final File dockerInspectorAirGapZipFile = new File(dockerAirGapPath, "blackduck-docker-inspector-${dockerInspectorLatestVersion}-air-gap.zip")
        fetchFile(dockerInspectorAirGapZipFile, dockerInspectorAirGapZipUrl)
        exec {
        	workingDir "${dockerAirGapPath}"
        	commandLine 'unzip', '-n', 'blackduck-docker-inspector-*-air-gap.zip'
        }
        delete fileTree("${dockerAirGapPath}") {
            include 'blackduck-docker-inspector-*-air-gap.zip'
        }
    }
}

task createAirGapZip(type: Zip) {
    dependsOn build, copyApplicationProperties, downloadNugetInspector, copyGradleInspectorAndDependencies, downloadDockerInspector
    from buildArtifactFolder
    include "${project.name}*.jar"
    include 'packaged-inspectors/**'
    include 'config/**'
    archiveName airGapZipName
    destinationDir(file(distributionsFolder))
}

task publishAirGapZip() {
    dependsOn createAirGapZip
    doLast {
        exec {
            commandLine 'curl', '--insecure','-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT', "${project.ext.artifactoryUrl}/${project.ext.artifactoryRepo}/${artifactoryIntegrationPath}/${project.name}/${version}/${airGapZipName}", '-T', "${distributionsFolder}/${airGapZipName}", '-f'
        }
    }
}
