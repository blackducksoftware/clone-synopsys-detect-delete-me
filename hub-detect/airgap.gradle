final String distributionsFolder = "${buildDir}/distributions"
final String buildArtifactFolder = "${buildDir}/libs"
final String airGapFolder = "${buildArtifactFolder}/packaged-inspectors"
final String gradleAirGapPath = "${airGapFolder}/gradle"
final String classicNugetAirGapPath = "${airGapFolder}/nuget_classic"
final String dotnetNugetAirGapPath = "${airGapFolder}/nuget_dotnet"
final String configAirGapPath = "${buildArtifactFolder}/config"
final String dockerAirGapPath = "${airGapFolder}/docker"
final String artifactoryIntegrationPath = "com/blackducksoftware/integration"

final String airGapZipName = "${project.name}-${version}-air-gap.zip"

configurations {
    airGap
}

dependencies {
    airGap 'com.blackducksoftware.integration:integration-gradle-inspector:latest.release'
}

void fetchFile(File outputFile, String url) {
    if (outputFile.exists()) {
        return
    }
    if (!outputFile.getParentFile().exists()) {
        outputFile.getParentFile().mkdirs()
    }
    new URL(url).withInputStream { inputStream -> outputFile.withOutputStream { it << inputStream } }
}

task downloadNugetInspector {
    doLast {
        final def dotnetNugetInspectorSearchUrl = 'https://repo.blackducksoftware.com/artifactory/api/storage/bds-integrations-nuget-release/BlackduckNugetInspector?properties=NUGET_INSPECTOR_LATEST'
        final def classicNugetInspectorSearchUrl = 'https://repo.blackducksoftware.com/artifactory/api/storage/bds-integrations-nuget-release/IntegrationNugetInspector?properties=NUGET_INSPECTOR_LATEST'
        final def dotnetNupkgUrl = findCurrentArtifact(dotnetNugetInspectorSearchUrl)
        final def classicNupkgUrl = findCurrentArtifact(classicNugetInspectorSearchUrl)
        final def classicInspectorFile = new File(classicNugetAirGapPath, 'IntegrationNugetInspector.nupkg')
        final def dotnetInspectorFile = new File(dotnetNugetAirGapPath, 'BlackduckNugetInspector.nupkg')
        fetchFile(classicInspectorFile, classicNupkgUrl)
        fetchFile(dotnetInspectorFile, dotnetNupkgUrl)
        copy {
            from zipTree(classicInspectorFile)
            into new File(classicNugetAirGapPath)
        }
        copy {
            from zipTree(dotnetInspectorFile)
            into new File(dotnetNugetAirGapPath)
        }
    }
}

task downloadGradleInspectorMavenMetadata {
    doLast {
        final def gradleInspectorMavenMetadataUrl = 'http://repo2.maven.org/maven2/com/blackducksoftware/integration/integration-gradle-inspector/maven-metadata.xml'
        fetchFile(new File(gradleAirGapPath, 'maven-metadata.xml'), gradleInspectorMavenMetadataUrl)
    }
}

task copyGradleInspectorAndDependencies(type: Copy) {
    dependsOn downloadGradleInspectorMavenMetadata
    from configurations.airGap
    include '*.jar'
    into gradleAirGapPath
}

task copyApplicationProperties(type: Copy) {
    from 'src/main/resources/'
    include 'application.properties'
    into configAirGapPath
}

File fetchDockerInspectorMavenMetadata(String dockerAirGapPath, final String dockerInspectorArtifactoryBaseUrl) {
    final String dockerInspectorMavenMetadataUrl = "${dockerInspectorArtifactoryBaseUrl}/maven-metadata.xml"
    final File dockerInspectorMetadataFile = new File(dockerAirGapPath, 'maven-metadata.xml')
    dockerInspectorMetadataFile.delete()
    fetchFile(dockerInspectorMetadataFile, dockerInspectorMavenMetadataUrl)
    println "downloaded: ${dockerInspectorMetadataFile.getAbsolutePath()}"
    return dockerInspectorMetadataFile
}

String getLatestDockerInspectorVersion(final File dockerInspectorMetadataFile) {
    final String mavenMetadataString = dockerInspectorMetadataFile.getText('UTF-8')
    final Node metadata = new XmlParser().parseText(mavenMetadataString)
    final String dockerInspectorLatestVersion = metadata.versioning.latest.text()
    println "dockerInspectorLatestVersion: ${dockerInspectorLatestVersion}"
    return dockerInspectorLatestVersion
}

File downloadDockerInspectorAirGapZip(String dockerAirGapPath, final String dockerInspectorArtifactoryBaseUrl, final String dockerInspectorLatestVersion) {
    final String dockerInspectorAirGapZipUrl = "${dockerInspectorArtifactoryBaseUrl}/${dockerInspectorLatestVersion}/blackduck-docker-inspector-${dockerInspectorLatestVersion}-air-gap.zip"
    println "dockerInspectorAirGapZipUrl: ${dockerInspectorAirGapZipUrl}"
    final File dockerInspectorAirGapZipFile = new File(dockerAirGapPath, "blackduck-docker-inspector-${dockerInspectorLatestVersion}-air-gap.zip")
    fetchFile(dockerInspectorAirGapZipFile, dockerInspectorAirGapZipUrl)
    return dockerInspectorAirGapZipFile
}

task downloadDockerInspector() {
    doLast {
        final String dockerInspectorArtifactoryBaseUrl = 'https://test-repo.blackducksoftware.com/artifactory/bds-integrations-release/com/synopsys/integration/blackduck-docker-inspector'
        final File dockerInspectorMetadataFile = fetchDockerInspectorMavenMetadata(dockerAirGapPath, dockerInspectorArtifactoryBaseUrl)
        final String dockerInspectorLatestVersion = getLatestDockerInspectorVersion(dockerInspectorMetadataFile)
        final File dockerInspectorAirGapZipFile = downloadDockerInspectorAirGapZip(dockerAirGapPath, dockerInspectorArtifactoryBaseUrl, dockerInspectorLatestVersion)
        exec {
            workingDir "${dockerAirGapPath}"
            commandLine 'unzip', '-n', 'blackduck-docker-inspector-*-air-gap.zip'
        }
        delete fileTree("${dockerAirGapPath}") {
            include 'blackduck-docker-inspector-*-air-gap.zip'
        }
    }
}

task createAirGapZip(type: Zip) {
    dependsOn build, copyApplicationProperties, downloadNugetInspector, copyGradleInspectorAndDependencies, downloadDockerInspector
    from buildArtifactFolder
    include "${project.name}*.jar"
    include 'packaged-inspectors/**'
    include 'config/**'
    archiveName airGapZipName
    destinationDir(file(distributionsFolder))
}

task publishAirGapZip() {
    dependsOn createAirGapZip
    doLast {
        exec {
            commandLine 'curl', '--insecure', '-u', "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}", '-X', 'PUT', "${project.ext.artifactoryUrl}/${project.ext.artifactoryRepo}/${artifactoryIntegrationPath}/${project.name}/${version}/${airGapZipName}", '-T', "${distributionsFolder}/${airGapZipName}", '-f'
        }
    }
}

def findCurrentArtifact(def defaultCurlArgs, def url) {
    try {
        def artifactoryItems = getArtifactoryItems(url, defaultCurlArgs)

        if (artifactoryItems != null && artifactoryItems.size() == 1) {
            return artifactoryItems[0]
        }
    } catch (Exception e) {
        println "Could not find the current artifact: ${e.message}"
    }

    return null
}

def getArtifactoryItems(String url, def defaultCurlArgs) {
    def artifactoryItems = []

    def curlArgs = defaultCurlArgs + ['--header', 'X-Result-Detail: info', url]
    def response = curlResponse(curlArgs)

    def jsonResponse = new groovy.json.JsonSlurper().parseText(response)
    def results = jsonResponse['results']
    if (results != null && results.size() > 0) {
        results.each {
            def downloadUri = it['downloadUri']
            if (downloadUri) {
                artifactoryItems.add([downloadUri: downloadUri])
            }
        }
    }

    return artifactoryItems
}


def defaultCurlArgs(String artifactoryCredentials) {
    return ['--silent', '--insecure', '--user', artifactoryCredentials, '--header', 'Content-Type: application/json']
}