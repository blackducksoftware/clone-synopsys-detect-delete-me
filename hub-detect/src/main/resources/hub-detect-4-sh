#!/bin/bash

# To override the default major release version of 4,
# specify your own DETECT_MAJOR_RELEASE_VERSION in
# your environment and *that* version will be used.
DETECT_MAJOR_RELEASE_VERSION=${DETECT_MAJOR_RELEASE_VERSION:-4}

# To override the default location of /tmp, specify
# your own DETECT_JAR_PATH in your environment and
# *that* location will be used.
DETECT_JAR_PATH=${DETECT_JAR_PATH:-/tmp}

# If you want to pass any java options to the
# invocation, specify DETECT_JAVA_OPTS in your
# environment. For example, to specify a 6 gigabyte
# heap size, you would set DETECT_JAVA_OPTS=-Xmx6G.
DETECT_JAVA_OPTS=${DETECT_JAVA_OPTS:-}

# If you want to pass any additional options to
# curl, specify DETECT_CURL_OPTS in your environment.
# For example, to specify a proxy, you would set
# DETECT_CURL_OPTS=--proxy http://myproxy:3128
DETECT_CURL_OPTS=${DETECT_CURL_OPTS:-}

SCRIPT_ARGS="$@"
LOGGABLE_SCRIPT_ARGS=""

for i in $*; do
  if [[ $i == --blackduck.hub.password=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.hub.password=<redacted>"
  elif [[ $i == --blackduck.hub.proxy.password=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.hub.proxy.password=<redacted>"
  elif [[ $i == --blackduck.hub.api.token=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.hub.api.token=<redacted>"
  elif [[ $i == --blackduck.password=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.password=<redacted>"
  elif [[ $i == --blackduck.proxy.password=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.proxy.password=<redacted>"
  elif [[ $i == --blackduck.api.token=* ]]; then
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS --blackduck.api.token=<redacted>"
  else
    LOGGABLE_SCRIPT_ARGS="$LOGGABLE_SCRIPT_ARGS $i"
  fi
done

run() {
  get_detect
  run_detect
}

get_detect() {
  VERSION_FILE_DESTINATION="${DETECT_JAR_PATH}/hub-detect-latest-commit-id.txt"
  CURRENT_VERSION=""
  if [ -f $VERSION_FILE_DESTINATION ]; then
    CURRENT_VERSION=$( <$VERSION_FILE_DESTINATION )
  fi

  curl $DETECT_CURL_OPTS --silent -o $VERSION_FILE_DESTINATION https://blackducksoftware.github.io/hub-detect/latest-commit-id.txt
  LATEST_VERSION=$( <$VERSION_FILE_DESTINATION )

  if [ -z "${DETECT_RELEASE_VERSION}" ]; then
    VERSION_CURL_CMD="curl ${DETECT_CURL_OPTS} --silent --header \"X-Result-Detail: info\" 'https://test-repo.blackducksoftware.com/artifactory/api/storage/bds-integrations-release/com/blackducksoftware/integration/hub-detect?properties=DETECT_IS_LATEST_${DETECT_MAJOR_RELEASE_VERSION}' | grep \"DETECT_IS_LATEST_${DETECT_MAJOR_RELEASE_VERSION}\" | sed 's/[^[]*[^\"]*\"\([^\"]*\).*/\1/'"
    DETECT_SOURCE=$(eval $VERSION_CURL_CMD)
  else
    DETECT_SOURCE="https://test-repo.blackducksoftware.com/artifactory/bds-integrations-release/com/blackducksoftware/integration/hub-detect/${DETECT_RELEASE_VERSION}/hub-detect-${DETECT_RELEASE_VERSION}.jar"
  fi
  echo "will look for : ${DETECT_SOURCE}"

  DETECT_FILENAME=${DETECT_FILENAME:-$(awk -F "/" '{print $NF}' <<< $DETECT_SOURCE)}
  DETECT_DESTINATION="${DETECT_JAR_PATH}/${DETECT_FILENAME}"

  USE_REMOTE=1
  if [ ! -f $DETECT_DESTINATION ]; then
    echo "You don't have the current file, so it will be downloaded."
  else
    echo "You have already downloaded the latest file, so the local file will be used."
    USE_REMOTE=0
  fi

  if [ $USE_REMOTE -eq 1 ]; then
    echo "getting ${DETECT_SOURCE} from remote"
    curl $DETECT_CURL_OPTS --silent -L -o $DETECT_DESTINATION "${DETECT_SOURCE}"
    echo "saved ${DETECT_SOURCE} to ${DETECT_DESTINATION}"
  fi
}

run_detect() {
  JAVACMD="java ${DETECT_JAVA_OPTS} -jar ${DETECT_DESTINATION}"
  echo "running detect: ${JAVACMD} ${LOGGABLE_SCRIPT_ARGS}"

  # first, silently delete (-f ignores missing
  # files) any existing shell script, then create
  # the one we will run
  rm -f $DETECT_JAR_PATH/hub-detect-java.sh
  echo "#!/bin/sh" > $DETECT_JAR_PATH/hub-detect-java.sh
  echo "" >> $DETECT_JAR_PATH/hub-detect-java.sh
  echo $JAVACMD $SCRIPT_ARGS >> $DETECT_JAR_PATH/hub-detect-java.sh
  source $DETECT_JAR_PATH/hub-detect-java.sh
  RESULT=$?
  echo "Result code of ${RESULT}, exiting"
  rm -f $DETECT_JAR_PATH/hub-detect-java.sh
  exit $RESULT
}

run
