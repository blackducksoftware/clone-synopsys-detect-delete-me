task updateArtifactoryProperties() {
    dependsOn artifactoryPublish
    doLast {
        if (project.isSnapshot) {
            println 'For a snapshot build, artifactory properties will not be updated.'
        } else {
            try {
                println 'For a release build, an update of artifactory properties will be attempted.'
                int majorVersionIndex = project.version.indexOf('.') - 1
                def majorVersion = project.version[0..majorVersionIndex]
                def propertyKey = "DETECT_IS_LATEST_${majorVersion}"

                def artifactoryCredentials = "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}"

                def currentArtifact = findCurrentArtifact(artifactoryCredentials)
                if (currentArtifact) {
                    setArtifactoryProperty(artifactoryCredentials, propertyKey, 'true', currentArtifact)

                    def artifactoryItems = findPropertiesToUpdate(artifactoryCredentials, propertyKey, currentArtifact['itemPath'])
                    artifactoryItems.each {
                        setArtifactoryProperty(artifactoryCredentials, propertyKey, 'false', it)
                    }
                } else {
                    println "Artifactory properties won't be updated since ${project.version} was not found."
                }
            } catch (Exception e) {
                println "Manual corrections to the properties for ${project.name}-${project.version} may be necessary."
                println "Error correcting the artifactory properties: ${e.message}"
            }
        }
    }
}

def findCurrentArtifact(String artifactoryCredentials) {
    try {
        def url = "${project.ext.artifactoryUrl}/api/search/artifact?name=${project.name}-${project.version}.jar&repos=${project.ext.artifactoryRepo}"
        def artifactoryItems = getArtifactoryItems(url, artifactoryCredentials)

        if (artifactoryItems != null && artifactoryItems.size() == 1) {
            return artifactoryItems[0]
        }
    } catch (Exception e) {
        println "Could not find the current artifact: ${e.message}"
    }

    return null
}

def findPropertiesToUpdate(String artifactoryCredentials, String propertyKey, String itemPathToIgnore) {
    def url = "${project.ext.artifactoryUrl}/api/search/prop?${propertyKey}=true&repos=${project.ext.artifactoryRepo}"
    def artifactoryItems = getArtifactoryItems(url, artifactoryCredentials)

    return artifactoryItems.findAll { it.itemPath != itemPathToIgnore }
}

def getArtifactoryItems(String url, String artifactoryCredentials) {
    def artifactoryItems = []

    def curlArgs = defaultCurlArgs(artifactoryCredentials) + ['--header', 'X-Result-Detail: info', url]
    def response = curlResponse(curlArgs)

    def jsonResponse = new groovy.json.JsonSlurper().parseText(response)
    def results = jsonResponse['results']
    if (results != null && results.size() > 0) {
        results.each {
            def itemPath = it['path']
            def repoKey = it['repo']
            if (itemPath && repoKey) {
                artifactoryItems.add([itemPath:itemPath, repoKey:repoKey])
            }
        }
    }

    return artifactoryItems
}

def setArtifactoryProperty(String artifactoryCredentials, String propertyKey, String propertyValue, def artifact) {
    println "Setting ${propertyKey} to ${propertyValue} for ${artifact['itemPath']}."
    def curlArgs = defaultCurlArgs(artifactoryCredentials) + ['--request', 'PATCH', '--data', "{\"props\":{\"${propertyKey}\":\"${propertyValue}\"}}", "${project.ext.artifactoryUrl}/api/metadata/${artifact['repoKey']}${artifact['itemPath']}"]

    curlResponse(curlArgs)
}

def defaultCurlArgs(String artifactoryCredentials) {
    return ['--silent', '--insecure', '--user', artifactoryCredentials, '--header', 'Content-Type: application/json']
}

def curlResponse(def curlArgs) {
    new ByteArrayOutputStream().withStream { os ->
        exec {
            executable = 'curl'
            args = curlArgs
            standardOutput = os
        }
        return os.toString()
    }
}
