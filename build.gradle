import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView
import com.synopsys.integration.blackduck.api.generated.view.VersionBomComponentView
import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfig
import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder
import com.synopsys.integration.blackduck.service.BlackDuckService
import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory
import com.synopsys.integration.blackduck.service.ProjectService
import com.synopsys.integration.blackduck.service.model.ProjectVersionWrapper
import com.synopsys.integration.log.PrintStreamIntLogger
import com.synopsys.integration.polaris.common.api.generated.common.BranchV0
import com.synopsys.integration.polaris.common.api.generated.common.ProjectV0
import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig
import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder
import com.synopsys.integration.polaris.common.model.Issue
import com.synopsys.integration.polaris.common.model.QueryIssue
import com.synopsys.integration.polaris.common.service.BranchService
import com.synopsys.integration.polaris.common.service.IssueService
import com.synopsys.integration.polaris.common.service.PolarisService
import com.synopsys.integration.polaris.common.service.PolarisServicesFactory

buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'com.blackducksoftware.integration:blackduck-common:42.3.0-SNAPSHOT'
        classpath 'com.synopsys.integration:polaris-common:0.9.0'
    }
}

group = 'com.synopsys.integration'
version = '5.4.0-SNAPSHOT'

apply plugin: 'com.blackducksoftware.integration.solution'
apply plugin: 'org.springframework.boot'
apply from: 'airgap.gradle'
apply from: 'artifactory-properties.gradle'

def createArtifactName() {
    return "${buildDir}/libs/${project.name}-${version}.jar"
}

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        implementation 'com.blackducksoftware.integration:blackduck-common:42.3.0-SNAPSHOT'
        implementation 'com.paypal.digraph:digraph-parser:1.0'
    }
}

subprojects {
    group = rootProject.group
    version = rootProject.version
    apply plugin: 'com.blackducksoftware.integration.simple'

    license {
        header rootProject.file('LICENSE')
    }

    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            def jarName = createArtifactName()
            artifact(jarName)
        }
    }
}

artifactory {
    publish {
        defaults { publications('mavenJava') }
    }
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
}

dependencies {
    implementation project(":detect-configuration")

    implementation 'com.synopsys.integration:polaris-common:0.9.0'

    implementation 'org.apache.maven.shared:maven-invoker:3.0.0'
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.11'
    implementation 'com.moandjiezana.toml:toml4j:0.7.1'
    implementation 'org.codehaus.groovy:groovy-all:2.4.12'
    implementation 'org.freemarker:freemarker:2.3.26-incubating'
    implementation 'org.springframework.boot:spring-boot-starter'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.5'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.5'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

springBoot { mainClassName = 'com.synopsys.integration.detect.Application' }

if ("true" == project.findProperty('refresh.cache')) {
    project.dependencies {
        implementation 'com.blackducksoftware.integration:integration-gradle-inspector:0.6.0'
    }

    project.repositories.clear()
    project.repositories {
        maven {
            url 'https://repo.blackducksoftware.com:443/artifactory/bds-integration-public-cache'
            credentials {
                username = project.ext.artifactoryDeployerUsername
                password = project.ext.artifactoryDeployerPassword
            }
        }
    }
}

task runDetect(type: JavaExec) {
    dependsOn build

    classpath = files(createArtifactName())
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.synopsys.integration.detect.Application'
    args = ['--detect.risk.report.pdf=true', '--detect.tools.excluded=POLARIS']
}

task verifyBlackDuckDetect() {
    dependsOn runDetect

    doLast {
        BlackDuckServerConfigBuilder blackDuckServerConfigBuilder = BlackDuckServerConfig.newBuilder()
        Set<String> environmentKeys = blackDuckServerConfigBuilder.getEnvironmentVariableKeys()
        environmentKeys.each {
            String value = System.getenv().get(it)
            if (value) {
                blackDuckServerConfigBuilder.setProperty(it, value)
            }
        }

        BlackDuckServerConfig blackDuckServerConfig = blackDuckServerConfigBuilder.build()
        BlackDuckServicesFactory blackDuckServicesFactory = blackDuckServerConfig.createBlackDuckServicesFactory(new PrintStreamIntLogger(System.out, com.synopsys.integration.log.LogLevel.INFO))
        BlackDuckService blackDuckService = blackDuckServicesFactory.createBlackDuckService()
        ProjectService projectService = blackDuckServicesFactory.createProjectService()

        ProjectVersionWrapper projectVersionWrapper = projectService.getProjectVersion(project.name, version).get()
        List<VersionBomComponentView> bomComponents = blackDuckService.getAllResponses(projectVersionWrapper.projectVersionView, ProjectVersionView.COMPONENTS_LINK_RESPONSE)
        if (bomComponents.isEmpty()) {
            throw new GradleException("No bom components were found for ${project.name} - ${version}");
        }
        bomComponents.each {
            println "${it.componentName} - ${it.componentVersionName}"
        }
    }

    task verifyPolarisDetect() {
        dependsOn runDetect

        doLast {
            PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder()
            Set<String> environmentKeys = polarisServerConfigBuilder.getEnvironmentVariableKeys()
            environmentKeys.each {
                String value = System.getenv().get(it)
                if (value) {
                    polarisServerConfigBuilder.setProperty(it, value)
                }
            }

            PolarisServerConfig polarisServerConfig = polarisServerConfigBuilder.build()
            PolarisServicesFactory polarisServicesFactory = polarisServerConfig.createPolarisServicesFactory(new PrintStreamIntLogger(System.out, com.synopsys.integration.log.LogLevel.INFO))
            com.synopsys.integration.polaris.common.service.ProjectService projectService = polarisServicesFactory.createProjectService()
            BranchService branchService = polarisServicesFactory.createBranchService()
            IssueService issueService = polarisServicesFactory.createIssueService()

            ProjectV0 project = projectService.getProjectByName(project.name).get()
            BranchV0 branch = branchService.getBranchForProjectByName(project.getId(), 'master').get()
            List<QueryIssue> queryIssues = issueService.getIssuesForProjectAndBranch(project.getId(), branch.getId())
            println "Found ${queryIssues.size()} issues."
            queryIssues.each {
                Issue issue = issueService.getIssueForProjectBranchAndIssueKey(project.getId(), branch.getId(), it.attributes.issueKey)
                println issue.getLabel() + " " + issue.getSourcePath()
            }
        }
    }

    task verifyDetect() {
        dependsOn verifyBlackDuckDetect
        dependsOn verifyPolarisDetect
    }

}
