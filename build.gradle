buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }

    dependencies {
        configurations.all {
            resolutionStrategy {
                force 'com.blackducksoftware.integration:integration-test-common:3.1.3'
            }
        }
        classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.38'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

String sharedVersion = '3.4.0-SNAPSHOT'
version = sharedVersion

configure(subprojects) { project ->
    group = 'com.blackducksoftware.integration'
    version = sharedVersion

    apply plugin: 'com.blackducksoftware.integration.solution'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'

    license {
        header rootProject.file('LICENSE')
    }
    dependencyManagement {
        imports {
            mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        }
    }

    dependencies {
        compile 'com.blackducksoftware.integration:hub-common:38.3.3'
        compile 'com.github.zafarkhaja:java-semver:0.9.0'
    }

    configurations.all {
        resolutionStrategy {
            force 'com.blackducksoftware.integration:integration-test-common:3.1.3'
        }
    }
}

task doIt() {
    //    dependsOn artifactoryPublish
    doLast {
        int majorVersionIndex = project.version.indexOf('.') - 1
        def majorVersion = project.version[0..majorVersionIndex]
        def propertyKey = "DETECT_IS_LATEST_${majorVersion}"

        def artifactoryCredentials = "${project.ext.artifactoryDeployerUsername}:${project.ext.artifactoryDeployerPassword}"
        def propertySearchUrl = "${project.ext.artifactoryUrl}/api/search/prop?${propertyKey}=true&repos=${project.ext.artifactoryRepo}"
        println propertySearchUrl

        URL url = new URL(propertySearchUrl)
        URLConnection urlConnection = url.openConnection()
        String basicAuth = "Basic " + new String(Base64.getEncoder().encode(artifactoryCredentials.getBytes()))
        urlConnection.setRequestProperty("Authorization", basicAuth)
        urlConnection.setRequestProperty("X-Result-Detail", "info")

        def jsonText = urlConnection.getInputStream().getText()
        def jsonMap = new groovy.json.JsonSlurper().parseText(jsonText)
        def itemPaths = getItemPathsToRepoKeys(jsonMap)
        println itemPaths
        itemPaths.each { key, value ->
            setPropertyToFalse(project.ext.artifactoryUrl, artifactoryCredentials, value, key, propertyKey)
        }
    }
}

def getItemPathsToRepoKeys(Map jsonResponse) {
    def itemPathsToRepoKeys = [:]

    def results = jsonResponse['results']
    if (results != null && results.size() > 0) {
        results.each {
            def itemPath = it['path']
            def repoKey = it['repo']
            if (itemPath && repoKey) {
                itemPathsToRepoKeys.put(itemPath, repoKey)
            }
        }
    }

    return itemPathsToRepoKeys
}

def setPropertyToFalse(String artifactoryUrl, String artifactoryCredentials, String repoKey, String itemPath, String propertyKey) {
    exec {
        commandLine 'curl', '--insecure', '--user', artifactoryCredentials, '--header', 'Content-Type: application/json', '--request', 'PATCH', '--data', "{\"props\":{\"${propertyKey}\":\"false\"}}", "${artifactoryUrl}/api/metadata/${repoKey}${itemPath}"
    }
}
