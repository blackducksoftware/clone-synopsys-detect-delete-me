{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Help Topics # Synopsys Detect 6.6.0-SNAPSHOT If the list of help topics is not visible to the left, try increasing the width of your browser window. Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. Topics followed by a down-facing arrow can be expanded to reveal subtopics. On each page that contains multiple sections, a table of contents for the page will appear on the right sidebar. Type a search term into the Search box on the right side of the header, then select from the list of topics that mention that term. If you are new to Synopsys Detect, reading the topics in the order presented in the left sidebar is a reasonable way to start. You can use the Next link at the bottom right of each page to advance to the next topic.","title":"<b>Help Topics</b>"},{"location":"#help-topics","text":"Synopsys Detect 6.6.0-SNAPSHOT If the list of help topics is not visible to the left, try increasing the width of your browser window. Options for navigating this help content: Use the top-level topic list in the left sidebar to navigate to a topic. Topics followed by a down-facing arrow can be expanded to reveal subtopics. On each page that contains multiple sections, a table of contents for the page will appear on the right sidebar. Type a search term into the Search box on the right side of the header, then select from the list of topics that mention that term. If you are new to Synopsys Detect, reading the topics in the order presented in the left sidebar is a reasonable way to start. You can use the Next link at the bottom right of each page to advance to the next topic.","title":"Help Topics"},{"location":"00-introduction/","text":"Introduction # Synopsys Detect analyzes your software project to identify open source component dependencies. Synopsys Detect uploads the identities of those components to Black Duck. Black Duck utilizes this information to build an open source software Bill Of Materials (BOM) for your project, and identify any associated security vulnerabilities and software licenses. Synopsys Detect discovers components using a variety of detection methods, including: Package manager inspection utilizing commonly used tools such as Maven, Gradle, etc. File scanning utilizing the Black Duck Signature Scanner. Docker image inspection utilizing the Black Duck Docker Inspector. Binary file analysis utilizing Black Duck - Binary Analysis. By combining all these techniques Synopsys Detect is capable of scanning a wide range of software projects utilizing a variety of package managers and programming languages for open source components that are registered within the Black Duck KnowledgeBase. Synopsys Detect runs on Windows, Linux, and MacOS. It is available through GitHub, under a permissive Apache license and does not require pre-installation or configuration. For more information, refer to Requirements . Although Synopsys Detect can support large projects, care should be taken to ensure that scans are performed to optimize platform performance and produce manageable and meaningful results. For applications containing multiple sub-projects, it may be advantageous to scan sub-projects separately and combine results as a project of projects, or other techniques. A typical Synopsys Detect run # While there are many variations on a Synopsys Detect run, a typical Synopsys Detect run performs the steps described as follows. In this example, the user has provided Black Duck connection details through property settings to Synopsys Detect, signalling that results (project dependency details) are to be uploaded to Black Duck. In a typical run, Synopsys Detect: Uses the project's package manager to derive the hierarchy of dependencies known to that package manager. For example, on a Maven project, Synopsys Detect executes an \"mvn dependency:tree\" command, and derives dependency information from the output. Runs the Black Duck Signature Scanner on the project. This may identify additional dependencies not known to the package manager (for example, a .jar file copied into the project directory). Uploads both sets of results (dependency details) to Black Duck creating the project/version if it does not already exist. Black Duck uses the uploaded dependency information to build the Bill Of Materials (BOM) for the project/version. Synopsys Detect processing in more detail # Synopsys Detect processing is divided into three phases: Initialization Run Cleanup Initialization phase # During the initialization phase, Synopsys Detect performs verification checks on the user-provided configration, checks to see if it can connect to any external systems needed for the run, and creates any required directories. Run phase # During the run phase, Synopsys Detect processes an ordered list of tools , invoking all that apply. Tool applicability depends on how Synopsys Detect is configured; in other words, the property values you set. The detector tool runs by default. The Black Duck Signature Scanner tool runs by default when Black Duck connection details are provided. The detector tool invokes all applicable detectors . Detector applicability depends on what Synopsys Detect finds in your project. For example, if Synopsys Detect finds a pom.xml file, it runs the Maven detector. If it finds Gradle files, it runs the Gradle detector. In the typical run previously described, two tools are applied: the detector tool which ran the Maven detector, and the Black Duck Signature Scanner tool which ran the Black Duck Signature Scanner. At the end of the run phase, Synopsys Detect uploads results to the appropriate external system(s) (Black Duck and/or Polaris), and optionally perform post actions, such as generating a risk report or checking for policy violations. In the typical run previously described, Synopsys Detect uploads Black Duck results from the Maven detector and the Black Duck Signature Scanner. Cleanup phase # During the cleanup phase, Synopsys Detect removes temporary files and directories before exiting. Controlling Synopsys Detect processing # For more information on controlling the tools and detectors executed by Synopsys Detect, refer to Including/excluding tools/detectors .","title":"Introduction"},{"location":"00-introduction/#introduction","text":"Synopsys Detect analyzes your software project to identify open source component dependencies. Synopsys Detect uploads the identities of those components to Black Duck. Black Duck utilizes this information to build an open source software Bill Of Materials (BOM) for your project, and identify any associated security vulnerabilities and software licenses. Synopsys Detect discovers components using a variety of detection methods, including: Package manager inspection utilizing commonly used tools such as Maven, Gradle, etc. File scanning utilizing the Black Duck Signature Scanner. Docker image inspection utilizing the Black Duck Docker Inspector. Binary file analysis utilizing Black Duck - Binary Analysis. By combining all these techniques Synopsys Detect is capable of scanning a wide range of software projects utilizing a variety of package managers and programming languages for open source components that are registered within the Black Duck KnowledgeBase. Synopsys Detect runs on Windows, Linux, and MacOS. It is available through GitHub, under a permissive Apache license and does not require pre-installation or configuration. For more information, refer to Requirements . Although Synopsys Detect can support large projects, care should be taken to ensure that scans are performed to optimize platform performance and produce manageable and meaningful results. For applications containing multiple sub-projects, it may be advantageous to scan sub-projects separately and combine results as a project of projects, or other techniques.","title":"Introduction"},{"location":"00-introduction/#a-typical-synopsys-detect-run","text":"While there are many variations on a Synopsys Detect run, a typical Synopsys Detect run performs the steps described as follows. In this example, the user has provided Black Duck connection details through property settings to Synopsys Detect, signalling that results (project dependency details) are to be uploaded to Black Duck. In a typical run, Synopsys Detect: Uses the project's package manager to derive the hierarchy of dependencies known to that package manager. For example, on a Maven project, Synopsys Detect executes an \"mvn dependency:tree\" command, and derives dependency information from the output. Runs the Black Duck Signature Scanner on the project. This may identify additional dependencies not known to the package manager (for example, a .jar file copied into the project directory). Uploads both sets of results (dependency details) to Black Duck creating the project/version if it does not already exist. Black Duck uses the uploaded dependency information to build the Bill Of Materials (BOM) for the project/version.","title":"A typical Synopsys Detect run"},{"location":"00-introduction/#synopsys-detect-processing-in-more-detail","text":"Synopsys Detect processing is divided into three phases: Initialization Run Cleanup","title":"Synopsys Detect processing in more detail"},{"location":"00-introduction/#initialization-phase","text":"During the initialization phase, Synopsys Detect performs verification checks on the user-provided configration, checks to see if it can connect to any external systems needed for the run, and creates any required directories.","title":"Initialization phase"},{"location":"00-introduction/#run-phase","text":"During the run phase, Synopsys Detect processes an ordered list of tools , invoking all that apply. Tool applicability depends on how Synopsys Detect is configured; in other words, the property values you set. The detector tool runs by default. The Black Duck Signature Scanner tool runs by default when Black Duck connection details are provided. The detector tool invokes all applicable detectors . Detector applicability depends on what Synopsys Detect finds in your project. For example, if Synopsys Detect finds a pom.xml file, it runs the Maven detector. If it finds Gradle files, it runs the Gradle detector. In the typical run previously described, two tools are applied: the detector tool which ran the Maven detector, and the Black Duck Signature Scanner tool which ran the Black Duck Signature Scanner. At the end of the run phase, Synopsys Detect uploads results to the appropriate external system(s) (Black Duck and/or Polaris), and optionally perform post actions, such as generating a risk report or checking for policy violations. In the typical run previously described, Synopsys Detect uploads Black Duck results from the Maven detector and the Black Duck Signature Scanner.","title":"Run phase"},{"location":"00-introduction/#cleanup-phase","text":"During the cleanup phase, Synopsys Detect removes temporary files and directories before exiting.","title":"Cleanup phase"},{"location":"00-introduction/#controlling-synopsys-detect-processing","text":"For more information on controlling the tools and detectors executed by Synopsys Detect, refer to Including/excluding tools/detectors .","title":"Controlling Synopsys Detect processing"},{"location":"10-requirements/","text":"Requirements # General requirements # Requirements for Synopsys Detect Normally, access to the internet is required to download and run Synopsys Detect and components from GitHub and other locations. For running without internet access, refer to Air gap and offline modes . Minimum 8GB RAM. OpenJDK versions 8 or 11. curl versions 7.34.0 or later. Bash. If using detect.ps1: PowerShell versions 4.0 or higher. The tools required to build your project source code. Black Duck requirements # For connecting to Black Duck: Licensed installation of the current version of Black Duck with access credentials. Visit this page to determine the current version of Black Duck. The Black Duck notifications module must be enabled. A Black Duck user with the required roles . On Alpine Linux you will also need to override the Java installation used by the Black Duck Signature Scanner as described here . Polaris requirements # A licensed installation of Polaris with access credentials. Project type-specific requirements # In general, the detectors require: All dependencies must be resolvable. This generally means that each dependency has been installed using the package manager's cache, virtual environment, and others. The package manager / build tool must be installed and in the path. Refer to Language and package managers for information on specific detectors. Risk report requirements # The risk report requires that the following fonts are installed: Helvetica Helvetica bold","title":"Requirements"},{"location":"10-requirements/#requirements","text":"","title":"Requirements"},{"location":"10-requirements/#general-requirements","text":"Requirements for Synopsys Detect Normally, access to the internet is required to download and run Synopsys Detect and components from GitHub and other locations. For running without internet access, refer to Air gap and offline modes . Minimum 8GB RAM. OpenJDK versions 8 or 11. curl versions 7.34.0 or later. Bash. If using detect.ps1: PowerShell versions 4.0 or higher. The tools required to build your project source code.","title":"General requirements"},{"location":"10-requirements/#black-duck-requirements","text":"For connecting to Black Duck: Licensed installation of the current version of Black Duck with access credentials. Visit this page to determine the current version of Black Duck. The Black Duck notifications module must be enabled. A Black Duck user with the required roles . On Alpine Linux you will also need to override the Java installation used by the Black Duck Signature Scanner as described here .","title":"Black Duck requirements"},{"location":"10-requirements/#polaris-requirements","text":"A licensed installation of Polaris with access credentials.","title":"Polaris requirements"},{"location":"10-requirements/#project-type-specific-requirements","text":"In general, the detectors require: All dependencies must be resolvable. This generally means that each dependency has been installed using the package manager's cache, virtual environment, and others. The package manager / build tool must be installed and in the path. Refer to Language and package managers for information on specific detectors.","title":"Project type-specific requirements"},{"location":"10-requirements/#risk-report-requirements","text":"The risk report requires that the following fonts are installed: Helvetica Helvetica bold","title":"Risk report requirements"},{"location":"20-quickstart/","text":"Quickstart guide # The following is a simple example to help you get started using Synopsys Detect. Step 1: Locate or acquire a source code project on which you will run Synopsys Detect. # To run Synopsys Detect on junit4, which is an open source project written in Java and built with Maven, you could acquire it by doing the following: git clone https://github.com/junit-team/junit4.git cd junit4 To understand what Synopsys Detect does, it can be helpful to think about what you would do if you wanted to discover this project's dependencies without using Synopsys Detect. You might do the following: Look in the project directory (junit4) for hints about how dependencies are managed. In this case, the mvnw and pom.xml files are hints that dependencies are managed using Maven. Since it's a Maven project, you would likely run ./mvnw dependency:tree to reveal the project's dependencies; both direct and transitive. This is exactly what Synopsys Detect does on this project. In addition, Synopsys Detect runs the Black Duck Signature Scanner on the directory, which discovers additional dependencies added to the project by any means other than the package manager. Step 2: Run Synopsys Detect in offline mode. # Running Synopsys Detect in offline mode eliminates the need to provide connection details to Black Duck or Polaris, while giving you an opportunity to see what Synopsys Detect does on a project. At the top level of the project directory (junit4), run Synopsys Detect in offline mode. On Linux or Mac: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.offline.mode=true On Windows: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.offline.mode=true The operations performed by Synopsys Detect depends on what it finds in your source directory. By default, Synopsys Detect considers the current working directory to be your source directory. In the junit4 case, Synopsys Detect will: Run the Maven detector, creating one BDIO (Black Duck Input Output) (.jsonld) file that contains the dependencies discovered using Maven. Run the Black Duck Signature Scanner, creating a .json file that contains the dependencies discovered by the Black Duck Signature Scanner. In offline mode, neither of these are uploaded to Black Duck. To locate these files, look in the log for the message \"Run directory: ...\". These files are located inside the specified run directory. Step 3: Run Synopsys Detect connected to Black Duck. # If you have access to a Black Duck server, you can re-run Synopsys Detect, this time connecting and uploading results to Black Duck. To connect Synopsys Detect to Black Duck, replace the --blackduck.offline.mode=true command line argument with the following three arguments that provide login details for your Black Duck server: --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} The command you run looks like this: On Linux or Mac: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} On Windows: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} In this way, Synopsys Detect performs the same steps it did in the offline run, plus the following: Uploads the discovered dependencies to Black Duck. Provides in the log a \"Black Duck Project BOM URL that you can use to view the results in Black Duck. Point your browser to the Black Duck Project BOM URL to see the Bill Of Materials for junit4. Next steps # Because Synopsys Detect can be used on a variety of project types in a variety of ways, its behavior is highly configurable. More detailed information on how to configure Synopsys Detect for your needs is provided in the following sections.","title":"Quickstart guide"},{"location":"20-quickstart/#quickstart-guide","text":"The following is a simple example to help you get started using Synopsys Detect.","title":"Quickstart guide"},{"location":"20-quickstart/#step-1-locate-or-acquire-a-source-code-project-on-which-you-will-run-synopsys-detect","text":"To run Synopsys Detect on junit4, which is an open source project written in Java and built with Maven, you could acquire it by doing the following: git clone https://github.com/junit-team/junit4.git cd junit4 To understand what Synopsys Detect does, it can be helpful to think about what you would do if you wanted to discover this project's dependencies without using Synopsys Detect. You might do the following: Look in the project directory (junit4) for hints about how dependencies are managed. In this case, the mvnw and pom.xml files are hints that dependencies are managed using Maven. Since it's a Maven project, you would likely run ./mvnw dependency:tree to reveal the project's dependencies; both direct and transitive. This is exactly what Synopsys Detect does on this project. In addition, Synopsys Detect runs the Black Duck Signature Scanner on the directory, which discovers additional dependencies added to the project by any means other than the package manager.","title":"Step 1: Locate or acquire a source code project on which you will run Synopsys Detect."},{"location":"20-quickstart/#step-2-run-synopsys-detect-in-offline-mode","text":"Running Synopsys Detect in offline mode eliminates the need to provide connection details to Black Duck or Polaris, while giving you an opportunity to see what Synopsys Detect does on a project. At the top level of the project directory (junit4), run Synopsys Detect in offline mode. On Linux or Mac: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.offline.mode=true On Windows: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.offline.mode=true The operations performed by Synopsys Detect depends on what it finds in your source directory. By default, Synopsys Detect considers the current working directory to be your source directory. In the junit4 case, Synopsys Detect will: Run the Maven detector, creating one BDIO (Black Duck Input Output) (.jsonld) file that contains the dependencies discovered using Maven. Run the Black Duck Signature Scanner, creating a .json file that contains the dependencies discovered by the Black Duck Signature Scanner. In offline mode, neither of these are uploaded to Black Duck. To locate these files, look in the log for the message \"Run directory: ...\". These files are located inside the specified run directory.","title":"Step 2: Run Synopsys Detect in offline mode."},{"location":"20-quickstart/#step-3-run-synopsys-detect-connected-to-black-duck","text":"If you have access to a Black Duck server, you can re-run Synopsys Detect, this time connecting and uploading results to Black Duck. To connect Synopsys Detect to Black Duck, replace the --blackduck.offline.mode=true command line argument with the following three arguments that provide login details for your Black Duck server: --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} The command you run looks like this: On Linux or Mac: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} On Windows: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.url={your Black Duck server URL} --blackduck.username={your Black Duck username} --blackduck.password={your Black Duck password} In this way, Synopsys Detect performs the same steps it did in the offline run, plus the following: Uploads the discovered dependencies to Black Duck. Provides in the log a \"Black Duck Project BOM URL that you can use to view the results in Black Duck. Point your browser to the Black Duck Project BOM URL to see the Bill Of Materials for junit4.","title":"Step 3: Run Synopsys Detect connected to Black Duck."},{"location":"20-quickstart/#next-steps","text":"Because Synopsys Detect can be used on a variety of project types in a variety of ways, its behavior is highly configurable. More detailed information on how to configure Synopsys Detect for your needs is provided in the following sections.","title":"Next steps"},{"location":"30-running/","text":"Downloading and running # Positioning Synopsys Detect in the build process # Build mode # In build mode , which is the default, Synopsys Detect should be executed as a post-build step in the build environment of the project. Building your project prior to running Synopsys Detect is often required for the detector to run successfully, and helps ensure that the build artifacts are available for signature scanning. Buildless mode # In buildless mode , Synopsys Detect makes its best effort to discover dependencies without the benefit of build artifacts or build tools. In buildless mode, there is no requirement that Synopsys Detect must run as a post-build step. Results from buildless mode may be less accurate than results from build mode. Choosing the working directory # You can run Synopsys Detect from any directory. If you are not running Synopsys Detect from the project directory, provide the project directory using the source path property . When that property is not set, Synopsys Detect assumes the current working directory is the project directory. Choosing a run method (script or .jar) # There are two ways to run Synopsys Detect: Download and run a Synopsys Detect script. Download and run a Synopsys Detect .jar file. The primary reason to run a Synopsys Detect script is that the scripts by default always run the latest version of the Synopsys Detect .jar file; downloading it for you if necessary. When run this way, Synopsys Detect automatically updates itself; as soon as a new version becomes available, the new version automatically runs, unless you override this default behavior. The primary reason to run the Synopsys Detect .jar directly is that this method provides direct control over the Synopsys Detect version; Synopsys Detect does not automatically update in this scenario. Running the Synopsys Detect script # The primary function of the Synopsys Detect scripts is to download and execute the Synopsys Detect .jar file. Several aspects of script functionality can be configured, including: The Synopsys Detect version to download/run; by default, the latest version. The download location. Where to find Java. Information on how to configure the scripts is in Shell script configuration . Linux or Mac # On Linux or Mac, execute the Synopsys Detect script (detect.sh, which is a Bash script) from Bash. To download and run the latest version of Synopsys Detect in a single command: bash (curl -s -L https://detect.synopsys.com/detect.sh) Append any command line arguments to the end, separated by spaces. For example: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.url=https://blackduck.mydomain.com --blackduck.username=myusername Windows # On Windows, execute the Synopsys Detect script (detect.ps1, which is a PowerShell script) from the Command Prompt . To download and run the latest version of Synopsys Detect in a single command: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect Append any command line arguments to the end, separated by spaces. For example: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.url=https://blackduck.mydomain.com --blackduck.username=myusername Running a specific version of Synopsys Detect # Linux or Mac (Bash) # To run a specific version of Synopsys Detect: export DETECT_LATEST_RELEASE_VERSION={Synopsys Detect version} bash (curl -s -L https://detect.synopsys.com/detect.sh) For example, to run Synopsys Detect version 5.5.0: export DETECT_LATEST_RELEASE_VERSION=5.5.0 bash (curl -s -L https://detect.synopsys.com/detect.sh) Windows (PowerShell) # To run a specific version of Synopsys Detect: $Env:DETECT_LATEST_RELEASE_VERSION = {Synopsys Detect version} powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect For example, to run Synopsys Detect version 5.5.0: $Env:DETECT_LATEST_RELEASE_VERSION = 5.5.0 powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect Running the Synopsys Detect .jar # Recent versions of the Synopsys Detect .jar file are available for download from https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect. To run Synopsys Detect by invoking the .jar file: java -jar {path to .jar file} For example: curl -O https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect/5.6.2/synopsys-detect-5.6.2.jar java -jar synopsys-detect-5.6.2.jar You can use the Synopsys Detect Bash script (detect.sh) to download the Synopsys Detect .jar file: export DETECT_DOWNLOAD_ONLY=1 ./detect.sh Including and excluding tools and detectors # Properties provide a variety of options for configuring Synopsys Detect behavior. One of the most fundamental ways to modify Synopsys Detect is by including and excluding tools and detectors . Tools # By default, all tools are eligible to run; the set of tools that actually run depends on the properties you set. To limit the eligible tools to a given list, use: --detect.tools={comma-separated list of tool names, all uppercase} To exclude specific tools, use: --detect.tools.excluded={comma-separated list of tool names, all uppercase} Exclusions take precedence over inclusions. Refer to Tools for the list of tool names. Refer to Properties for details. Detectors # By default, all detectors are eligible to run. The set of detectors that actually run depends on the files existing in your project directory. To limit the eligible detectors to a given list, use: --detect.included.detector.types={comma-separated list of detector names} To exclude specific detectors, use: --detect.excluded.detector.types={comma-separated list of detector names} Exclusions take precedence over inclusions. Refer to Detectors for the list of detector names. Refer to Properties for details. Running with Black Duck # Synopsys Detect can be used with Black Duck to perform Software Composition Analysis (SCA). Overview # When Black Duck connection details are provided, Synopsys Detect executes the following by default: The detector tool , which runs the appropriate package manager-specific detector; the Maven detector for Maven projects, the Gradle detector for Gradle projects, and so forth. The Black Duck Signature Scanner , which performs a Black Duck signature scan on the project directory. Synopsys Detect can be configured to perform additional tasks, including the following: Enable any of the supported snippet matching modes in the Black Duck Signature Scanner . Enable the Vulnerability Impact Analysis Tool on any Java project. Run Black Duck - Binary Analysis on a given binary files. Run the Black Duck Docker Inspector on a given Docker image . Generate a report . Fail on policy violation . Refer to Black Duck Server properties and Black Duck Signature Scanner properties for details. Offline mode # If you do not have a Black Duck instance, or if your network is down, you can still run Synopsys Detect in offline mode. In offline mode, Synopsys Detect creates the BDIO content and the dry run Black Duck signature scan output files without attempting to upload them to Black Duck. You can run Synopsys Detect in offline mode using the offline mode property . BDIO format # Synopsys Detect produces dependency information for Black Duck in Black Duck Input Output (BDIO) format files. Synopsys Detect can produce BDIO files in two formats: BDIO version 1, or BDIO version 2. Versions of Black Duck prior to 2018.12.4 accept only BDIO 1. Black Duck versions 2018.12.4 and higher accept either BDIO 1 or BDIO 2. By default, Synopsys Detect produces BDIO 1 files. Use the BDIO2 enabled property to select BDIO 2 format. Running with Polaris # This capability is deprecated and will be removed in a future release. Synopsys Detect can be used with Polaris to perform Static Application Security Testing (SAST). When Polaris connection details are provided, Synopsys Detect executes the following by default: The detector tool, which runs the appropriate package manager-specific detector; the Maven detector for Maven projects, the Gradle detector for Gradle projects, and so forth. The Polaris tool, which runs the Polaris CLI on the project directory. Refer to Properties for details.","title":"Downloading and running"},{"location":"30-running/#downloading-and-running","text":"","title":"Downloading and running"},{"location":"30-running/#positioning-synopsys-detect-in-the-build-process","text":"","title":"Positioning Synopsys Detect in the build process"},{"location":"30-running/#build-mode","text":"In build mode , which is the default, Synopsys Detect should be executed as a post-build step in the build environment of the project. Building your project prior to running Synopsys Detect is often required for the detector to run successfully, and helps ensure that the build artifacts are available for signature scanning.","title":"Build mode"},{"location":"30-running/#buildless-mode","text":"In buildless mode , Synopsys Detect makes its best effort to discover dependencies without the benefit of build artifacts or build tools. In buildless mode, there is no requirement that Synopsys Detect must run as a post-build step. Results from buildless mode may be less accurate than results from build mode.","title":"Buildless mode"},{"location":"30-running/#choosing-the-working-directory","text":"You can run Synopsys Detect from any directory. If you are not running Synopsys Detect from the project directory, provide the project directory using the source path property . When that property is not set, Synopsys Detect assumes the current working directory is the project directory.","title":"Choosing the working directory"},{"location":"30-running/#choosing-a-run-method-script-or-jar","text":"There are two ways to run Synopsys Detect: Download and run a Synopsys Detect script. Download and run a Synopsys Detect .jar file. The primary reason to run a Synopsys Detect script is that the scripts by default always run the latest version of the Synopsys Detect .jar file; downloading it for you if necessary. When run this way, Synopsys Detect automatically updates itself; as soon as a new version becomes available, the new version automatically runs, unless you override this default behavior. The primary reason to run the Synopsys Detect .jar directly is that this method provides direct control over the Synopsys Detect version; Synopsys Detect does not automatically update in this scenario.","title":"Choosing a run method (script or .jar)"},{"location":"30-running/#running-the-synopsys-detect-script","text":"The primary function of the Synopsys Detect scripts is to download and execute the Synopsys Detect .jar file. Several aspects of script functionality can be configured, including: The Synopsys Detect version to download/run; by default, the latest version. The download location. Where to find Java. Information on how to configure the scripts is in Shell script configuration .","title":"Running the Synopsys Detect script"},{"location":"30-running/#linux-or-mac","text":"On Linux or Mac, execute the Synopsys Detect script (detect.sh, which is a Bash script) from Bash. To download and run the latest version of Synopsys Detect in a single command: bash (curl -s -L https://detect.synopsys.com/detect.sh) Append any command line arguments to the end, separated by spaces. For example: bash (curl -s -L https://detect.synopsys.com/detect.sh) --blackduck.url=https://blackduck.mydomain.com --blackduck.username=myusername","title":"Linux or Mac"},{"location":"30-running/#windows","text":"On Windows, execute the Synopsys Detect script (detect.ps1, which is a PowerShell script) from the Command Prompt . To download and run the latest version of Synopsys Detect in a single command: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect Append any command line arguments to the end, separated by spaces. For example: powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect --blackduck.url=https://blackduck.mydomain.com --blackduck.username=myusername","title":"Windows"},{"location":"30-running/#running-a-specific-version-of-synopsys-detect","text":"","title":"Running a specific version of Synopsys Detect"},{"location":"30-running/#linux-or-mac-bash","text":"To run a specific version of Synopsys Detect: export DETECT_LATEST_RELEASE_VERSION={Synopsys Detect version} bash (curl -s -L https://detect.synopsys.com/detect.sh) For example, to run Synopsys Detect version 5.5.0: export DETECT_LATEST_RELEASE_VERSION=5.5.0 bash (curl -s -L https://detect.synopsys.com/detect.sh)","title":"Linux or Mac (Bash)"},{"location":"30-running/#windows-powershell","text":"To run a specific version of Synopsys Detect: $Env:DETECT_LATEST_RELEASE_VERSION = {Synopsys Detect version} powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect For example, to run Synopsys Detect version 5.5.0: $Env:DETECT_LATEST_RELEASE_VERSION = 5.5.0 powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect","title":"Windows (PowerShell)"},{"location":"30-running/#running-the-synopsys-detect-jar","text":"Recent versions of the Synopsys Detect .jar file are available for download from https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect. To run Synopsys Detect by invoking the .jar file: java -jar {path to .jar file} For example: curl -O https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect/5.6.2/synopsys-detect-5.6.2.jar java -jar synopsys-detect-5.6.2.jar You can use the Synopsys Detect Bash script (detect.sh) to download the Synopsys Detect .jar file: export DETECT_DOWNLOAD_ONLY=1 ./detect.sh","title":"Running the Synopsys Detect .jar"},{"location":"30-running/#including-and-excluding-tools-and-detectors","text":"Properties provide a variety of options for configuring Synopsys Detect behavior. One of the most fundamental ways to modify Synopsys Detect is by including and excluding tools and detectors .","title":"Including and excluding tools and detectors"},{"location":"30-running/#tools","text":"By default, all tools are eligible to run; the set of tools that actually run depends on the properties you set. To limit the eligible tools to a given list, use: --detect.tools={comma-separated list of tool names, all uppercase} To exclude specific tools, use: --detect.tools.excluded={comma-separated list of tool names, all uppercase} Exclusions take precedence over inclusions. Refer to Tools for the list of tool names. Refer to Properties for details.","title":"Tools"},{"location":"30-running/#detectors","text":"By default, all detectors are eligible to run. The set of detectors that actually run depends on the files existing in your project directory. To limit the eligible detectors to a given list, use: --detect.included.detector.types={comma-separated list of detector names} To exclude specific detectors, use: --detect.excluded.detector.types={comma-separated list of detector names} Exclusions take precedence over inclusions. Refer to Detectors for the list of detector names. Refer to Properties for details.","title":"Detectors"},{"location":"30-running/#running-with-black-duck","text":"Synopsys Detect can be used with Black Duck to perform Software Composition Analysis (SCA).","title":"Running with Black Duck"},{"location":"30-running/#overview","text":"When Black Duck connection details are provided, Synopsys Detect executes the following by default: The detector tool , which runs the appropriate package manager-specific detector; the Maven detector for Maven projects, the Gradle detector for Gradle projects, and so forth. The Black Duck Signature Scanner , which performs a Black Duck signature scan on the project directory. Synopsys Detect can be configured to perform additional tasks, including the following: Enable any of the supported snippet matching modes in the Black Duck Signature Scanner . Enable the Vulnerability Impact Analysis Tool on any Java project. Run Black Duck - Binary Analysis on a given binary files. Run the Black Duck Docker Inspector on a given Docker image . Generate a report . Fail on policy violation . Refer to Black Duck Server properties and Black Duck Signature Scanner properties for details.","title":"Overview"},{"location":"30-running/#offline-mode","text":"If you do not have a Black Duck instance, or if your network is down, you can still run Synopsys Detect in offline mode. In offline mode, Synopsys Detect creates the BDIO content and the dry run Black Duck signature scan output files without attempting to upload them to Black Duck. You can run Synopsys Detect in offline mode using the offline mode property .","title":"Offline mode"},{"location":"30-running/#bdio-format","text":"Synopsys Detect produces dependency information for Black Duck in Black Duck Input Output (BDIO) format files. Synopsys Detect can produce BDIO files in two formats: BDIO version 1, or BDIO version 2. Versions of Black Duck prior to 2018.12.4 accept only BDIO 1. Black Duck versions 2018.12.4 and higher accept either BDIO 1 or BDIO 2. By default, Synopsys Detect produces BDIO 1 files. Use the BDIO2 enabled property to select BDIO 2 format.","title":"BDIO format"},{"location":"30-running/#running-with-polaris","text":"This capability is deprecated and will be removed in a future release. Synopsys Detect can be used with Polaris to perform Static Application Security Testing (SAST). When Polaris connection details are provided, Synopsys Detect executes the following by default: The detector tool, which runs the appropriate package manager-specific detector; the Maven detector for Maven projects, the Gradle detector for Gradle projects, and so forth. The Polaris tool, which runs the Polaris CLI on the project directory. Refer to Properties for details.","title":"Running with Polaris"},{"location":"40-configuring/","text":"Configuring # Synopsys Detect is configured by assigning values to properties. On the command line # One method for configuring Synopsys Detect is by setting Synopsys Detect property values on the command line. When setting a property value on the command line, prefix the property name with two hyphens (--). To add one property setting to the command line, add the following at the end: {space}--{property name}={value} There is a space before and between each complete property setting, but there are no spaces around the equals sign (=). For example, to set property detect.project.value : bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.project.name=MyProject Using environment variables # Synopsys Detect properties can also be set using environment variables. On Linux, when setting a property value using an environment variable, the environment variable name is the property name converted to uppercase, with period characters (\".\") converted to underscore characters (\"_\"). For example: export DETECT_PROJECT_NAME=MyProject bash (curl -s -L https://detect.synopsys.com/detect.sh) On Windows, the environment variable name can either be the original property name, or the property name converted to uppercase with period characters (\".\") converted to underscore characters (\"_\"). For example: $Env:DETECT_PROJECT_NAME = MyProject powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect Using a configuration file # Another commonly-used method of configuring Synopsys Detect is to provide a configuration file. The configuration file can be a Java properties (.properties) file, or a YAML (.yml) file. Spring will look for a configuration file named application.properties or application.yml in the current working directory, or a ./config subdirectory. If it exists, it will read property values from it. For example, if you wanted to set property detect.project.name using a configuration (.properties) file, you could do it as follows: echo detect.project.name=myproject application.properties bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.source.path=/opt/projects/project1 Because the configuration file has one of the file names that Spring looks for by default (in this case, application.properties) and exists in one of the locations that Spring looks in by default (in this case, the current directory), there is no need to specify the path to the configuration file on the command line. Properties file # When setting a property value in a .properties file, do not prefix the property name with hyphens, and adhere to Java .properties file syntax: propertyName=propertyValue , one per line. YAML file # When setting a property value in a .yml file, do not prefix the property name with hyphens, and adhere to YAML syntax for dictionaries: propertyName: propertyValue , one per line. Switching between multiple profiles # A profile is, in effect, a set of pre-defined properties. You select the profile (property settings) you want when you run Synopsys Detect. Creating a profile # To define a set of properties for a profile, create a configuration file named application-{profilename}.properties or application-{profilename}.yml in the current working directory, or in a subdirectory named config . Populate it with property assignments as previously described. Selecting a profile on the command line # To select one or more profiles on the Synopsys Detect command line, assign the the comma-separated list of profiles to the Spring Boot property spring.profiles.active : bash (curl -s -L https://detect.synopsys.com/detect.sh) --spring.profiles.active={profilename} This capability is provided by Spring Boot. For more information, refer to Spring Boot's profile mechanism . Additional configration methods and details # Synopsys Detect reads property values using Spring Boot's externalized configuration mechanism , which provides capabilities beyond those described on this page. The most common methods used to pass a property value to Synopsys Detect are listed as follows. A method with lower number in Spring Boot's order of precedence overrides a method with a higher number. Using a command line argument (#4 in Spring Boot's order of precedence): --blackduck.url=https://blackduck.yourdomain.com Using one environment variable per property (#10 in Spring Boot's order of precedence): export BLACKDUCK_URL=https://blackduck.yourdomain.com Using property assignments in a .properties configuration file (#14 in Spring Boot's order of precedence): blackduck.url=https://blackduck.yourdomain.com blackduck.api.token=yourtokenvalue Using property assignments in a .yml configuration file (also #14 in Spring Boot's order of precedence, but .properties takes precedence over .yml): blackduck.url: https://blackduck.yourdomain.com blackduck.api.token: yourtokenvalue Using the SPRING_APPLICATION_JSON environment variable with a set of properties set using JSON format (#5 in Spring Boot's order of precedence): export SPRING_APPLICATION_JSON='{ blackduck.url : https://blackduck.yourdomain.com , blackduck.api.token : yourgeneratedtoken }' Refer to the Spring Boot documentation for more details and more sophisticated ways to set properties. Providing sensitive values such as credentials # You can provide sensitive values such as credentials to Synopsys Detect using a variety of mechanisms provided by Spring Boot , including: On the command line; for example, --blackduck.password={your password}. As an environment variable value; for example, export BLACKDUCK_PASSWORD={your password}. In a configration (.properties) file; for example, ./application.properties. Values provided on the command line may be visible to other users that can view process details. Setting sensitive values using environment variables is usually considered more secure. Connecting to another system; for example, Black Duck or Polaris) using an access token (also called an API token) is usually considered more secure than connecting using a username and password.","title":"Configuring"},{"location":"40-configuring/#configuring","text":"Synopsys Detect is configured by assigning values to properties.","title":"Configuring"},{"location":"40-configuring/#on-the-command-line","text":"One method for configuring Synopsys Detect is by setting Synopsys Detect property values on the command line. When setting a property value on the command line, prefix the property name with two hyphens (--). To add one property setting to the command line, add the following at the end: {space}--{property name}={value} There is a space before and between each complete property setting, but there are no spaces around the equals sign (=). For example, to set property detect.project.value : bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.project.name=MyProject","title":"On the command line"},{"location":"40-configuring/#using-environment-variables","text":"Synopsys Detect properties can also be set using environment variables. On Linux, when setting a property value using an environment variable, the environment variable name is the property name converted to uppercase, with period characters (\".\") converted to underscore characters (\"_\"). For example: export DETECT_PROJECT_NAME=MyProject bash (curl -s -L https://detect.synopsys.com/detect.sh) On Windows, the environment variable name can either be the original property name, or the property name converted to uppercase with period characters (\".\") converted to underscore characters (\"_\"). For example: $Env:DETECT_PROJECT_NAME = MyProject powershell [Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect","title":"Using environment variables"},{"location":"40-configuring/#using-a-configuration-file","text":"Another commonly-used method of configuring Synopsys Detect is to provide a configuration file. The configuration file can be a Java properties (.properties) file, or a YAML (.yml) file. Spring will look for a configuration file named application.properties or application.yml in the current working directory, or a ./config subdirectory. If it exists, it will read property values from it. For example, if you wanted to set property detect.project.name using a configuration (.properties) file, you could do it as follows: echo detect.project.name=myproject application.properties bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.source.path=/opt/projects/project1 Because the configuration file has one of the file names that Spring looks for by default (in this case, application.properties) and exists in one of the locations that Spring looks in by default (in this case, the current directory), there is no need to specify the path to the configuration file on the command line.","title":"Using a configuration file"},{"location":"40-configuring/#properties-file","text":"When setting a property value in a .properties file, do not prefix the property name with hyphens, and adhere to Java .properties file syntax: propertyName=propertyValue , one per line.","title":"Properties file"},{"location":"40-configuring/#yaml-file","text":"When setting a property value in a .yml file, do not prefix the property name with hyphens, and adhere to YAML syntax for dictionaries: propertyName: propertyValue , one per line.","title":"YAML file"},{"location":"40-configuring/#switching-between-multiple-profiles","text":"A profile is, in effect, a set of pre-defined properties. You select the profile (property settings) you want when you run Synopsys Detect.","title":"Switching between multiple profiles"},{"location":"40-configuring/#creating-a-profile","text":"To define a set of properties for a profile, create a configuration file named application-{profilename}.properties or application-{profilename}.yml in the current working directory, or in a subdirectory named config . Populate it with property assignments as previously described.","title":"Creating a profile"},{"location":"40-configuring/#selecting-a-profile-on-the-command-line","text":"To select one or more profiles on the Synopsys Detect command line, assign the the comma-separated list of profiles to the Spring Boot property spring.profiles.active : bash (curl -s -L https://detect.synopsys.com/detect.sh) --spring.profiles.active={profilename} This capability is provided by Spring Boot. For more information, refer to Spring Boot's profile mechanism .","title":"Selecting a profile on the command line"},{"location":"40-configuring/#additional-configration-methods-and-details","text":"Synopsys Detect reads property values using Spring Boot's externalized configuration mechanism , which provides capabilities beyond those described on this page. The most common methods used to pass a property value to Synopsys Detect are listed as follows. A method with lower number in Spring Boot's order of precedence overrides a method with a higher number. Using a command line argument (#4 in Spring Boot's order of precedence): --blackduck.url=https://blackduck.yourdomain.com Using one environment variable per property (#10 in Spring Boot's order of precedence): export BLACKDUCK_URL=https://blackduck.yourdomain.com Using property assignments in a .properties configuration file (#14 in Spring Boot's order of precedence): blackduck.url=https://blackduck.yourdomain.com blackduck.api.token=yourtokenvalue Using property assignments in a .yml configuration file (also #14 in Spring Boot's order of precedence, but .properties takes precedence over .yml): blackduck.url: https://blackduck.yourdomain.com blackduck.api.token: yourtokenvalue Using the SPRING_APPLICATION_JSON environment variable with a set of properties set using JSON format (#5 in Spring Boot's order of precedence): export SPRING_APPLICATION_JSON='{ blackduck.url : https://blackduck.yourdomain.com , blackduck.api.token : yourgeneratedtoken }' Refer to the Spring Boot documentation for more details and more sophisticated ways to set properties.","title":"Additional configration methods and details"},{"location":"40-configuring/#providing-sensitive-values-such-as-credentials","text":"You can provide sensitive values such as credentials to Synopsys Detect using a variety of mechanisms provided by Spring Boot , including: On the command line; for example, --blackduck.password={your password}. As an environment variable value; for example, export BLACKDUCK_PASSWORD={your password}. In a configration (.properties) file; for example, ./application.properties. Values provided on the command line may be visible to other users that can view process details. Setting sensitive values using environment variables is usually considered more secure. Connecting to another system; for example, Black Duck or Polaris) using an access token (also called an API token) is usually considered more secure than connecting using a username and password.","title":"Providing sensitive values such as credentials"},{"location":"70-quickreference/","text":"Quick reference # Quick Links # All Properties Exit Codes Synopsys Detect Modes # Synopsys Detect provides the following modes to assist with learning, troubleshooting, and setup. Mode Command line option Alt. option Description Help --help -h Provides basic help information (including how to get more detailed help). Interactive --interactive -i Guides you through configuring Synopsys Detect. Diagnostic --detect.diagnostic=true N/A Creates a zip file of diagnostic information for support. Air Gap Creation --zip -z Creates an air gap zip that you can use with the detect.*.air.gap.path arguments for running Synopsys Detect offline. Optionally you can follow --zip with a space and an argument (for example: --zip GRADLE) to customize the air gap zip. Possible values: ALL (produce a full air gap zip; the default), NONE, NUGET (include only the NUGET inspector), GRADLE (include only the GRADLE inspector), DOCKER (include only the Docker Inspector).","title":"Quick reference"},{"location":"70-quickreference/#quick-reference","text":"","title":"Quick reference"},{"location":"70-quickreference/#quick-links","text":"All Properties Exit Codes","title":"Quick Links"},{"location":"70-quickreference/#synopsys-detect-modes","text":"Synopsys Detect provides the following modes to assist with learning, troubleshooting, and setup. Mode Command line option Alt. option Description Help --help -h Provides basic help information (including how to get more detailed help). Interactive --interactive -i Guides you through configuring Synopsys Detect. Diagnostic --detect.diagnostic=true N/A Creates a zip file of diagnostic information for support. Air Gap Creation --zip -z Creates an air gap zip that you can use with the detect.*.air.gap.path arguments for running Synopsys Detect offline. Optionally you can follow --zip with a space and an argument (for example: --zip GRADLE) to customize the air gap zip. Possible values: ALL (produce a full air gap zip; the default), NONE, NUGET (include only the NUGET inspector), GRADLE (include only the GRADLE inspector), DOCKER (include only the Docker Inspector).","title":"Synopsys Detect Modes"},{"location":"90-releasenotes/","text":"Release notes # Version 6.6.0 # New features # TBD Changed features # Upon connecting to Black Duck, the users roles and groups, which are only used in DEBUG-level logging, are no longer fetched unless logging level is DEBUG or higher. The error message produced for a binary upload error has been improved. The Docker Inspector now works on Windows 10 Enterprise. The \"detectors\" field in the status.json file now features status data with more-expressive error codes derived from the runtime class of a detectable result. Resolved issues # (IDETECT-2038, IDETECT-2203) Resolved an issue where the Gradle Inspector would produce false positives in Gradle as a result of dependency replacement from the root project. (IDETECT-2180) Resolved and issue where the Pip Inspector would fail against requirements.txt files generated by the pip-compile tool. (IDETECT-2138, IDETECT-2161, IDETECT-2172) Resolved issue where Gradle parse detector would fail due to an inability to resolve classes, referenced in the project's build scripts, that were outside of Detect's classpath. Known issues # When running the Docker Inspector on Windows, Synopsys Detect may fail to clean up all of its working directories (and log the message \"Error trying cleanup\") due to the following Docker issue: https://github.com/docker/for-win/issues/394. False positives from Gradle are still possible if the replacement dependency is defined within a subproject that has subprojects. Work is being continued to fix this with IDETECT-2218. Version 6.5.0 # New features # Added properties for enabling diagnostic mode. Synopsys Detect now supports Vulnerability Impact Analysis. Enabled using Vulnerability Impact Analysis Enabled property. Changed features # Enabling diagnostic mode is now controlled through two new properties. --detect.diagnostic --detect.diagnostic.extended The -d and --diagnostic options are now deprecated. The -de and --diagnosticExtended options are now deprecated. The detect.bazel.dependency.type property now accepts a comma-separated list of dependency types, or the value NONE , or the value ALL . Resolved issues # (IDETECT-2054) Resolved an issue that caused the Gradle Inspector to fail when detect.output.path is set to a relative path. Version 6.4.2 # Resolved Issues # (IDETECT-2164) Resolved an issue with scanning Go applications when using the go list -m command, which couldn't determine available upgrades using the vendor directory. Version 6.4.0 # New features # Bazel detector: added support for Bazel projects that specify dependencies using the haskell_cabal_library repository rule. NuGet detector: added support for DotNet 3.1 runtime. Synopsys Detect now supports projects managed by the Lerna package manager. Synopsys Detect now supports projects managed by the Cargo package manager. Synopsys Detect now supports projects managed by the Poetry package manager. Changed features # Eliminated any need for the Black Duck Global Code Scanner overall role. The CLANG detector collects any dependency files not recognized by the Linux package manager that reside outside the source directory (the directory containing the compile_commands.json file), and writes them to the status.json file. Added the property detect.blackduck.signature.scanner.copyright.search . Removed PipEnv from the list of buildless detectors as it was never buildless. Improved output for signature scanner status, and included descriptions for exit codes when reporting overall status. Status.json file now collects code location data generated by all tools, not just detectors. Status.json file now collects issue data generated by all tools. Resolved issues # (IDETECT-2019) Resolved an issue where the pip inspector would not be able to parse the requirements.txt file if pip's version was = 20.1. (IDETECT-2034) Resolved an issue that would cause a NullPointerException when Synopsys Detect's initial attempt at generating a code location name produced a code location name greater than 250 characters and either code location prefix or code location suffix is not set. (IDETECT-1979) Resolved an issue that could cause the CLANG detector to miss some dependencies because it failed to correctly parse complex nested quoted strings within compile_commands.json values. (IDETECT-1966) Resolved an issue that would cause Detect to ignore replacement directives for Go Mod projects. Known Issues # When a Lerna package depends on another Lerna package within the project, an error may appear indicating a missing dependency on that package. This is normal and no dependencies are missing. This will be fixed in a future release. Version 6.3.0 # New features # The Yarn detector now extracts project information from package.json files. Git is no longer the default supplier of project information for Yarn projects. Added Yarn Detector support for dependencies that are missing a fuzzy version in a lockfile dependency declaration. Synopsys Detect logs policy violations when it is configured to fail on policy violations . Changed features # Users can upload source files when license search is enabled regardless of whether snippet matching has been enabled. Synopsys Detect is now compatible with Yocto 3.0. Synopsys Detect stops if the Docker Inspector tool applies and Synopsys Detect is running on Windows. Synopsys Detect configures Docker Inspector's working directories inside Synopsys Detect's run directory. Synopsys Detect requires and runs Docker Inspector version 9. Moved the location to which detect.sh downloads the Synopsys Detect .jar from /tmp to ~/synopsys-detect/download. Resolved issues # (IDETECT-1906) Resolved an issue wherein git extraction might fail if \"git log\" returned unexpected output. As a last resort, the commit hash will be used as a version. (IDETECT-1883) Resolved an issue where Synopsys Detect failed to extract project information when parsing a Git repository with a detached head while in buildless mode. (IDETECT-1970) Resolved an issue where the default value for parallel processors was not used. The available runtime processor count was being used instead. (IDETECT-1973) Resolved an issue where the NuGet exe inspector would not resolve from Artifactory. (IDETECT-1965) Resolved an issue where Synopsys Detect would fail to resolve environment variables where it did so previously. (IDETECT-1974) Resolved an issue wherein the Yarn detector was throwing an exception for dependencies not defined in the yarn.lock file. (IDETECT-2037) Resolved an issue where Synopsys Detect would fail with a \"hostname in certificate didn't match\" error while downloading the Gradle inspector. Version 6.2.1 # Resolved issues # Resolved an issue wherein an exception was thrown when generating a risk report if users didn't set the risk report output path explicitly. (IDETECT-1960) Version 6.2.0 # New features # The Synopsys Detect .jar file is now signed, enabling code verification by users. Simple proxy information will be forwarded to the Gradle Inspector. Detect now creates a status file describing the results of the run which includes things like issues, results and status codes. The property configuration table in the log now includes the origin of the property's value. Added the property detect.blackduck.signature.scanner.license.search . Added the property detect.blackduck.signature.scanner.individual.file.matching . If an executable returns a nonzero exit code, Detect will now log the executable output automatically. Added page for deprecated properties in help. Detect-generated risk reports now feature Synopsys logo and branding. Changed features # The PipEnv Detector now parses a json representation of the dependency tree. Powershell download speed increased. Resolved issues # Resolved an issue where the download URL for Synopsys Detect was being set to an internal URL upon release (IDETECT-1847). Resolved an issue where all transitive dependencies found by the Pip inspector were being reported as direct dependencies (IDETECT-1893). Resolved an issue where using pip version 20+ with the Pip inspector caused a failure to import a dependency. GitHub PR (IDETECT-1868) Resolved the following vulnerabilities (IDETECT-1872): org.springframework.boot:spring-boot-starter 5.1.7.RELEASE BDSA-2020-0069 (CVE-2020-5398) Resolved an issue where Synopsys Detect had the potential to fail on projects that utilized Yarn workspaces (IDETECT-1916). Note: Yarn workspaces are not currently supported. See yarn workspace support . Resolved an issue in the Bazel Detector that caused it to fail for the maven_install rule when the tags field contained multiple tags with a mixture of formats (IDETECT-1925). When parsing package.xml files, Detect will no longer raise a SAXParseException when the file contains a doctype declaration, and will continue parsing the rest of the file (IDETECT-1866). Resolved an issue that could cause generation of an invalid Black Duck Input/Output (BDIO) file when the only differences between two component names/versions are non-alphanumeric characters (IDETECT-1856). Version 6.1.0 # New features # Added the property detect.bdio2.enabled . Added the property detect.pip.only.project.tree . Added the property detect.bitbake.search.depth . Added the property detect.bazel.cquery.options . Added the property detect.docker.image.id . Added the property detect.docker.platform.top.layer.id . Added the property detect.bom.aggregate.remediation.mode Changed features # Deprecated all Polaris-related properties. Added wildcard support for several include/exclude list properties. Improved the structure of the dependency information produced by the Yarn detector by changing its approach. It now parses dependency information from yarn.lock and package.json, instead of running the yarn command. Since the yarn command is no longer executed, the detect.yarn.path property has been removed. Improved match accuracy for Bitbake projects by improving external ID generation for dependencies referenced using Git protocols, and dependencies referenced with an epoch and/or revision. Improved the reliability of the Bitbake detector by generating recipe-depends.dot and package-depends.dot files the source directory, instead of a temporary directory. Changed the logging level of Polaris CLI output from DEBUG to INFO. Added support for the Noto-CJK font (for Chinese, Japanese, and Korean text) in the risk report. Resolved issues # Resolved an issue that can cause a Null Pointer Exception on Maven projects configured for multi-threaded builds. Resolved an issue that can cause Detect to fail due to an expired Black Duck bearer token. Resolved an issue that causes Detect to fail when a parent project and version are specified, and the project is already a child of the specified parent. Resolved an issue that causes Detect to log the git username and password when a git command executed by Detect fails. Resolved an issue that can cause Detect to generate a new code location (scan) when the character case of the value of the detect.source.path property differs from a previous run on the same project. Resolved the following vulnerabilities: commons-beanutils:commons-beanutils 1.9.3 / BDSA-2014-0129 (CVE-2019-10086), org.apache.commons:commons-compress 1.18 / BDSA-2019-2725 (CVE-2019-12402) Version 6.0.0 # New features # Added the property detect.binary.scan.file.name.patterns. Added the property detect.detector.search.exclusion.files which accepts a comma-separated list of file names to exclude from the Detector search. Custom arguments for the source command can now be supplied to Detect through the property detect.bitbake.source.arguments which accepts a comma-separated list of arguments. (1614) Added support for the Swift package manager. Added support for GoGradle. Added support for Go Modules. The property detect.pip.requirements.path is now a comma-separated list of paths to requirements.txt files. This enables you to specify multiple requirements files. Each requirements file displays as a new code location in Black Duck. Detect now logs username, roles, and groups for the current user. Detect now includes the project name/version in every code location name. Detect now takes in a go path, but does not take in go.dep.path; nor does Detect trigger on *.go. The property detect.parallel.processors is added. This property controls the number of parallel threads, and replaces the properties detect.blackduck.signature.scanner.parallel.processors and detect.hub.signature.scanner.parallel.processors. Added the property detect.maven.included.scopes. This is a comma-separated list of Maven scopes. Output is limited to dependencies within these scopes, and is overridden by exclude. Added the property detect.maven.excluded.scopes. This is a comma-separated list of Maven scopes. Output is limited to dependencies outside these scopes, and is overridden by include. Bazel detector: added support for dependencies specified using the maven_install workspace rule. The detect.bazel.advanced.rules.path property is removed. When using Detect for static analysis, you can pass the build command to let the Polaris CLI know how to analyze a given project. Changed features # Architecture is no longer included in BitBake dependencies discovered by Detect. The property detect.bitbake.reference.impl is no longer used and is deprecated. The BitBake detector no longer uses the property detect.bitbake.reference.impl because architecture is no longer required to match with artifacts in the KnowledgeBase. The Bitbake detector now attempts to determine the layer in which a component originated instead of the architecture. Improved the Detect on-screen logging to be more concise. The PiP inspector is no longer deprecated, and is currently supported. When creating an air gap zip of Detect using the switch -z or --zip, the created zip file is now published to your output directory. Scripts no longer fail if the Artifactory server is unavailable. Enhanced placement and formatting of deprecation logs. Added support for Java version 11. The following properties are removed in Detect version 6.0.0: detect.go.dep.path detect.npm.node.path detect.perl.path detect.go.run.dep.init detect.maven.scope detect.bazel.advanced.rules.path Resolved issues # Resolved an issue wherein the Windows Java path construction did not account for direction of the slash. The shell script now uses the correct slash direction, based on the operating system on which Detect is running. Resolved an issue wherein Detect was not finding the file recipe-depends.dot written to the current directory. Detect now looks in the source directory to a depth of 1 if it cannot find the expected files in the expected location. Resolved an issue wherein Detect was failing if it could not resolve placeholders. Resolved an issue wherein Detect was not handling SSH URLs, which caused Detect to fail in extracting project information from the Git executable. GitCliDetectable now properly handles SSH URLs. Resolved an issue wherein the Detect JAR was downloading for each scan when the script could not communicate with Artifactory. Now, if the script cannot communicate with Artifactory, and there is an existing downloaded Detect, then the previously-downloaded version of Detect runs. However, if you provided a DETECT_LATEST_RELEASE_VERSION and Detect cannot communicate with Artifactory, Detect will not run. Resolved an issue wherein Detect was not properly parsing GIT URLs such as git://git.yoctoproject.org/poky.git. Version 5.6.2 # Resolved issues # Synopsys Detect version 5.6.2 is a rebuild of version 5.6.0 and 5.6.1 to address an issue with the binary repository to which it was published. Version 5.6.0 # New features # You can now set custom fields on created Black Duck projects. Detect can now generate its own air gap zip. Detectors now nest by default. Added support for Gradle Kotlin. Added support for wildcard (*) in the Detect flag blackduck.proxy.ignored.hosts. Added support for --detect.project.tags. Added the properties --detect.parent.project.name and --detect.parent.project.version.name. Added the property --detect.clone.project.version.latest=true which takes precedence over the exact version name. Added support for Yocto 2.0.0. Added support to parse components from the plugins block in pom.xml. This only works when detect.detector.buildless=true. Added capability to represent '' and \"\" as a null value in Detect multiselect custom fields. Changed features # You can now specify the search depth for buildless mode. Updated the help menu and provided more detailed help options. Diagnostics now includes signature scanner log files. Re-enabled empty aggregate file generation. Polaris no longer runs the the -w switch enabled by default. To retrieve the issue/policy count, you can use the -w switch. Match accuracy for Docker images is improved by running the signature scanner on a squashed version of the Docker image instead of the container file system. This results in a different name for the code location because the name of the file being scanned is different. For existing projects, the old code location named by default as repo _ tag _containerfilesystem.tar.gz/ repo / tag scan must be removed to ensure it does not contribute stale data to the BOM. Due to the new method of scanning, the code location name has changed. You must remove the old code location in favor of the new code location. Resolved issues # Resolved an issue that could cause code location names to contain relative file paths when the value of detect.source.path uses symbolic links to specify the source directory. Resolved an issue that caused detect.sh to fail when Java is not on the system path, and the JAVA_HOME path contains a space. Resolved an issue wherein the signature scanner may not have been reporting failures correctly. Resolved an issue wherein Detect was not locating the file recipe-depends.dot when it was written to the current directory. Detect now searches for the recipe-depends.dot file to a depth of 1 when extracting on a BitBake project. Detect no longer fails if the Git executable is not found. Resolved an issue wherein Detect may fail when the directory pointed to by --detect.notices.report.path does not exist. Version 5.5.1 # Resolved issues # Resolved an issue wherein the Pipenv detector was omitting project dependencies. Version 5.5.0 # New features # Added support for snippet modes. The property detect.wait.for.results is been added to wait for Black Duck. The default value is false. If this property is set to true, Detect won't complete until the normal timeout is reached or the underlying systems with which Detect is communicating are once again idle and ready to receive more data. The timeout value is controlled by blackduck.timeout. The shell script and PowerShell script now accept DETECT_JAVA_PATH and DETECT_JAVA_HOME as environment variables for pointing to your Java installation. Added a new property --detect.detector.search.exclusion.paths. A comma-separated list of directory paths to exclude from a detector search. For example, foo/bar/biz only excludes the biz directory if the parent directory structure is 'foo/bar/'. Detect now uses Git information to determine the default project and version names. There is a new Detect property for overriding the Git executable: detect.git.path. Resolved issues # Resolved an issue that caused the risk report to be generated with invalid links to Black Duck components. Resolved an issue that caused a null pointer exception error when a golang's Gopkg.lock file contained zero projects. Resolved an issue wherein the Clang detector could omit the epoch from the version string in RPM packages. Resolved an issue wherein with two users running Detect on a single system may result in a Permission denied error. Resolved an issue wherein the property -detect.policy.check.fail.on.severities may not be waiting for the snippet scans to complete. Resolved an issue wherein the property --detect.blackduck.signature.scanner.exclusion.name.patterns may not be following the paths. Resolved an issue wherein Detect may fail when the directory specified by --detect.risk.report.pdf.path did not exist. Detect now attempts to create the directory structure to the specified path. A warning is logged if Detect fails to create the directory. Resolved an issue wherein properties that had a primary group and additional property group may have been excluded from the group search. Resolved an issue wherein the deprecation warning displayed when the deprecated property was provided by the user. Resolved an issue with aggregate BOM filename generation that could cause the message Unable to relativize path, full source path will be used to display in the log. Resolved an issue that could cause components to be omitted from the BOM for Conda projects. Resolved an issue that could cause errors during parsing of Maven projects with long sub-project names. Changed features # The default value for the property detect.docker.path.required is now false. The ALL logging level is replaced with the TRACE logging level. The results URL for the Black Duck project BOM is now moved to the Detect Results panel. Renamed Detect Results to Detect Status. Previously, a temp file remained which could contain plain-text user name or password information. This temp file is now removed. Bazel is added as an acceptable value to the detect.tools properties. Detect now uses the current version of Docker Inspector. This means that no matter what version of Docker Inspector is currently released, Detect now uses that version. Version 5.4.0 # New features # Added buildless mode. Added a new property for BitBake to remove Yocto reference implementation characters. Added a new property for adding group names to projects. Added a new property for uploading source files. Added the additional_components placeholder. Resolved issues # Resolved an issue wherein Yarn may have been incorrectly calculating the tree level. Resolved an issue wherein Detect may fail when Polaris is excluded, a Polaris URL is provided, and connection to Polaris failed. Resolved an issue that caused Detect to follow symbolic links while searching directories for files. Resolved an issue wherein Detect was not failing policy for UNSPECIFIED when fail on severities is set to ALL. Resolved an issue that could cause a counter (an integer intended to ensure uniqueness), to be unnecessarily appended to a code location name. Resolved an issue that may have caused the package manager name to be excluded from the code location name when a code location name was provided. Resolved an issue that could cause Detect to continue after a Polaris connection failure. Resolved an issue wherein the Detect scan results may incorrectly show development dependencies. Resolved an issue that could cause reports to fail due to timeout intermittently. Resolved an issue that could cause the value of --polaris.access.token to be logged to the console when detect.sh is invoked. Resolved an issue wherein Detect was cleaning up the contents but not the directory of the run. Changed features # For getting all logs, the ALL logging level is now TRACE. Improved the error message logged when the property detect.binary.scan.file.path, which must point to a readable file, points to something other than a readable file, such as a directory. Changed the environment variable used to tell the Detect scripts where to download the Detect jar. The previous value DETECT_JAR_PATH is now changed to DETECT_JAR_DOWNLOAD_DIR. Improved the parsing of packrat.lock files to better represent the relationships between dependencies in the graph. The version of Detect is no longer part of the code location name. Version 5.3.3 # Resolved an issue wherein reports for projects containing risks may be generated with a status of zero risks shown. Version 5.3.2 # Synopsys Detect version 5.3.2 is a minor maintenance release. Version 5.3.1 # New features # Added new property detect.ignore.connection.failures which enables Synopsys Detect to continue even if it fails to talk to Black Duck. Resolved issues # Resolved an issue wherein build scan failures may occur in TFS with the error [COPY Operation] noSuchPath in source, path provided: //license/ownership. Resolved an issue wherein if the property detect.clone.project.version.name is set to a non-existent project version, the log messages are now improved to make it easier to recognize the problem. Changed features # In cases where the property detect.clone.project.version.name is set to a non-existent project version, the log messages are now improved to make it easier to recognize the issue. Version 5.2.0 # New features # Added support for Bazel. Added support for CMake. Added a property to support using project version nicknames. Added a property for application ID. Added Java wildcard pattern support. Added support for Coverity on Polaris. Resolved issues # Resolved an issue wherein the package-lock.json file may be missing additional versions. Resolved an issue wherein multiple simultaneous Detect executions may cause BDIO merges. Resolved an issue wherein permission errors may display when creating projects or scanning. Changed features # The --detect.bom.aggregate.name property now checks for an empty BOM. If the BOM is empty, it is not uploaded to Black Duck. Added support for PiP versions 6.0.0 and higher. Improved error messages for Black Duck connection issues. Cosmetic changes: from Black Duck Detect to Synopsys Detect. Streamlined execution of Coverity and Black Duck scans through a single continuous integration job. Updated location of the shell/PowerShell scripts. Updated location of the air-gapped archive. Version 5.1.0 # New features # Added support for GoVendor. Added executable output to diagnostic mode. Added the project/version GUID in the console output. Added error codes. Resolved issues # Resolved an issue that fixes the Clang Detector (for C/C++) handling of complex quoted strings occurring in compiler commands found in the JSON compilation database (compile_commands.json) file. Resolved an issue wherein a Null Pointer Exception error may occur when Detect cannot access a file during signature scan exclusion calculating. Resolved an issue wherein the RubyGems package manager had missing components. Resolved an issue wherein the NPM package lock added every dependency as a root dependency. Changed features # The properties --detect.nuget.path and --detect.nuget.inspector.name are deprecated. The properties detect.suppress.results.output and detect.suppress.configuration.output are deprecated. The output from these properties is logged instead of written to sysout. Improved the reporting of scan registration limit errors. Version 5.0.1 # Resolved issues # Resolved an issue wherein a null pointer exception error may occur in the NuGet portion of a scan when running Synopsys Detect in Linux. Resolved an issue that fixes the Clang Detector (for C/C++) handling of complex quoted strings occurring in compiler commands found in the JSON compilation database (compile_commands.json) file. Resolved an issue wherein using detect.tools=ALL did not run any tools. Resolved an issue wherein Coverity on Polaris may return a failure status for a successful upload. Changed features # NuGet air gap mode now points to other folders. Removed support for PiP resolving the project version. Version 5.0.0 # New features # Added a new property to execute Black Duck Docker Inspector. CocoaPods are now nestable under Bill of Materials (BOM) tools. Added functionality to exclude all BOM tools. Added a new property which enables you to search at a determined depth. Added functionality to log all found executables. Added functionality to run in Docker mode. Added support for NuGet in MacOS. Added ability to include and exclude all tools. Added a new properties for SWIP in Detect scans. Resolved issues # Resolved an issue that caused the Gradle inspector to retrieve the maven-metadata.xml file from the default repository, even when the property detect.gradle.inspector.repository.url was set to point to a different repository. Resolved an issue wherein Gradle may upload older BDIO files into the current project. Changed features # Improved C/C++ multi-threading functionality. Deprecated Pipenv inspector messages are now logged. The term BOM_TOOL is now replaced with DETECTOR. You can no longer supply ranges for the Inspector versions. Enhanced the code location naming conventions.","title":"Release notes"},{"location":"90-releasenotes/#release-notes","text":"","title":"Release notes"},{"location":"90-releasenotes/#version-660","text":"","title":"Version 6.6.0"},{"location":"90-releasenotes/#new-features","text":"TBD","title":"New features"},{"location":"90-releasenotes/#changed-features","text":"Upon connecting to Black Duck, the users roles and groups, which are only used in DEBUG-level logging, are no longer fetched unless logging level is DEBUG or higher. The error message produced for a binary upload error has been improved. The Docker Inspector now works on Windows 10 Enterprise. The \"detectors\" field in the status.json file now features status data with more-expressive error codes derived from the runtime class of a detectable result.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues","text":"(IDETECT-2038, IDETECT-2203) Resolved an issue where the Gradle Inspector would produce false positives in Gradle as a result of dependency replacement from the root project. (IDETECT-2180) Resolved and issue where the Pip Inspector would fail against requirements.txt files generated by the pip-compile tool. (IDETECT-2138, IDETECT-2161, IDETECT-2172) Resolved issue where Gradle parse detector would fail due to an inability to resolve classes, referenced in the project's build scripts, that were outside of Detect's classpath.","title":"Resolved issues"},{"location":"90-releasenotes/#known-issues","text":"When running the Docker Inspector on Windows, Synopsys Detect may fail to clean up all of its working directories (and log the message \"Error trying cleanup\") due to the following Docker issue: https://github.com/docker/for-win/issues/394. False positives from Gradle are still possible if the replacement dependency is defined within a subproject that has subprojects. Work is being continued to fix this with IDETECT-2218.","title":"Known issues"},{"location":"90-releasenotes/#version-650","text":"","title":"Version 6.5.0"},{"location":"90-releasenotes/#new-features_1","text":"Added properties for enabling diagnostic mode. Synopsys Detect now supports Vulnerability Impact Analysis. Enabled using Vulnerability Impact Analysis Enabled property.","title":"New features"},{"location":"90-releasenotes/#changed-features_1","text":"Enabling diagnostic mode is now controlled through two new properties. --detect.diagnostic --detect.diagnostic.extended The -d and --diagnostic options are now deprecated. The -de and --diagnosticExtended options are now deprecated. The detect.bazel.dependency.type property now accepts a comma-separated list of dependency types, or the value NONE , or the value ALL .","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_1","text":"(IDETECT-2054) Resolved an issue that caused the Gradle Inspector to fail when detect.output.path is set to a relative path.","title":"Resolved issues"},{"location":"90-releasenotes/#version-642","text":"","title":"Version 6.4.2"},{"location":"90-releasenotes/#resolved-issues_2","text":"(IDETECT-2164) Resolved an issue with scanning Go applications when using the go list -m command, which couldn't determine available upgrades using the vendor directory.","title":"Resolved Issues"},{"location":"90-releasenotes/#version-640","text":"","title":"Version 6.4.0"},{"location":"90-releasenotes/#new-features_2","text":"Bazel detector: added support for Bazel projects that specify dependencies using the haskell_cabal_library repository rule. NuGet detector: added support for DotNet 3.1 runtime. Synopsys Detect now supports projects managed by the Lerna package manager. Synopsys Detect now supports projects managed by the Cargo package manager. Synopsys Detect now supports projects managed by the Poetry package manager.","title":"New features"},{"location":"90-releasenotes/#changed-features_2","text":"Eliminated any need for the Black Duck Global Code Scanner overall role. The CLANG detector collects any dependency files not recognized by the Linux package manager that reside outside the source directory (the directory containing the compile_commands.json file), and writes them to the status.json file. Added the property detect.blackduck.signature.scanner.copyright.search . Removed PipEnv from the list of buildless detectors as it was never buildless. Improved output for signature scanner status, and included descriptions for exit codes when reporting overall status. Status.json file now collects code location data generated by all tools, not just detectors. Status.json file now collects issue data generated by all tools.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_3","text":"(IDETECT-2019) Resolved an issue where the pip inspector would not be able to parse the requirements.txt file if pip's version was = 20.1. (IDETECT-2034) Resolved an issue that would cause a NullPointerException when Synopsys Detect's initial attempt at generating a code location name produced a code location name greater than 250 characters and either code location prefix or code location suffix is not set. (IDETECT-1979) Resolved an issue that could cause the CLANG detector to miss some dependencies because it failed to correctly parse complex nested quoted strings within compile_commands.json values. (IDETECT-1966) Resolved an issue that would cause Detect to ignore replacement directives for Go Mod projects.","title":"Resolved issues"},{"location":"90-releasenotes/#known-issues_1","text":"When a Lerna package depends on another Lerna package within the project, an error may appear indicating a missing dependency on that package. This is normal and no dependencies are missing. This will be fixed in a future release.","title":"Known Issues"},{"location":"90-releasenotes/#version-630","text":"","title":"Version 6.3.0"},{"location":"90-releasenotes/#new-features_3","text":"The Yarn detector now extracts project information from package.json files. Git is no longer the default supplier of project information for Yarn projects. Added Yarn Detector support for dependencies that are missing a fuzzy version in a lockfile dependency declaration. Synopsys Detect logs policy violations when it is configured to fail on policy violations .","title":"New features"},{"location":"90-releasenotes/#changed-features_3","text":"Users can upload source files when license search is enabled regardless of whether snippet matching has been enabled. Synopsys Detect is now compatible with Yocto 3.0. Synopsys Detect stops if the Docker Inspector tool applies and Synopsys Detect is running on Windows. Synopsys Detect configures Docker Inspector's working directories inside Synopsys Detect's run directory. Synopsys Detect requires and runs Docker Inspector version 9. Moved the location to which detect.sh downloads the Synopsys Detect .jar from /tmp to ~/synopsys-detect/download.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_4","text":"(IDETECT-1906) Resolved an issue wherein git extraction might fail if \"git log\" returned unexpected output. As a last resort, the commit hash will be used as a version. (IDETECT-1883) Resolved an issue where Synopsys Detect failed to extract project information when parsing a Git repository with a detached head while in buildless mode. (IDETECT-1970) Resolved an issue where the default value for parallel processors was not used. The available runtime processor count was being used instead. (IDETECT-1973) Resolved an issue where the NuGet exe inspector would not resolve from Artifactory. (IDETECT-1965) Resolved an issue where Synopsys Detect would fail to resolve environment variables where it did so previously. (IDETECT-1974) Resolved an issue wherein the Yarn detector was throwing an exception for dependencies not defined in the yarn.lock file. (IDETECT-2037) Resolved an issue where Synopsys Detect would fail with a \"hostname in certificate didn't match\" error while downloading the Gradle inspector.","title":"Resolved issues"},{"location":"90-releasenotes/#version-621","text":"","title":"Version 6.2.1"},{"location":"90-releasenotes/#resolved-issues_5","text":"Resolved an issue wherein an exception was thrown when generating a risk report if users didn't set the risk report output path explicitly. (IDETECT-1960)","title":"Resolved issues"},{"location":"90-releasenotes/#version-620","text":"","title":"Version 6.2.0"},{"location":"90-releasenotes/#new-features_4","text":"The Synopsys Detect .jar file is now signed, enabling code verification by users. Simple proxy information will be forwarded to the Gradle Inspector. Detect now creates a status file describing the results of the run which includes things like issues, results and status codes. The property configuration table in the log now includes the origin of the property's value. Added the property detect.blackduck.signature.scanner.license.search . Added the property detect.blackduck.signature.scanner.individual.file.matching . If an executable returns a nonzero exit code, Detect will now log the executable output automatically. Added page for deprecated properties in help. Detect-generated risk reports now feature Synopsys logo and branding.","title":"New features"},{"location":"90-releasenotes/#changed-features_4","text":"The PipEnv Detector now parses a json representation of the dependency tree. Powershell download speed increased.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_6","text":"Resolved an issue where the download URL for Synopsys Detect was being set to an internal URL upon release (IDETECT-1847). Resolved an issue where all transitive dependencies found by the Pip inspector were being reported as direct dependencies (IDETECT-1893). Resolved an issue where using pip version 20+ with the Pip inspector caused a failure to import a dependency. GitHub PR (IDETECT-1868) Resolved the following vulnerabilities (IDETECT-1872): org.springframework.boot:spring-boot-starter 5.1.7.RELEASE BDSA-2020-0069 (CVE-2020-5398) Resolved an issue where Synopsys Detect had the potential to fail on projects that utilized Yarn workspaces (IDETECT-1916). Note: Yarn workspaces are not currently supported. See yarn workspace support . Resolved an issue in the Bazel Detector that caused it to fail for the maven_install rule when the tags field contained multiple tags with a mixture of formats (IDETECT-1925). When parsing package.xml files, Detect will no longer raise a SAXParseException when the file contains a doctype declaration, and will continue parsing the rest of the file (IDETECT-1866). Resolved an issue that could cause generation of an invalid Black Duck Input/Output (BDIO) file when the only differences between two component names/versions are non-alphanumeric characters (IDETECT-1856).","title":"Resolved issues"},{"location":"90-releasenotes/#version-610","text":"","title":"Version 6.1.0"},{"location":"90-releasenotes/#new-features_5","text":"Added the property detect.bdio2.enabled . Added the property detect.pip.only.project.tree . Added the property detect.bitbake.search.depth . Added the property detect.bazel.cquery.options . Added the property detect.docker.image.id . Added the property detect.docker.platform.top.layer.id . Added the property detect.bom.aggregate.remediation.mode","title":"New features"},{"location":"90-releasenotes/#changed-features_5","text":"Deprecated all Polaris-related properties. Added wildcard support for several include/exclude list properties. Improved the structure of the dependency information produced by the Yarn detector by changing its approach. It now parses dependency information from yarn.lock and package.json, instead of running the yarn command. Since the yarn command is no longer executed, the detect.yarn.path property has been removed. Improved match accuracy for Bitbake projects by improving external ID generation for dependencies referenced using Git protocols, and dependencies referenced with an epoch and/or revision. Improved the reliability of the Bitbake detector by generating recipe-depends.dot and package-depends.dot files the source directory, instead of a temporary directory. Changed the logging level of Polaris CLI output from DEBUG to INFO. Added support for the Noto-CJK font (for Chinese, Japanese, and Korean text) in the risk report.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_7","text":"Resolved an issue that can cause a Null Pointer Exception on Maven projects configured for multi-threaded builds. Resolved an issue that can cause Detect to fail due to an expired Black Duck bearer token. Resolved an issue that causes Detect to fail when a parent project and version are specified, and the project is already a child of the specified parent. Resolved an issue that causes Detect to log the git username and password when a git command executed by Detect fails. Resolved an issue that can cause Detect to generate a new code location (scan) when the character case of the value of the detect.source.path property differs from a previous run on the same project. Resolved the following vulnerabilities: commons-beanutils:commons-beanutils 1.9.3 / BDSA-2014-0129 (CVE-2019-10086), org.apache.commons:commons-compress 1.18 / BDSA-2019-2725 (CVE-2019-12402)","title":"Resolved issues"},{"location":"90-releasenotes/#version-600","text":"","title":"Version 6.0.0"},{"location":"90-releasenotes/#new-features_6","text":"Added the property detect.binary.scan.file.name.patterns. Added the property detect.detector.search.exclusion.files which accepts a comma-separated list of file names to exclude from the Detector search. Custom arguments for the source command can now be supplied to Detect through the property detect.bitbake.source.arguments which accepts a comma-separated list of arguments. (1614) Added support for the Swift package manager. Added support for GoGradle. Added support for Go Modules. The property detect.pip.requirements.path is now a comma-separated list of paths to requirements.txt files. This enables you to specify multiple requirements files. Each requirements file displays as a new code location in Black Duck. Detect now logs username, roles, and groups for the current user. Detect now includes the project name/version in every code location name. Detect now takes in a go path, but does not take in go.dep.path; nor does Detect trigger on *.go. The property detect.parallel.processors is added. This property controls the number of parallel threads, and replaces the properties detect.blackduck.signature.scanner.parallel.processors and detect.hub.signature.scanner.parallel.processors. Added the property detect.maven.included.scopes. This is a comma-separated list of Maven scopes. Output is limited to dependencies within these scopes, and is overridden by exclude. Added the property detect.maven.excluded.scopes. This is a comma-separated list of Maven scopes. Output is limited to dependencies outside these scopes, and is overridden by include. Bazel detector: added support for dependencies specified using the maven_install workspace rule. The detect.bazel.advanced.rules.path property is removed. When using Detect for static analysis, you can pass the build command to let the Polaris CLI know how to analyze a given project.","title":"New features"},{"location":"90-releasenotes/#changed-features_6","text":"Architecture is no longer included in BitBake dependencies discovered by Detect. The property detect.bitbake.reference.impl is no longer used and is deprecated. The BitBake detector no longer uses the property detect.bitbake.reference.impl because architecture is no longer required to match with artifacts in the KnowledgeBase. The Bitbake detector now attempts to determine the layer in which a component originated instead of the architecture. Improved the Detect on-screen logging to be more concise. The PiP inspector is no longer deprecated, and is currently supported. When creating an air gap zip of Detect using the switch -z or --zip, the created zip file is now published to your output directory. Scripts no longer fail if the Artifactory server is unavailable. Enhanced placement and formatting of deprecation logs. Added support for Java version 11. The following properties are removed in Detect version 6.0.0: detect.go.dep.path detect.npm.node.path detect.perl.path detect.go.run.dep.init detect.maven.scope detect.bazel.advanced.rules.path","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_8","text":"Resolved an issue wherein the Windows Java path construction did not account for direction of the slash. The shell script now uses the correct slash direction, based on the operating system on which Detect is running. Resolved an issue wherein Detect was not finding the file recipe-depends.dot written to the current directory. Detect now looks in the source directory to a depth of 1 if it cannot find the expected files in the expected location. Resolved an issue wherein Detect was failing if it could not resolve placeholders. Resolved an issue wherein Detect was not handling SSH URLs, which caused Detect to fail in extracting project information from the Git executable. GitCliDetectable now properly handles SSH URLs. Resolved an issue wherein the Detect JAR was downloading for each scan when the script could not communicate with Artifactory. Now, if the script cannot communicate with Artifactory, and there is an existing downloaded Detect, then the previously-downloaded version of Detect runs. However, if you provided a DETECT_LATEST_RELEASE_VERSION and Detect cannot communicate with Artifactory, Detect will not run. Resolved an issue wherein Detect was not properly parsing GIT URLs such as git://git.yoctoproject.org/poky.git.","title":"Resolved issues"},{"location":"90-releasenotes/#version-562","text":"","title":"Version 5.6.2"},{"location":"90-releasenotes/#resolved-issues_9","text":"Synopsys Detect version 5.6.2 is a rebuild of version 5.6.0 and 5.6.1 to address an issue with the binary repository to which it was published.","title":"Resolved issues"},{"location":"90-releasenotes/#version-560","text":"","title":"Version 5.6.0"},{"location":"90-releasenotes/#new-features_7","text":"You can now set custom fields on created Black Duck projects. Detect can now generate its own air gap zip. Detectors now nest by default. Added support for Gradle Kotlin. Added support for wildcard (*) in the Detect flag blackduck.proxy.ignored.hosts. Added support for --detect.project.tags. Added the properties --detect.parent.project.name and --detect.parent.project.version.name. Added the property --detect.clone.project.version.latest=true which takes precedence over the exact version name. Added support for Yocto 2.0.0. Added support to parse components from the plugins block in pom.xml. This only works when detect.detector.buildless=true. Added capability to represent '' and \"\" as a null value in Detect multiselect custom fields.","title":"New features"},{"location":"90-releasenotes/#changed-features_7","text":"You can now specify the search depth for buildless mode. Updated the help menu and provided more detailed help options. Diagnostics now includes signature scanner log files. Re-enabled empty aggregate file generation. Polaris no longer runs the the -w switch enabled by default. To retrieve the issue/policy count, you can use the -w switch. Match accuracy for Docker images is improved by running the signature scanner on a squashed version of the Docker image instead of the container file system. This results in a different name for the code location because the name of the file being scanned is different. For existing projects, the old code location named by default as repo _ tag _containerfilesystem.tar.gz/ repo / tag scan must be removed to ensure it does not contribute stale data to the BOM. Due to the new method of scanning, the code location name has changed. You must remove the old code location in favor of the new code location.","title":"Changed features"},{"location":"90-releasenotes/#resolved-issues_10","text":"Resolved an issue that could cause code location names to contain relative file paths when the value of detect.source.path uses symbolic links to specify the source directory. Resolved an issue that caused detect.sh to fail when Java is not on the system path, and the JAVA_HOME path contains a space. Resolved an issue wherein the signature scanner may not have been reporting failures correctly. Resolved an issue wherein Detect was not locating the file recipe-depends.dot when it was written to the current directory. Detect now searches for the recipe-depends.dot file to a depth of 1 when extracting on a BitBake project. Detect no longer fails if the Git executable is not found. Resolved an issue wherein Detect may fail when the directory pointed to by --detect.notices.report.path does not exist.","title":"Resolved issues"},{"location":"90-releasenotes/#version-551","text":"","title":"Version 5.5.1"},{"location":"90-releasenotes/#resolved-issues_11","text":"Resolved an issue wherein the Pipenv detector was omitting project dependencies.","title":"Resolved issues"},{"location":"90-releasenotes/#version-550","text":"","title":"Version 5.5.0"},{"location":"90-releasenotes/#new-features_8","text":"Added support for snippet modes. The property detect.wait.for.results is been added to wait for Black Duck. The default value is false. If this property is set to true, Detect won't complete until the normal timeout is reached or the underlying systems with which Detect is communicating are once again idle and ready to receive more data. The timeout value is controlled by blackduck.timeout. The shell script and PowerShell script now accept DETECT_JAVA_PATH and DETECT_JAVA_HOME as environment variables for pointing to your Java installation. Added a new property --detect.detector.search.exclusion.paths. A comma-separated list of directory paths to exclude from a detector search. For example, foo/bar/biz only excludes the biz directory if the parent directory structure is 'foo/bar/'. Detect now uses Git information to determine the default project and version names. There is a new Detect property for overriding the Git executable: detect.git.path.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_12","text":"Resolved an issue that caused the risk report to be generated with invalid links to Black Duck components. Resolved an issue that caused a null pointer exception error when a golang's Gopkg.lock file contained zero projects. Resolved an issue wherein the Clang detector could omit the epoch from the version string in RPM packages. Resolved an issue wherein with two users running Detect on a single system may result in a Permission denied error. Resolved an issue wherein the property -detect.policy.check.fail.on.severities may not be waiting for the snippet scans to complete. Resolved an issue wherein the property --detect.blackduck.signature.scanner.exclusion.name.patterns may not be following the paths. Resolved an issue wherein Detect may fail when the directory specified by --detect.risk.report.pdf.path did not exist. Detect now attempts to create the directory structure to the specified path. A warning is logged if Detect fails to create the directory. Resolved an issue wherein properties that had a primary group and additional property group may have been excluded from the group search. Resolved an issue wherein the deprecation warning displayed when the deprecated property was provided by the user. Resolved an issue with aggregate BOM filename generation that could cause the message Unable to relativize path, full source path will be used to display in the log. Resolved an issue that could cause components to be omitted from the BOM for Conda projects. Resolved an issue that could cause errors during parsing of Maven projects with long sub-project names.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_8","text":"The default value for the property detect.docker.path.required is now false. The ALL logging level is replaced with the TRACE logging level. The results URL for the Black Duck project BOM is now moved to the Detect Results panel. Renamed Detect Results to Detect Status. Previously, a temp file remained which could contain plain-text user name or password information. This temp file is now removed. Bazel is added as an acceptable value to the detect.tools properties. Detect now uses the current version of Docker Inspector. This means that no matter what version of Docker Inspector is currently released, Detect now uses that version.","title":"Changed features"},{"location":"90-releasenotes/#version-540","text":"","title":"Version 5.4.0"},{"location":"90-releasenotes/#new-features_9","text":"Added buildless mode. Added a new property for BitBake to remove Yocto reference implementation characters. Added a new property for adding group names to projects. Added a new property for uploading source files. Added the additional_components placeholder.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_13","text":"Resolved an issue wherein Yarn may have been incorrectly calculating the tree level. Resolved an issue wherein Detect may fail when Polaris is excluded, a Polaris URL is provided, and connection to Polaris failed. Resolved an issue that caused Detect to follow symbolic links while searching directories for files. Resolved an issue wherein Detect was not failing policy for UNSPECIFIED when fail on severities is set to ALL. Resolved an issue that could cause a counter (an integer intended to ensure uniqueness), to be unnecessarily appended to a code location name. Resolved an issue that may have caused the package manager name to be excluded from the code location name when a code location name was provided. Resolved an issue that could cause Detect to continue after a Polaris connection failure. Resolved an issue wherein the Detect scan results may incorrectly show development dependencies. Resolved an issue that could cause reports to fail due to timeout intermittently. Resolved an issue that could cause the value of --polaris.access.token to be logged to the console when detect.sh is invoked. Resolved an issue wherein Detect was cleaning up the contents but not the directory of the run.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_9","text":"For getting all logs, the ALL logging level is now TRACE. Improved the error message logged when the property detect.binary.scan.file.path, which must point to a readable file, points to something other than a readable file, such as a directory. Changed the environment variable used to tell the Detect scripts where to download the Detect jar. The previous value DETECT_JAR_PATH is now changed to DETECT_JAR_DOWNLOAD_DIR. Improved the parsing of packrat.lock files to better represent the relationships between dependencies in the graph. The version of Detect is no longer part of the code location name.","title":"Changed features"},{"location":"90-releasenotes/#version-533","text":"Resolved an issue wherein reports for projects containing risks may be generated with a status of zero risks shown.","title":"Version 5.3.3"},{"location":"90-releasenotes/#version-532","text":"Synopsys Detect version 5.3.2 is a minor maintenance release.","title":"Version 5.3.2"},{"location":"90-releasenotes/#version-531","text":"","title":"Version 5.3.1"},{"location":"90-releasenotes/#new-features_10","text":"Added new property detect.ignore.connection.failures which enables Synopsys Detect to continue even if it fails to talk to Black Duck.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_14","text":"Resolved an issue wherein build scan failures may occur in TFS with the error [COPY Operation] noSuchPath in source, path provided: //license/ownership. Resolved an issue wherein if the property detect.clone.project.version.name is set to a non-existent project version, the log messages are now improved to make it easier to recognize the problem.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_10","text":"In cases where the property detect.clone.project.version.name is set to a non-existent project version, the log messages are now improved to make it easier to recognize the issue.","title":"Changed features"},{"location":"90-releasenotes/#version-520","text":"","title":"Version 5.2.0"},{"location":"90-releasenotes/#new-features_11","text":"Added support for Bazel. Added support for CMake. Added a property to support using project version nicknames. Added a property for application ID. Added Java wildcard pattern support. Added support for Coverity on Polaris.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_15","text":"Resolved an issue wherein the package-lock.json file may be missing additional versions. Resolved an issue wherein multiple simultaneous Detect executions may cause BDIO merges. Resolved an issue wherein permission errors may display when creating projects or scanning.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_11","text":"The --detect.bom.aggregate.name property now checks for an empty BOM. If the BOM is empty, it is not uploaded to Black Duck. Added support for PiP versions 6.0.0 and higher. Improved error messages for Black Duck connection issues. Cosmetic changes: from Black Duck Detect to Synopsys Detect. Streamlined execution of Coverity and Black Duck scans through a single continuous integration job. Updated location of the shell/PowerShell scripts. Updated location of the air-gapped archive.","title":"Changed features"},{"location":"90-releasenotes/#version-510","text":"","title":"Version 5.1.0"},{"location":"90-releasenotes/#new-features_12","text":"Added support for GoVendor. Added executable output to diagnostic mode. Added the project/version GUID in the console output. Added error codes.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_16","text":"Resolved an issue that fixes the Clang Detector (for C/C++) handling of complex quoted strings occurring in compiler commands found in the JSON compilation database (compile_commands.json) file. Resolved an issue wherein a Null Pointer Exception error may occur when Detect cannot access a file during signature scan exclusion calculating. Resolved an issue wherein the RubyGems package manager had missing components. Resolved an issue wherein the NPM package lock added every dependency as a root dependency.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_12","text":"The properties --detect.nuget.path and --detect.nuget.inspector.name are deprecated. The properties detect.suppress.results.output and detect.suppress.configuration.output are deprecated. The output from these properties is logged instead of written to sysout. Improved the reporting of scan registration limit errors.","title":"Changed features"},{"location":"90-releasenotes/#version-501","text":"","title":"Version 5.0.1"},{"location":"90-releasenotes/#resolved-issues_17","text":"Resolved an issue wherein a null pointer exception error may occur in the NuGet portion of a scan when running Synopsys Detect in Linux. Resolved an issue that fixes the Clang Detector (for C/C++) handling of complex quoted strings occurring in compiler commands found in the JSON compilation database (compile_commands.json) file. Resolved an issue wherein using detect.tools=ALL did not run any tools. Resolved an issue wherein Coverity on Polaris may return a failure status for a successful upload.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_13","text":"NuGet air gap mode now points to other folders. Removed support for PiP resolving the project version.","title":"Changed features"},{"location":"90-releasenotes/#version-500","text":"","title":"Version 5.0.0"},{"location":"90-releasenotes/#new-features_13","text":"Added a new property to execute Black Duck Docker Inspector. CocoaPods are now nestable under Bill of Materials (BOM) tools. Added functionality to exclude all BOM tools. Added a new property which enables you to search at a determined depth. Added functionality to log all found executables. Added functionality to run in Docker mode. Added support for NuGet in MacOS. Added ability to include and exclude all tools. Added a new properties for SWIP in Detect scans.","title":"New features"},{"location":"90-releasenotes/#resolved-issues_18","text":"Resolved an issue that caused the Gradle inspector to retrieve the maven-metadata.xml file from the default repository, even when the property detect.gradle.inspector.repository.url was set to point to a different repository. Resolved an issue wherein Gradle may upload older BDIO files into the current project.","title":"Resolved issues"},{"location":"90-releasenotes/#changed-features_14","text":"Improved C/C++ multi-threading functionality. Deprecated Pipenv inspector messages are now logged. The term BOM_TOOL is now replaced with DETECTOR. You can no longer supply ranges for the Inspector versions. Enhanced the code location naming conventions.","title":"Changed features"},{"location":"advanced/BD-user-role-requirements/","text":"Black Duck user role requirements # Overview: The Project Creator overall role is required to create Black Duck projects. The Project Code Scanner project role, or the Global Code Scanner overall role, is required to populate the project BOM. The Project Manager project role is required to generate reports. Additional details: A user with the Global Code Scanner overall role can generate a report, but cannot delete the report. The Project Manager project role is required to delete the report.","title":"Black Duck user role requirements"},{"location":"advanced/BD-user-role-requirements/#black-duck-user-role-requirements","text":"Overview: The Project Creator overall role is required to create Black Duck projects. The Project Code Scanner project role, or the Global Code Scanner overall role, is required to populate the project BOM. The Project Manager project role is required to generate reports. Additional details: A user with the Global Code Scanner overall role can generate a report, but cannot delete the report. The Project Manager project role is required to delete the report.","title":"Black Duck user role requirements"},{"location":"advanced/air-gap/","text":"Air gap mode # To run Synopsys Detect on an air-gapped computer or network, you must first download and install files that Synopsys Detect normally downloads as it runs. These include inspectors for Docker, Gradle, and NuGet. Air gap archives are available for download from the Synopsys SIG Artifactory server . As an alternative, you can create an air gap archive by running Synopsys Detect with the -z or --zip command line option . The archive created contains the Synopsys Detect .jar and the inspectors. Before running Synopsys Detect in air gap mode, unzip the air gap archive to create the air gap directory. To run Synopsys Detect in air gap mode, invoke the Synopsys Detect .jar file at the top level of the air gap directory. Refer to Running the Synopsys Detect .jar for more information. To run Synopsys Detect using the Gradle inspector, set the Gradle Inspector Air Gap Path To run Synopsys Detect using the NuGet inspector, set the NuGet Inspector Air Gap Path To run Synopsys Detect using the Docker inspector, set the Docker Inspector Air Gap Path","title":"Air gap mode"},{"location":"advanced/air-gap/#air-gap-mode","text":"To run Synopsys Detect on an air-gapped computer or network, you must first download and install files that Synopsys Detect normally downloads as it runs. These include inspectors for Docker, Gradle, and NuGet. Air gap archives are available for download from the Synopsys SIG Artifactory server . As an alternative, you can create an air gap archive by running Synopsys Detect with the -z or --zip command line option . The archive created contains the Synopsys Detect .jar and the inspectors. Before running Synopsys Detect in air gap mode, unzip the air gap archive to create the air gap directory. To run Synopsys Detect in air gap mode, invoke the Synopsys Detect .jar file at the top level of the air gap directory. Refer to Running the Synopsys Detect .jar for more information. To run Synopsys Detect using the Gradle inspector, set the Gradle Inspector Air Gap Path To run Synopsys Detect using the NuGet inspector, set the NuGet Inspector Air Gap Path To run Synopsys Detect using the Docker inspector, set the Docker Inspector Air Gap Path","title":"Air gap mode"},{"location":"advanced/concurrent/","text":"Concurrent execution # Concurrent execution of Synopsys Detect by the same user can result in collisions as the Synopsys Detect script, the Synopsys Detect .jar, the Synopsys Detect inspectors, and the Black Duck Signature Scanner are each downloaded to the same default location during execution. Concurrent execution of Synopsys Detect runs that include Docker image inspection involves additional challenges. For that scenario, we recommend engaging Synopsys Software Integrity Group Client Services for a solution tailored to your environment. The rest of this page addresses scenarios that do not involved inspecting Docker images. The recommended way for a single user to execute multiple Synopsys Detect runs concurrently and avoid the collisions mentioned above is to: Run Synopsys Detect using the air gap capability. This avoids downloading the Synopsys Detect script, .jar, or inspectors during execution. Manually download and install the Black Duck Signature Scanner, and point Synopsys Detect to it. This avoids downloading the Black Duck Signature Scanner during execution. To do this: Log into Black Duck, and under Tools Legacy Downloads, download and unzip the Black Duck Signature Scanner. Download the Synopsys Detect gradle-nuget air gap zip from Synopsys SIG Artifactory server and unzip it. Run Synopsys Detect as shown in this example: java -jar {airgap dir}/synopsys-detect-6.4.0.jar --detect.nuget.inspector.air.gap.path={airgap dir}/packaged-inspectors/nuget/ --detect.gradle.inspector.air.gap.path={airgap dir}/packaged-inspectors/gradle/ --detect.blackduck.signature.scanner.local.path={scan.cli-yourBlackDuckVersion dir}","title":"Concurrent execution"},{"location":"advanced/concurrent/#concurrent-execution","text":"Concurrent execution of Synopsys Detect by the same user can result in collisions as the Synopsys Detect script, the Synopsys Detect .jar, the Synopsys Detect inspectors, and the Black Duck Signature Scanner are each downloaded to the same default location during execution. Concurrent execution of Synopsys Detect runs that include Docker image inspection involves additional challenges. For that scenario, we recommend engaging Synopsys Software Integrity Group Client Services for a solution tailored to your environment. The rest of this page addresses scenarios that do not involved inspecting Docker images. The recommended way for a single user to execute multiple Synopsys Detect runs concurrently and avoid the collisions mentioned above is to: Run Synopsys Detect using the air gap capability. This avoids downloading the Synopsys Detect script, .jar, or inspectors during execution. Manually download and install the Black Duck Signature Scanner, and point Synopsys Detect to it. This avoids downloading the Black Duck Signature Scanner during execution. To do this: Log into Black Duck, and under Tools Legacy Downloads, download and unzip the Black Duck Signature Scanner. Download the Synopsys Detect gradle-nuget air gap zip from Synopsys SIG Artifactory server and unzip it. Run Synopsys Detect as shown in this example: java -jar {airgap dir}/synopsys-detect-6.4.0.jar --detect.nuget.inspector.air.gap.path={airgap dir}/packaged-inspectors/nuget/ --detect.gradle.inspector.air.gap.path={airgap dir}/packaged-inspectors/gradle/ --detect.blackduck.signature.scanner.local.path={scan.cli-yourBlackDuckVersion dir}","title":"Concurrent execution"},{"location":"advanced/downloads/","text":"Downloads # Download locations: The Synopsys Detect Bash script is available for download from: https://detect.synopsys.com/detect.sh . The Synopsys Detect PowerShell script is available for download from: https://detect.synopsys.com/detect.ps1 . The Synopsys Detect .jar and air gap zip files are available for download from: https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect . For certain types of projects, Synopsys Detect automatically downloads one or more inspectors as needed.","title":"Downloads"},{"location":"advanced/downloads/#downloads","text":"Download locations: The Synopsys Detect Bash script is available for download from: https://detect.synopsys.com/detect.sh . The Synopsys Detect PowerShell script is available for download from: https://detect.synopsys.com/detect.ps1 . The Synopsys Detect .jar and air gap zip files are available for download from: https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect . For certain types of projects, Synopsys Detect automatically downloads one or more inspectors as needed.","title":"Downloads"},{"location":"advanced/includeexcludewildcards/","text":"Property wildcard support # The values of the following Synopsys Detect properties can utilize filename globbing-style wildcards described below: detect.maven.included.scopes detect.maven.excluded.scopes detect.maven.included.modules detect.maven.excluded.modules detect.sbt.included.configurations detect.sbt.excluded.configurations detect.gradle.included.configurations detect.gradle.excluded.configurations detect.gradle.included.projects detect.gradle.excluded.projects detect.blackduck.signature.scanner.exclusion.name.patterns detect.binary.scan.file.name.patterns The supported wildcards and their effect are: An asterisk (*) matches any sequence of zero or more characters A question mark (?) matches any single character For example: *.jpg matches someimage.jpg, but not somedocument.doc *.??? matches someimage.jpg and somedocument.doc, but not somedocument.docx Wildcard evaluation in these values is similar to Linux command line file globbing, and different from regular expression matching. Synopsys Detect uses the Apache Commons IO FilenameUtils.wildcardMatch() method to determine whether a string matches the given pattern. More details can be found here .","title":"Property wildcard support"},{"location":"advanced/includeexcludewildcards/#property-wildcard-support","text":"The values of the following Synopsys Detect properties can utilize filename globbing-style wildcards described below: detect.maven.included.scopes detect.maven.excluded.scopes detect.maven.included.modules detect.maven.excluded.modules detect.sbt.included.configurations detect.sbt.excluded.configurations detect.gradle.included.configurations detect.gradle.excluded.configurations detect.gradle.included.projects detect.gradle.excluded.projects detect.blackduck.signature.scanner.exclusion.name.patterns detect.binary.scan.file.name.patterns The supported wildcards and their effect are: An asterisk (*) matches any sequence of zero or more characters A question mark (?) matches any single character For example: *.jpg matches someimage.jpg, but not somedocument.doc *.??? matches someimage.jpg and somedocument.doc, but not somedocument.docx Wildcard evaluation in these values is similar to Linux command line file globbing, and different from regular expression matching. Synopsys Detect uses the Apache Commons IO FilenameUtils.wildcardMatch() method to determine whether a string matches the given pattern. More details can be found here .","title":"Property wildcard support"},{"location":"advanced/project-and-version-naming/","text":"Project and version naming # The project and version names of the project to which Synopsys Detect writes results are, by default, derived from the project on which Synopsys Detect is run. The mechanism Synopsys Detect uses to determine the project and version names depends on project type. If Synopsys Detect cannot determine the project and version names, then Synopsys Detect uses the project directory name as the project name, and the value \"Default Detect Version\" as the version name. You can use the following properties to override the project and version names: --detect.project.name=PROJECT-NAME --detect.project.version.name=VERSION-NAME You can use the following property to change the default version to a timestamp: --detect.default.project.version.scheme=timestamp You can use the following property to customize the timestamp format: --detect.default.project.version.timeformat='yyyy-MM-dd:HH:mm:ss.SSS' Project and version naming for Git projects # If no package manager provides project and version names, you have not provided the project and version names through properties, and the project uses Git, Synopsys Detect attempts to use Git to determine project information. Project information is extracted from the remote URL for the current branch. The version is the current branch name, or the commit hash if a detached head is checked out. This is done by the Git detector. If you don't want Synopsys Detect to use Git data, omit the Git detector using the following property: --detect.excluded.detector.types=GIT For example, for a project with a remote URL of \"https://github.com/blackducksoftware/synopsys-detect\" and a checked-out branch of \"5.5.0\", Synopsys Detect by default uses the project name \"blackducksoftware/synopsys-detect\" and project version \"5.5.0\". Synopsys Detect attempts to derive project and version information by running the Git executable. If that is not successful, it attempts to derive project and version information by parsing Git files. In Synopsys Detect versions 5.5.0 and higher, there is a new Synopsys Detect property for providing the path to the Git executable: detect.git.path.","title":"Project and version naming"},{"location":"advanced/project-and-version-naming/#project-and-version-naming","text":"The project and version names of the project to which Synopsys Detect writes results are, by default, derived from the project on which Synopsys Detect is run. The mechanism Synopsys Detect uses to determine the project and version names depends on project type. If Synopsys Detect cannot determine the project and version names, then Synopsys Detect uses the project directory name as the project name, and the value \"Default Detect Version\" as the version name. You can use the following properties to override the project and version names: --detect.project.name=PROJECT-NAME --detect.project.version.name=VERSION-NAME You can use the following property to change the default version to a timestamp: --detect.default.project.version.scheme=timestamp You can use the following property to customize the timestamp format: --detect.default.project.version.timeformat='yyyy-MM-dd:HH:mm:ss.SSS'","title":"Project and version naming"},{"location":"advanced/project-and-version-naming/#project-and-version-naming-for-git-projects","text":"If no package manager provides project and version names, you have not provided the project and version names through properties, and the project uses Git, Synopsys Detect attempts to use Git to determine project information. Project information is extracted from the remote URL for the current branch. The version is the current branch name, or the commit hash if a detached head is checked out. This is done by the Git detector. If you don't want Synopsys Detect to use Git data, omit the Git detector using the following property: --detect.excluded.detector.types=GIT For example, for a project with a remote URL of \"https://github.com/blackducksoftware/synopsys-detect\" and a checked-out branch of \"5.5.0\", Synopsys Detect by default uses the project name \"blackducksoftware/synopsys-detect\" and project version \"5.5.0\". Synopsys Detect attempts to derive project and version information by running the Git executable. If that is not successful, it attempts to derive project and version information by parsing Git files. In Synopsys Detect versions 5.5.0 and higher, there is a new Synopsys Detect property for providing the path to the Git executable: detect.git.path.","title":"Project and version naming for Git projects"},{"location":"advanced/proxies/","text":"Running behind a proxy # When running behind a proxy: The script (detect.sh or detect.ps1) requires proxy details to do a version check on, and/or download the Synopsys Detect .jar file. Synopsys Detect; in other words, the code in the .jar file, requires proxy details to download inspectors and connect to Black Duck and Polaris. Providing proxy details to Synopsys Detect # Synopsys Detect looks for proxy details in the properties whose names start with blackduck.proxy, including: blackduck.proxy.host (proxy host) blackduck.proxy.port (proxy port) blackduck.proxy.username (proxy username) blackduck.proxy.password (proxy password) Refer to properties for more information. Providing proxy details to detect.sh # The curl commands executed by detect.sh to do a version check on, and/or download the Synopsys Detect .jar file, require additional command line options when run behind a proxy. For more information on curl options, refer to the curl documentation . To provide additional curl command line options for detect.sh to use when it executes curl, set the environment variable DETECT_CURL_OPTS before running detect.sh. For example: export DETECT_CURL_OPTS=--proxy http://myproxy:3128 ./detect.sh When using detect.sh to execute Synopsys Detect you must set proxy properties for Synopsys Detect as previously described. Providing proxy details to detect.ps1 # detect.ps1 derives proxy details from environment variables whose names match the Synopsys Detect proxy property names. Configuring detect.ps1 for your proxy involves setting those environment variables before running detect.ps1. For example: ${Env:blackduck.proxy.host} = $ProxyHost ${Env:blackduck.proxy.port} = $ProxyPort ${Env:blackduck.proxy.password} = $ProxyUsername ${Env:blackduck.proxy.username} = $ProxyPassword powershell \"[Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect\" When using detect.ps1 to execute Synopsys Detect, Synopsys Detect also receives the proxy details from these environment variables, so no additional configuration is required for Synopsys Detect.","title":"Running behind a proxy"},{"location":"advanced/proxies/#running-behind-a-proxy","text":"When running behind a proxy: The script (detect.sh or detect.ps1) requires proxy details to do a version check on, and/or download the Synopsys Detect .jar file. Synopsys Detect; in other words, the code in the .jar file, requires proxy details to download inspectors and connect to Black Duck and Polaris.","title":"Running behind a proxy"},{"location":"advanced/proxies/#providing-proxy-details-to-synopsys-detect","text":"Synopsys Detect looks for proxy details in the properties whose names start with blackduck.proxy, including: blackduck.proxy.host (proxy host) blackduck.proxy.port (proxy port) blackduck.proxy.username (proxy username) blackduck.proxy.password (proxy password) Refer to properties for more information.","title":"Providing proxy details to Synopsys Detect"},{"location":"advanced/proxies/#providing-proxy-details-to-detectsh","text":"The curl commands executed by detect.sh to do a version check on, and/or download the Synopsys Detect .jar file, require additional command line options when run behind a proxy. For more information on curl options, refer to the curl documentation . To provide additional curl command line options for detect.sh to use when it executes curl, set the environment variable DETECT_CURL_OPTS before running detect.sh. For example: export DETECT_CURL_OPTS=--proxy http://myproxy:3128 ./detect.sh When using detect.sh to execute Synopsys Detect you must set proxy properties for Synopsys Detect as previously described.","title":"Providing proxy details to detect.sh"},{"location":"advanced/proxies/#providing-proxy-details-to-detectps1","text":"detect.ps1 derives proxy details from environment variables whose names match the Synopsys Detect proxy property names. Configuring detect.ps1 for your proxy involves setting those environment variables before running detect.ps1. For example: ${Env:blackduck.proxy.host} = $ProxyHost ${Env:blackduck.proxy.port} = $ProxyPort ${Env:blackduck.proxy.password} = $ProxyUsername ${Env:blackduck.proxy.username} = $ProxyPassword powershell \"[Net.ServicePointManager]::SecurityProtocol = 'tls12'; irm https://detect.synopsys.com/detect.ps1?$(Get-Random) | iex; detect\" When using detect.ps1 to execute Synopsys Detect, Synopsys Detect also receives the proxy details from these environment variables, so no additional configuration is required for Synopsys Detect.","title":"Providing proxy details to detect.ps1"},{"location":"advanced/scan-naming/","text":"Code location (scan) naming # By default, a code location (scan) name generated by a detector is constructed from information that it derives from the package manager, such as project name and version, sub-project, or module if applicable, and the detector type. Code location names generated by detectors end in bom . A code location name generated by the Black Duck Signature Scanner is constructed from the source directory name, project name, and project version. Code location names generated by the Black Duck Signature Scanner end in scan . Optionally, you can add a prefix to the automatically generated code location names, or provided a base name .","title":"Code location (scan) naming"},{"location":"advanced/scan-naming/#code-location-scan-naming","text":"By default, a code location (scan) name generated by a detector is constructed from information that it derives from the package manager, such as project name and version, sub-project, or module if applicable, and the detector type. Code location names generated by detectors end in bom . A code location name generated by the Black Duck Signature Scanner is constructed from the source directory name, project name, and project version. Code location names generated by the Black Duck Signature Scanner end in scan . Optionally, you can add a prefix to the automatically generated code location names, or provided a base name .","title":"Code location (scan) naming"},{"location":"advanced/script-configuration/","text":"Shell script configuration # The Synopsys Detect Bash and PowerShell scripts are configured by setting the environment variables. In Bash, an environment variable is set as follows: export ENV_VAR_NAME=value In PowerShell, an environment variable is set as follows: $Env:ENV_VAR_NAME = value Variable Purpose Value Notes DETECT_SOURCE Download the Synopsys Detect .jar from a given URL The URL of the Synopsys Detect .jar file to download and run DETECT_LATEST_RELEASE_VERSION Run a given Synopsys Detect version A Synopsys Detect version (example: 5.6.2) If you would like to run a Synopsys Detect version other than the latest, set DETECT_LATEST_RELEASE_VERSION to the Synopsys Detect version you would like to run (for example: 5.6.2). DETECT_SOURCE has precedence over DETECT_LATEST_RELEASE_VERSION. You can see the available Synopsys Detect versions in Artifactory . DETECT_VERSION_KEY Continue running an earlier major version of Synopsys Detect DETECT_LATEST (default), DETECT_LATEST_5, DETECT_LATEST_4 If neither DETECT_SOURCE nor DETECT_LATEST_RELEASE_VERSION is specified, the script will use the version key to query Artifactory for the correct version to download. By default it will look for DETECT_LATEST, however the Synopsys Detect artifactory also includes keys for (some of) the major versions of Synopsys Detect such as DETECT_LATEST_4. You can view the available values for DETECT_VERSION_KEY in Artifactory . DETECT_JAR_PATH Change the Synopsys Detect .jar download dir The path to the .jar file download directory If DETECT_JAR_PATH is provided, the script will use this location when downloading and running detect. The location of the jar will be DETECT_JAR_PATH/synopsys-detect-{version}.jar. The Bash script will default to '/tmp' if no option is specified. TMP (PowerShell only) Provides the user's temporary directory The path to a directory for temporary files If DETECT_JAR_PATH is not provided, the script will use the environment 'TMP' variable as the folder for the Synopsys Detect .jar path. HOME (PowerShell only) Provides the user's home directory The path to the user's home directory If DETECT_JAR_PATH is not provided and no 'TMP' variable can be found, the '$HOME/tmp' folder will be used for the Synopsys Detect jar path. DETECT_JAVA_PATH The path to the java executable to use to execute Synopsys Detect The path to the java executable file JAVA_HOME The path to the Java installation directory. The path to the Java home directory. If DETECT_JAVA_PATH is not set, and JAVA_HOME is set, the script will execute $JAVA_HOME/bin/java. PATH The executable program path. The list of directories in which the system looks for the executable file for each command executed (the syntax is operating system-specific). If neither DETECT_JAVA_PATH nor JAVA_HOME are set, the script assumes the directory containing the java executable file is on the path. DETECT_EXIT_CODE_PASSTHRU (PowerShell only) Prevent the shell from exiting on completion 1 Setting this variable to '1' will cause the script to simply return the exit code but not exit. By default, the Synopsys Detect PowerShell script will exit with the exit code of Synopsys Detect. This is desirable because many CI's such as TFS will look at the scripts exit code to decide build status. However it may be undesirable to exit the script in some situations, such as when debugging in a terminal. DETECT_SKIP_JAVA_TEST (PowerShell only) Skip the test for the presence of the java command 1 Setting this variable to '1' causes the script not to ensure that java is on the path. By default the script will attempt to execute \"java -version\" to ensure that java is available and executable. DETECT_CURL_OPTS (Bash only) Add the given options to any curl commands executed curl command options (a string) Use this variable to add options to the curl command used to download files such as the Synopsys Detect .jar file. For example, you can use this variable to set proxy settings for curl. The PowerShell script does not support this as it does not use curl. To supply proxy information to the PowerShell you can simply set the Synopsys Detect proxy settings as environment variables. DETECT_JAVA_OPTS (Bash only) Add the given options to the java command java command options (a string) Use this variable to add options to the java command used to execute Synopsys Detect. The PowerShell script does not currently support this setting. DETECT_DOWNLOAD_ONLY (Bash only) Download the Synopsys Detect .jar file, but do not run it 1 Set this variable to 1 to download, but not run, the Synopsys Detect .jar file. The PowerShell script does not currently support this setting.","title":"Shell script configuration"},{"location":"advanced/script-configuration/#shell-script-configuration","text":"The Synopsys Detect Bash and PowerShell scripts are configured by setting the environment variables. In Bash, an environment variable is set as follows: export ENV_VAR_NAME=value In PowerShell, an environment variable is set as follows: $Env:ENV_VAR_NAME = value Variable Purpose Value Notes DETECT_SOURCE Download the Synopsys Detect .jar from a given URL The URL of the Synopsys Detect .jar file to download and run DETECT_LATEST_RELEASE_VERSION Run a given Synopsys Detect version A Synopsys Detect version (example: 5.6.2) If you would like to run a Synopsys Detect version other than the latest, set DETECT_LATEST_RELEASE_VERSION to the Synopsys Detect version you would like to run (for example: 5.6.2). DETECT_SOURCE has precedence over DETECT_LATEST_RELEASE_VERSION. You can see the available Synopsys Detect versions in Artifactory . DETECT_VERSION_KEY Continue running an earlier major version of Synopsys Detect DETECT_LATEST (default), DETECT_LATEST_5, DETECT_LATEST_4 If neither DETECT_SOURCE nor DETECT_LATEST_RELEASE_VERSION is specified, the script will use the version key to query Artifactory for the correct version to download. By default it will look for DETECT_LATEST, however the Synopsys Detect artifactory also includes keys for (some of) the major versions of Synopsys Detect such as DETECT_LATEST_4. You can view the available values for DETECT_VERSION_KEY in Artifactory . DETECT_JAR_PATH Change the Synopsys Detect .jar download dir The path to the .jar file download directory If DETECT_JAR_PATH is provided, the script will use this location when downloading and running detect. The location of the jar will be DETECT_JAR_PATH/synopsys-detect-{version}.jar. The Bash script will default to '/tmp' if no option is specified. TMP (PowerShell only) Provides the user's temporary directory The path to a directory for temporary files If DETECT_JAR_PATH is not provided, the script will use the environment 'TMP' variable as the folder for the Synopsys Detect .jar path. HOME (PowerShell only) Provides the user's home directory The path to the user's home directory If DETECT_JAR_PATH is not provided and no 'TMP' variable can be found, the '$HOME/tmp' folder will be used for the Synopsys Detect jar path. DETECT_JAVA_PATH The path to the java executable to use to execute Synopsys Detect The path to the java executable file JAVA_HOME The path to the Java installation directory. The path to the Java home directory. If DETECT_JAVA_PATH is not set, and JAVA_HOME is set, the script will execute $JAVA_HOME/bin/java. PATH The executable program path. The list of directories in which the system looks for the executable file for each command executed (the syntax is operating system-specific). If neither DETECT_JAVA_PATH nor JAVA_HOME are set, the script assumes the directory containing the java executable file is on the path. DETECT_EXIT_CODE_PASSTHRU (PowerShell only) Prevent the shell from exiting on completion 1 Setting this variable to '1' will cause the script to simply return the exit code but not exit. By default, the Synopsys Detect PowerShell script will exit with the exit code of Synopsys Detect. This is desirable because many CI's such as TFS will look at the scripts exit code to decide build status. However it may be undesirable to exit the script in some situations, such as when debugging in a terminal. DETECT_SKIP_JAVA_TEST (PowerShell only) Skip the test for the presence of the java command 1 Setting this variable to '1' causes the script not to ensure that java is on the path. By default the script will attempt to execute \"java -version\" to ensure that java is available and executable. DETECT_CURL_OPTS (Bash only) Add the given options to any curl commands executed curl command options (a string) Use this variable to add options to the curl command used to download files such as the Synopsys Detect .jar file. For example, you can use this variable to set proxy settings for curl. The PowerShell script does not support this as it does not use curl. To supply proxy information to the PowerShell you can simply set the Synopsys Detect proxy settings as environment variables. DETECT_JAVA_OPTS (Bash only) Add the given options to the java command java command options (a string) Use this variable to add options to the java command used to execute Synopsys Detect. The PowerShell script does not currently support this setting. DETECT_DOWNLOAD_ONLY (Bash only) Download the Synopsys Detect .jar file, but do not run it 1 Set this variable to 1 to download, but not run, the Synopsys Detect .jar file. The PowerShell script does not currently support this setting.","title":"Shell script configuration"},{"location":"advanced/script-escaping-special-characters/","text":"Quoting and escaping shell script arguments # Running the Bash script (detect.sh) on Linux or Mac # The recommended environment for running detect.sh on Linux or Mac is Bash. When an argument contains a space, you should wrap the argument with escaped quotes. For example: detect.sh --detect.project.name=\\\"Project Test\\\" When an argument contains a special character (for example, an exclamation point) you must escape the character with a backslash. The backslash should precede the escaped character. For example: detect.sh --detect.project.name=Project!Test Running the PowerShell script (detect.ps1) on Windows # The recommended environment for running detect.ps1 on Windows is the Windows Command Prompt . When an argument contains a space, comma or other special character, you should escape the character with a back quote. The back quote should precede the escaped character. For example: detect.ps1 --detect.project.name=Project` Test detect.ps1 --detect.signature.scanner.paths=path1`,path2","title":"Quoting and escaping shell script arguments"},{"location":"advanced/script-escaping-special-characters/#quoting-and-escaping-shell-script-arguments","text":"","title":"Quoting and escaping shell script arguments"},{"location":"advanced/script-escaping-special-characters/#running-the-bash-script-detectsh-on-linux-or-mac","text":"The recommended environment for running detect.sh on Linux or Mac is Bash. When an argument contains a space, you should wrap the argument with escaped quotes. For example: detect.sh --detect.project.name=\\\"Project Test\\\" When an argument contains a special character (for example, an exclamation point) you must escape the character with a backslash. The backslash should precede the escaped character. For example: detect.sh --detect.project.name=Project!Test","title":"Running the Bash script (detect.sh) on Linux or Mac"},{"location":"advanced/script-escaping-special-characters/#running-the-powershell-script-detectps1-on-windows","text":"The recommended environment for running detect.ps1 on Windows is the Windows Command Prompt . When an argument contains a space, comma or other special character, you should escape the character with a back quote. The back quote should precede the escaped character. For example: detect.ps1 --detect.project.name=Project` Test detect.ps1 --detect.signature.scanner.paths=path1`,path2","title":"Running the PowerShell script (detect.ps1) on Windows"},{"location":"advanced/status-file/","text":"Status File # As of detect 6.2.0 an output status file is created in the run folder with the name \"status.json\" and is meant to summarize the detect run in a machine readable format. The file includes status codes, issues encountered and results produced. As additional processes consume this file, additional information will be added. The format is intended to evolve over time. As Detect shuts down, by default, it performs cleanup operations which include deleting the status file. You can disable clean up by setting --detect.cleanup=false . Body # { formatVersion : The version of the status file format. Will change as new features are introduced. detectVersion : The version of Synopsys Detect that created the status file. projectName : The project name. projectVersion : The project version. detectors : [ List of Detectors, see details below. ] status : [ List of Status, see details below. ] issues : [ List of Issues, see details below. ] results : [ List of Results, see details below. ] unrecognizedPaths : [ List of Unrecognized Paths, see details below. ] codeLocations : [ List of code locations produced, see details below. ] } Detector # { folder : The folder the detector applied to. detectorType : The normalized detector type such as GIT . detectorName : A shorthand name of the detector such as Git Cli . descriptiveName : The long form name of the detector such as GIT - Git Cli . searchable : A boolean of whether or not the detector searched the given folder (currently will always be true). applicable : A boolean of whether or not the detector applied to the given folder (currently will always be true). extractable : A boolean indicating whether the detector could extract, meaning all of it's dependencies were downloaded or available. discoverable : A boolean indicating whether or not the detector was able to discover project information. extracted : A boolean indicating whether or not the detector was able to extract dependencies. searchableReason : A human readable description of the searchable result. applicableReason : A human readable description of the applicable result. extractableReason : A human readable description of the extractable result. relevantFiles : [ A list of files relevant to the detector. ] projectName : The project name this detectable found. projectVersion : The project version this detectable found. codeLocationCount : The number of code locations this detector produced. } Status # { key : The normalized key this status element describes such as GIT . status : SUCCESS or FAILURE } Issues # { type : A key describing the type of issue, currently EXCEPTION , DEPRECATION or DETECTOR . messages : A list of a strings describing the issue. } Results # A result is a URL or file path to output produced by the Synopsys Detect run: a Black Duck Bill Of Materials, Risk Report, Notices Report, or Air Gap zip. { location : The path to the result. message : A string describing the result. } Unrecognized Paths # For those detectors that support it (currently, only CLANG), a list of file paths to dependencies that (a) were not recognized by the package manager, and (b) reside outside the source directory. { Detector type : [ A list of file paths to unrecognized dependencies ] } Code Locations # { codeLocationName : The name of a code location produced by this run of Synopsys Detect. }","title":"Status File"},{"location":"advanced/status-file/#status-file","text":"As of detect 6.2.0 an output status file is created in the run folder with the name \"status.json\" and is meant to summarize the detect run in a machine readable format. The file includes status codes, issues encountered and results produced. As additional processes consume this file, additional information will be added. The format is intended to evolve over time. As Detect shuts down, by default, it performs cleanup operations which include deleting the status file. You can disable clean up by setting --detect.cleanup=false .","title":"Status File"},{"location":"advanced/status-file/#body","text":"{ formatVersion : The version of the status file format. Will change as new features are introduced. detectVersion : The version of Synopsys Detect that created the status file. projectName : The project name. projectVersion : The project version. detectors : [ List of Detectors, see details below. ] status : [ List of Status, see details below. ] issues : [ List of Issues, see details below. ] results : [ List of Results, see details below. ] unrecognizedPaths : [ List of Unrecognized Paths, see details below. ] codeLocations : [ List of code locations produced, see details below. ] }","title":"Body"},{"location":"advanced/status-file/#detector","text":"{ folder : The folder the detector applied to. detectorType : The normalized detector type such as GIT . detectorName : A shorthand name of the detector such as Git Cli . descriptiveName : The long form name of the detector such as GIT - Git Cli . searchable : A boolean of whether or not the detector searched the given folder (currently will always be true). applicable : A boolean of whether or not the detector applied to the given folder (currently will always be true). extractable : A boolean indicating whether the detector could extract, meaning all of it's dependencies were downloaded or available. discoverable : A boolean indicating whether or not the detector was able to discover project information. extracted : A boolean indicating whether or not the detector was able to extract dependencies. searchableReason : A human readable description of the searchable result. applicableReason : A human readable description of the applicable result. extractableReason : A human readable description of the extractable result. relevantFiles : [ A list of files relevant to the detector. ] projectName : The project name this detectable found. projectVersion : The project version this detectable found. codeLocationCount : The number of code locations this detector produced. }","title":"Detector"},{"location":"advanced/status-file/#status","text":"{ key : The normalized key this status element describes such as GIT . status : SUCCESS or FAILURE }","title":"Status"},{"location":"advanced/status-file/#issues","text":"{ type : A key describing the type of issue, currently EXCEPTION , DEPRECATION or DETECTOR . messages : A list of a strings describing the issue. }","title":"Issues"},{"location":"advanced/status-file/#results","text":"A result is a URL or file path to output produced by the Synopsys Detect run: a Black Duck Bill Of Materials, Risk Report, Notices Report, or Air Gap zip. { location : The path to the result. message : A string describing the result. }","title":"Results"},{"location":"advanced/status-file/#unrecognized-paths","text":"For those detectors that support it (currently, only CLANG), a list of file paths to dependencies that (a) were not recognized by the package manager, and (b) reside outside the source directory. { Detector type : [ A list of file paths to unrecognized dependencies ] }","title":"Unrecognized Paths"},{"location":"advanced/status-file/#code-locations","text":"{ codeLocationName : The name of a code location produced by this run of Synopsys Detect. }","title":"Code Locations"},{"location":"advanced/usage-metrics/","text":"Usage metrics collection # Synopsys Detect uses Google Analytics to collect anonymized usage metrics through a mechanism called phone home . Synopsys uses this data to help set engineering priorities. In a network where access to outside servers is limited, this mechanism may fail, and those failures may be visible in the log. This is a harmless failure; Synopsys Detect will continue to function normally. To disable this mechanism, set the environment variable SYNOPSYS_SKIP_PHONE_HOME to true .","title":"Usage metrics collection"},{"location":"advanced/usage-metrics/#usage-metrics-collection","text":"Synopsys Detect uses Google Analytics to collect anonymized usage metrics through a mechanism called phone home . Synopsys uses this data to help set engineering priorities. In a network where access to outside servers is limited, this mechanism may fail, and those failures may be visible in the log. This is a harmless failure; Synopsys Detect will continue to function normally. To disable this mechanism, set the environment variable SYNOPSYS_SKIP_PHONE_HOME to true .","title":"Usage metrics collection"},{"location":"advanced/verifying/","text":"Synopsys Detect code verification # Two methods are available to verify that the Synopsys Detect code you run has not been tampered with since it was built by Synopsys: code signature verification and checksum verification. Both methods apply to the Synopsys Detect .jar file, and only offer protection when you run Synopsys Detect by invoking the Synopsys Detect .jar file directly (as opposed to invoking detect.sh or detect.ps1). Code signature verification # Code signature verification is the most secure method available for verifying Synopsys Detect code. This method relies on Java tools. It involves verifying the Synopsys Detect .jar file that you download from https://sig-repo.synopsys.com using the Java jarsigner tool. In the event that the .jar has been tampered with, verification will fail. To verify the Synopsys Detect .jar: jarsigner -verify -strict {your Synopsys Detect .jar file} The output should be jar verified. (with no warnings). Checksum verification # Checksum verification provides less protection against tampering than code signature verification provices because in the unlikely scenario the binary repository has been compromised, an attacker could alter both the .jar and the checksum. But checksum verification does provide some degree of protection against other attack scenarios. The binary repository provides SHA-256, SHA-1, and MD5 checksums for each Synopsys Detect .jar file. To find it, navigate to the .jar file in the binary repository , and scroll to the bottom of the page. Various tools (such as md5sum, sha1sum, and sha256sum on Linux, and certutil and Get-FileHash on Windows) are available for calculating checksums of files on your computer. Use one of those tools to get a checksum for your copy of the Synopsys Detect .jar, and compare it to the corresponding checksum on the binary repository page to make sure they match.","title":"Synopsys Detect code verification"},{"location":"advanced/verifying/#synopsys-detect-code-verification","text":"Two methods are available to verify that the Synopsys Detect code you run has not been tampered with since it was built by Synopsys: code signature verification and checksum verification. Both methods apply to the Synopsys Detect .jar file, and only offer protection when you run Synopsys Detect by invoking the Synopsys Detect .jar file directly (as opposed to invoking detect.sh or detect.ps1).","title":"Synopsys Detect code verification"},{"location":"advanced/verifying/#code-signature-verification","text":"Code signature verification is the most secure method available for verifying Synopsys Detect code. This method relies on Java tools. It involves verifying the Synopsys Detect .jar file that you download from https://sig-repo.synopsys.com using the Java jarsigner tool. In the event that the .jar has been tampered with, verification will fail. To verify the Synopsys Detect .jar: jarsigner -verify -strict {your Synopsys Detect .jar file} The output should be jar verified. (with no warnings).","title":"Code signature verification"},{"location":"advanced/verifying/#checksum-verification","text":"Checksum verification provides less protection against tampering than code signature verification provices because in the unlikely scenario the binary repository has been compromised, an attacker could alter both the .jar and the checksum. But checksum verification does provide some degree of protection against other attack scenarios. The binary repository provides SHA-256, SHA-1, and MD5 checksums for each Synopsys Detect .jar file. To find it, navigate to the .jar file in the binary repository , and scroll to the bottom of the page. Various tools (such as md5sum, sha1sum, and sha256sum on Linux, and certutil and Get-FileHash on Windows) are available for calculating checksums of files on your computer. Use one of those tools to get a checksum for your copy of the Synopsys Detect .jar, and compare it to the corresponding checksum on the binary repository page to make sure they match.","title":"Checksum verification"},{"location":"advanced/package-managers/bazel/","text":"Bazel support # As of Synopsys Detect versions 5.2.0 and higher, Synopsys Detect provides limited support for Bazel projects. As of Synopsys Detect version 5.2.0, Synopsys Detect supports dependencies specified in maven_jar workspace rules. As of Synopsys Detect version 6.0.0, Synopsys Detect also supports dependencies specified in maven_install workspace rules. As of Synopsys Detect version 6.4.0, Synopsys Detect also supports dependencies specified in haskell_cabal_library workspace rules. The Bazel tool attempts to run on your project if you provide a Bazel build target using the Bazel target property. The Bazel tool also requires a bazel executable on $PATH. Synopsys Detect attempts to determine the workspace dependency rule ( maven_install , maven_jar , or haskell_cabal_library ) from the WORKSPACE file. In case it cannot, you can specify which rule you use with the Bazel dependency type property. Refer to Properties for details. Processing for the maven_install workspace rule # The Bazel tool runs a bazel cquery on the given target to produce output from which it can parse artifact details such as group, artifact, and version for dependencies. Synopsys Detect's Bazel detector uses commands very similar to the following to discover maven_install dependencies. $ bazel cquery --noimplicit_deps 'kind(j.*import, deps(//tests/integration:ArtifactExclusionsTest))' --output build 2 1 | grep maven_coordinates tags = [ maven_coordinates=com.google.guava:guava:27.0-jre ], tags = [ maven_coordinates=org.hamcrest:hamcrest:2.1 ], tags = [ maven_coordinates=org.hamcrest:hamcrest-core:2.1 ], tags = [ maven_coordinates=com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava ], tags = [ maven_coordinates=org.checkerframework:checker-qual:2.5.2 ], tags = [ maven_coordinates=com.google.guava:failureaccess:1.0 ], tags = [ maven_coordinates=com.google.errorprone:error_prone_annotations:2.2.0 ], tags = [ maven_coordinates=com.google.code.findbugs:jsr305:3.0.2 ], Then, it parses the group/artifact/version details from the values of the maven_coordinates tags. Processing for the maven_jar workspace rule # The Bazel tool runs a bazel query on the given target to get a list of jar dependencies. On each jar dependency, the Bazel tool runs another bazel query to get its artifact details: group, artifact, and version. The following is an example using the equivalent commands that Synopsys Detect runs, but from the command line of how Synopsys Detect's Bazel detector currently identifies components. First, it gets a list of dependencies: $ bazel cquery 'filter( @.*:jar , deps(//:ProjectRunner))' INFO: Invocation ID: dfe8718d-b4db-4bd9-b9b9-57842cca3fb4 @org_apache_commons_commons_io//jar:jar @com_google_guava_guava//jar:jar Loading: 0 packages loaded Then, it gets details for each dependency. It prepends //external: to the dependency name for this command. $ bazel query 'kind(maven_jar, //external:org_apache_commons_commons_io)' --output xml INFO: Invocation ID: 0a320967-b2a8-4b36-ab47-e183bc4d4781 ?xml version= 1.1 encoding= UTF-8 standalone= no ? query version= 2 rule class= maven_jar location= /root/home/steve/examples/java-tutorial/WORKSPACE:6:1 name= //external:org_apache_commons_commons_io string name= name value= org_apache_commons_commons_io / string name= artifact value= org.apache.commons:commons-io:1.3.2 / /rule /query Loading: 0 packages loaded Finally, it parses the group/artifact/version details from the value of the string element using the name of artifact. Processing for the haskell_cabal_library workspace rule # Requires Bazel 2.1.0 or later. Synopsys Detect's Bazel detector runs a bazel cquery on the given target to produce output from which it can extract artifact project and version for dependencies. The Bazel detector uses a command very similar to the following to discover haskell_cabal_library dependencies. $ bazel cquery --noimplicit_deps 'kind(haskell_cabal_library, deps(//cat_hs/lib/args:args))' --output jsonproto { results : [{ target : { type : RULE , rule : { ... attribute : [{ ... }, { name : name , type : STRING , stringValue : hspec , explicitlySpecified : true, nodep : false }, { name : version , type : STRING , stringValue : 2.7.1 , explicitlySpecified : true, nodep : false }, { ... It then uses Gson to parse the JSON output into a parse tree, and extracts the name and version from the corresponding rule attributes. Examples # mvn_install rule example # The following example will (if you add your Black Duck connection details to the Synopsys Detect command line) run the Bazel tool on the //tests/integration:ArtifactExclusionsTest target in the rules_jvm_external project and discover dependencies defined with the maven_install repository rule: git clone https://github.com/bazelbuild/rules_jvm_external cd rules_jvm_external/ bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.bazel.target='//tests/integration:ArtifactExclusionsTest' haskell_cabal_library rule example # The following example will (if you add your Black Duck connection details to the Synopsys Detect command line) run the Bazel tool on the //cat_hs/lib/args:args target in the rules_haskell/examples project and discover dependencies defined with the haskell_cabal_library repository rule: git clone https://github.com/tweag/rules_haskell.git cd rules_haskell/examples bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.bazel.target='//cat_hs/lib/args:args'","title":"Bazel support"},{"location":"advanced/package-managers/bazel/#bazel-support","text":"As of Synopsys Detect versions 5.2.0 and higher, Synopsys Detect provides limited support for Bazel projects. As of Synopsys Detect version 5.2.0, Synopsys Detect supports dependencies specified in maven_jar workspace rules. As of Synopsys Detect version 6.0.0, Synopsys Detect also supports dependencies specified in maven_install workspace rules. As of Synopsys Detect version 6.4.0, Synopsys Detect also supports dependencies specified in haskell_cabal_library workspace rules. The Bazel tool attempts to run on your project if you provide a Bazel build target using the Bazel target property. The Bazel tool also requires a bazel executable on $PATH. Synopsys Detect attempts to determine the workspace dependency rule ( maven_install , maven_jar , or haskell_cabal_library ) from the WORKSPACE file. In case it cannot, you can specify which rule you use with the Bazel dependency type property. Refer to Properties for details.","title":"Bazel support"},{"location":"advanced/package-managers/bazel/#processing-for-the-maven_install-workspace-rule","text":"The Bazel tool runs a bazel cquery on the given target to produce output from which it can parse artifact details such as group, artifact, and version for dependencies. Synopsys Detect's Bazel detector uses commands very similar to the following to discover maven_install dependencies. $ bazel cquery --noimplicit_deps 'kind(j.*import, deps(//tests/integration:ArtifactExclusionsTest))' --output build 2 1 | grep maven_coordinates tags = [ maven_coordinates=com.google.guava:guava:27.0-jre ], tags = [ maven_coordinates=org.hamcrest:hamcrest:2.1 ], tags = [ maven_coordinates=org.hamcrest:hamcrest-core:2.1 ], tags = [ maven_coordinates=com.google.guava:listenablefuture:9999.0-empty-to-avoid-conflict-with-guava ], tags = [ maven_coordinates=org.checkerframework:checker-qual:2.5.2 ], tags = [ maven_coordinates=com.google.guava:failureaccess:1.0 ], tags = [ maven_coordinates=com.google.errorprone:error_prone_annotations:2.2.0 ], tags = [ maven_coordinates=com.google.code.findbugs:jsr305:3.0.2 ], Then, it parses the group/artifact/version details from the values of the maven_coordinates tags.","title":"Processing for the maven_install workspace rule"},{"location":"advanced/package-managers/bazel/#processing-for-the-maven_jar-workspace-rule","text":"The Bazel tool runs a bazel query on the given target to get a list of jar dependencies. On each jar dependency, the Bazel tool runs another bazel query to get its artifact details: group, artifact, and version. The following is an example using the equivalent commands that Synopsys Detect runs, but from the command line of how Synopsys Detect's Bazel detector currently identifies components. First, it gets a list of dependencies: $ bazel cquery 'filter( @.*:jar , deps(//:ProjectRunner))' INFO: Invocation ID: dfe8718d-b4db-4bd9-b9b9-57842cca3fb4 @org_apache_commons_commons_io//jar:jar @com_google_guava_guava//jar:jar Loading: 0 packages loaded Then, it gets details for each dependency. It prepends //external: to the dependency name for this command. $ bazel query 'kind(maven_jar, //external:org_apache_commons_commons_io)' --output xml INFO: Invocation ID: 0a320967-b2a8-4b36-ab47-e183bc4d4781 ?xml version= 1.1 encoding= UTF-8 standalone= no ? query version= 2 rule class= maven_jar location= /root/home/steve/examples/java-tutorial/WORKSPACE:6:1 name= //external:org_apache_commons_commons_io string name= name value= org_apache_commons_commons_io / string name= artifact value= org.apache.commons:commons-io:1.3.2 / /rule /query Loading: 0 packages loaded Finally, it parses the group/artifact/version details from the value of the string element using the name of artifact.","title":"Processing for the maven_jar workspace rule"},{"location":"advanced/package-managers/bazel/#processing-for-the-haskell_cabal_library-workspace-rule","text":"Requires Bazel 2.1.0 or later. Synopsys Detect's Bazel detector runs a bazel cquery on the given target to produce output from which it can extract artifact project and version for dependencies. The Bazel detector uses a command very similar to the following to discover haskell_cabal_library dependencies. $ bazel cquery --noimplicit_deps 'kind(haskell_cabal_library, deps(//cat_hs/lib/args:args))' --output jsonproto { results : [{ target : { type : RULE , rule : { ... attribute : [{ ... }, { name : name , type : STRING , stringValue : hspec , explicitlySpecified : true, nodep : false }, { name : version , type : STRING , stringValue : 2.7.1 , explicitlySpecified : true, nodep : false }, { ... It then uses Gson to parse the JSON output into a parse tree, and extracts the name and version from the corresponding rule attributes.","title":"Processing for the haskell_cabal_library workspace rule"},{"location":"advanced/package-managers/bazel/#examples","text":"","title":"Examples"},{"location":"advanced/package-managers/bazel/#mvn_install-rule-example","text":"The following example will (if you add your Black Duck connection details to the Synopsys Detect command line) run the Bazel tool on the //tests/integration:ArtifactExclusionsTest target in the rules_jvm_external project and discover dependencies defined with the maven_install repository rule: git clone https://github.com/bazelbuild/rules_jvm_external cd rules_jvm_external/ bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.bazel.target='//tests/integration:ArtifactExclusionsTest'","title":"mvn_install rule example"},{"location":"advanced/package-managers/bazel/#haskell_cabal_library-rule-example","text":"The following example will (if you add your Black Duck connection details to the Synopsys Detect command line) run the Bazel tool on the //cat_hs/lib/args:args target in the rules_haskell/examples project and discover dependencies defined with the haskell_cabal_library repository rule: git clone https://github.com/tweag/rules_haskell.git cd rules_haskell/examples bash (curl -s -L https://detect.synopsys.com/detect.sh) --detect.bazel.target='//cat_hs/lib/args:args'","title":"haskell_cabal_library rule example"},{"location":"advanced/package-managers/cargo/","text":"Cargo support # Synopsys Detect runs the Cargo detector if it finds either of the following files in your project: Cargo.toml Cargo.lock The Cargo detector parses the Cargo.lock file for information on your project's dependencies. If the detector discovers a Cargo.toml file but not a Cargo.lock file, it will prompt the user to generate a Cargo.lock by running cargo generate-lockfile and then run Detect again. If the Cargo detector extracts the project's name and version from the Cargo.toml file. If it does not find a Cargo.toml file, it will defer to values derived by git, from the project's directory, or defaults.","title":"Cargo support"},{"location":"advanced/package-managers/cargo/#cargo-support","text":"Synopsys Detect runs the Cargo detector if it finds either of the following files in your project: Cargo.toml Cargo.lock The Cargo detector parses the Cargo.lock file for information on your project's dependencies. If the detector discovers a Cargo.toml file but not a Cargo.lock file, it will prompt the user to generate a Cargo.lock by running cargo generate-lockfile and then run Detect again. If the Cargo detector extracts the project's name and version from the Cargo.toml file. If it does not find a Cargo.toml file, it will defer to values derived by git, from the project's directory, or defaults.","title":"Cargo support"},{"location":"advanced/package-managers/clang/","text":"C/C++ (Clang) support # C/C++ (Clang) support is limited to Linux systems that support one of the following package manager commands: APK, DPKG, or RPM. For C/C++ projects on Linux systems that meet these requirements, Synopsys Detect can derive dependency information using information read from a JSON Compilation Database (compile_commands.json file) and the Linux package manager. The JSON compilation database must be generated by your project build before running Synopsys Detect. There are multiple C/C++ build tools that are capable of generating a JSON compilation database. For example, some versions of CMake generate a JSON compilation database when run with the following option: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON The Clang detector runs when it finds a compile_commands.json file in the project directory. If the compile_commands.json file resides in a sub-directory, adjust the detector search depth to enable Synopsys Detect to find it. If the compile_commands.json file resides in a normally excluded subdirectory (for example: ./build), you can turn off the default detector search exclusions , or fine tune the detector search directory exclusion patterns . For each compile command in the compile_commands.json file, the Clang detector runs a version of the command that is modified to ensure that it does not overwrite build artifacts, and generate a list of dependency files used. This is performed by adding the -M and -MF compiler options. It then uses the Linux package manager to identify which installed package owns each dependency file. These packages are added as a component to the results. Any dependency file that is not recognized by the Linux package manager and resides outside the source directory (the directory containing the compile_commands.json file) is written to the status.json file under unrecognizedPaths.CLANG.","title":"C/C++ (Clang) support"},{"location":"advanced/package-managers/clang/#cc-clang-support","text":"C/C++ (Clang) support is limited to Linux systems that support one of the following package manager commands: APK, DPKG, or RPM. For C/C++ projects on Linux systems that meet these requirements, Synopsys Detect can derive dependency information using information read from a JSON Compilation Database (compile_commands.json file) and the Linux package manager. The JSON compilation database must be generated by your project build before running Synopsys Detect. There are multiple C/C++ build tools that are capable of generating a JSON compilation database. For example, some versions of CMake generate a JSON compilation database when run with the following option: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON The Clang detector runs when it finds a compile_commands.json file in the project directory. If the compile_commands.json file resides in a sub-directory, adjust the detector search depth to enable Synopsys Detect to find it. If the compile_commands.json file resides in a normally excluded subdirectory (for example: ./build), you can turn off the default detector search exclusions , or fine tune the detector search directory exclusion patterns . For each compile command in the compile_commands.json file, the Clang detector runs a version of the command that is modified to ensure that it does not overwrite build artifacts, and generate a list of dependency files used. This is performed by adding the -M and -MF compiler options. It then uses the Linux package manager to identify which installed package owns each dependency file. These packages are added as a component to the results. Any dependency file that is not recognized by the Linux package manager and resides outside the source directory (the directory containing the compile_commands.json file) is written to the status.json file under unrecognizedPaths.CLANG.","title":"C/C++ (Clang) support"},{"location":"advanced/package-managers/docker-images/","text":"Docker image support # On Linux, Mac, and Windows 10 Enterprise, Synopsys Detect can invoke Docker Inspector to inspect Linux Docker images to discover packages installed by the Linux package manager. For simple use cases, add either --detect.docker.image={repo}:{tag} or --detect.docker.tar={path to a Docker saved tarfile} to the Synopsys Detect command line. The documentation for Docker Inspector is available here . When passed a value for either detect.docker.image or detect.docker.tar, Synopsys Detect runs Docker Inspector on given image (the \"target image\"), creating one code location. Synopsys Detect by default runs the Black Duck Signature Scanner on the \"container file system\" (the file system a container created from the image has at startup time). Refer to Synopsys Detect's scan target for more details. This creates a second code location. Passing Docker Inspector property values to Docker Inspector from Synopsys Detect # For more complex use cases, you may need to pass Docker Inspector property values to Docker Inspector using Synopsys Detect. To do this, construct the Synopsys Detect property name by prefixing the Docker Inspector property name with detect.docker.passthrough. . For example, suppose you need to set Docker Inspector's service.timeout value (the length of time Docker Inspector waits for a response from the Image Inspector services that it uses) to 480000 milliseconds. You add the prefix to the Docker Inspector property name to derive the Synopsys Detect property name detect.docker.passthrough.service.timeout . Therefore, add --detect.docker.passthrough.service.timeout=480000 to the Synopsys Detect command line. For example: ./detect.sh --detect.docker.image=ubuntu:latest --detect.docker.passthrough.service.timeout=480000 You can set any Docker Inspector property using this method. However, you usually should not override the values of the following Docker Inspector properties (which Synopsys Detect sets) because changing their values is likely to interfere with Synopsys Detect's ability to work with Docker Inspector: output.path output.include.squashedimage output.include.containerfilesystem upload.bdio Synopsys Detect's scan target # When a Docker image is run; for example, using a docker run command, a container is created. That container has a file system; in other words, the container file system. The container file system at the instant the container is created; in other words, the initial container file system, can be determined in advance from the image without running the image. Because the target image is not yet trusted, Docker Inspector does not run the image; that is, it does not create a container from the image, but it does construct the initial container file system, which is the file system a container has at the instant it is created. When Synopsys Detect invokes both Docker Inspector because either detect.docker.image or detect.docker.tar is set, and the Black Duck Signature Scanner, as it does by default, the target of that Black Duck signature scan is the initial container file system constructed by Docker Inspector, packaged in a way to optimize results from Black Duck's matching algorithms. Rather than directly running the Black Duck Signature Scanner on the initial container file system, Synopsys Detect runs the Black Duck Signature Scanner on a new image; in other words, the squashed image, constructed using the initial container file system built by Docker Inspector. Packaging the initial container file system in a Docker image triggers matching algorithms within Black Duck that optimize match results for Linux file systems. In earlier versions of Synopsys Detect / Docker Inspector, Synopsys Detect ran the Black Duck Signature Scanner directly on the target image. This approach had the disadvantage of potentially producing false positives under certain circumstances. For example, suppose your target image consists of multiple layers. If version 1 of a package is installed in layer 0, and then replaced with a newer version of that package in layer 1, both versions exist in the image, even though the initial container file system only includes version 2. A Black Duck signature scan of the target image shows both versions, even though version 1 has been effectively replaced with version 2. The current Synopsys Detect / Docker Inspector functionality avoids this potential for false positives. Isolating application components # If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from the results. For example, if you build your application on ubuntu:latest (your Dockerfile starts with FROM ubuntu:latest), you can exclude components from the Ubuntu layer(s) so that the components generated by Synopsys Detect using Docker Inspector and the Black Duck Signature Scanner contain only components from your application layers. First, find the layer ID of the platform's top layer. To do this task: Run the docker inspect command on the base image; in our example this is ubuntu:latest. Find the last element in the RootFS.Layers array. This is the platform top layer ID. In the following example, this is sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c. Set the value of the Docker Inspector property docker.platform.top.layer.id to the platform top layer ID. For example: ./detect.sh ... --detect.docker.image={your application image} --detect.docker.platform.top.layer.id=sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c In this mode, there may be some loss in match accuracy from the Black Duck Signature Scanner because, in this scenario, the Black Duck Signature Scanner may be deprived of some contextual information, such as the operating system files that enable it to determine the Linux distribution, and that that may negatively affect its ability to accurately identify components. Inspecting Windows Docker images # Given a Windows Image, Docker Inspector, since it can only discover packages using a Linux package manager will not contribute any components to the BOM, but will return the container filesystem (in the form of a squashed image), which Synopsys Detect will scan using the Black Duck Signature Scanner. Inspecting Docker images on Windows # For important information on a Docker for Windows bug that might affect Synopsys Detect, refer to the troubleshooting page .","title":"Docker image support"},{"location":"advanced/package-managers/docker-images/#docker-image-support","text":"On Linux, Mac, and Windows 10 Enterprise, Synopsys Detect can invoke Docker Inspector to inspect Linux Docker images to discover packages installed by the Linux package manager. For simple use cases, add either --detect.docker.image={repo}:{tag} or --detect.docker.tar={path to a Docker saved tarfile} to the Synopsys Detect command line. The documentation for Docker Inspector is available here . When passed a value for either detect.docker.image or detect.docker.tar, Synopsys Detect runs Docker Inspector on given image (the \"target image\"), creating one code location. Synopsys Detect by default runs the Black Duck Signature Scanner on the \"container file system\" (the file system a container created from the image has at startup time). Refer to Synopsys Detect's scan target for more details. This creates a second code location.","title":"Docker image support"},{"location":"advanced/package-managers/docker-images/#passing-docker-inspector-property-values-to-docker-inspector-from-synopsys-detect","text":"For more complex use cases, you may need to pass Docker Inspector property values to Docker Inspector using Synopsys Detect. To do this, construct the Synopsys Detect property name by prefixing the Docker Inspector property name with detect.docker.passthrough. . For example, suppose you need to set Docker Inspector's service.timeout value (the length of time Docker Inspector waits for a response from the Image Inspector services that it uses) to 480000 milliseconds. You add the prefix to the Docker Inspector property name to derive the Synopsys Detect property name detect.docker.passthrough.service.timeout . Therefore, add --detect.docker.passthrough.service.timeout=480000 to the Synopsys Detect command line. For example: ./detect.sh --detect.docker.image=ubuntu:latest --detect.docker.passthrough.service.timeout=480000 You can set any Docker Inspector property using this method. However, you usually should not override the values of the following Docker Inspector properties (which Synopsys Detect sets) because changing their values is likely to interfere with Synopsys Detect's ability to work with Docker Inspector: output.path output.include.squashedimage output.include.containerfilesystem upload.bdio","title":"Passing Docker Inspector property values to Docker Inspector from Synopsys Detect"},{"location":"advanced/package-managers/docker-images/#synopsys-detects-scan-target","text":"When a Docker image is run; for example, using a docker run command, a container is created. That container has a file system; in other words, the container file system. The container file system at the instant the container is created; in other words, the initial container file system, can be determined in advance from the image without running the image. Because the target image is not yet trusted, Docker Inspector does not run the image; that is, it does not create a container from the image, but it does construct the initial container file system, which is the file system a container has at the instant it is created. When Synopsys Detect invokes both Docker Inspector because either detect.docker.image or detect.docker.tar is set, and the Black Duck Signature Scanner, as it does by default, the target of that Black Duck signature scan is the initial container file system constructed by Docker Inspector, packaged in a way to optimize results from Black Duck's matching algorithms. Rather than directly running the Black Duck Signature Scanner on the initial container file system, Synopsys Detect runs the Black Duck Signature Scanner on a new image; in other words, the squashed image, constructed using the initial container file system built by Docker Inspector. Packaging the initial container file system in a Docker image triggers matching algorithms within Black Duck that optimize match results for Linux file systems. In earlier versions of Synopsys Detect / Docker Inspector, Synopsys Detect ran the Black Duck Signature Scanner directly on the target image. This approach had the disadvantage of potentially producing false positives under certain circumstances. For example, suppose your target image consists of multiple layers. If version 1 of a package is installed in layer 0, and then replaced with a newer version of that package in layer 1, both versions exist in the image, even though the initial container file system only includes version 2. A Black Duck signature scan of the target image shows both versions, even though version 1 has been effectively replaced with version 2. The current Synopsys Detect / Docker Inspector functionality avoids this potential for false positives.","title":"Synopsys Detect's scan target"},{"location":"advanced/package-managers/docker-images/#isolating-application-components","text":"If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from the results. For example, if you build your application on ubuntu:latest (your Dockerfile starts with FROM ubuntu:latest), you can exclude components from the Ubuntu layer(s) so that the components generated by Synopsys Detect using Docker Inspector and the Black Duck Signature Scanner contain only components from your application layers. First, find the layer ID of the platform's top layer. To do this task: Run the docker inspect command on the base image; in our example this is ubuntu:latest. Find the last element in the RootFS.Layers array. This is the platform top layer ID. In the following example, this is sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c. Set the value of the Docker Inspector property docker.platform.top.layer.id to the platform top layer ID. For example: ./detect.sh ... --detect.docker.image={your application image} --detect.docker.platform.top.layer.id=sha256:b079b3fa8d1b4b30a71a6e81763ed3da1327abaf0680ed3ed9f00ad1d5de5e7c In this mode, there may be some loss in match accuracy from the Black Duck Signature Scanner because, in this scenario, the Black Duck Signature Scanner may be deprived of some contextual information, such as the operating system files that enable it to determine the Linux distribution, and that that may negatively affect its ability to accurately identify components.","title":"Isolating application components"},{"location":"advanced/package-managers/docker-images/#inspecting-windows-docker-images","text":"Given a Windows Image, Docker Inspector, since it can only discover packages using a Linux package manager will not contribute any components to the BOM, but will return the container filesystem (in the form of a squashed image), which Synopsys Detect will scan using the Black Duck Signature Scanner.","title":"Inspecting Windows Docker images"},{"location":"advanced/package-managers/docker-images/#inspecting-docker-images-on-windows","text":"For important information on a Docker for Windows bug that might affect Synopsys Detect, refer to the troubleshooting page .","title":"Inspecting Docker images on Windows"},{"location":"advanced/package-managers/golang/","text":"GoLang support # Synopsys Detect has four detectors for GoLang: Go Lock (GO_DEP) detector Go Gradle (GO_GRADLE) detector Go Mod Cli (GO_MOD) detector Go Vendor (GO_VENDOR) detector Go Vndr (GO_VNDR) detector Go Lock (GO_DEP) detector # The Go Lock (GO_DEP) detector: discovers dependencies of GoLang projects. attempts to run on your project if a Gopkg.lock file is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses Gopkg.lock for dependencies. The Go Gradle (GO_GRADLE) detector # The Go Gradle (GO_GRADLE) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if a gogradle.lock file is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses gogradle.lock for dependencies. The Go Mod Cli (GO_MOD) detector # The Go Mod Cli (GO_MOD) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if a go.mod file is found in your source directory. requires that the go executable is on the PATH. runs go list -m and go mod graph , and parses the output of both to discover dependencies. The Go Vendor (GO_VENDOR) detector # The Go Vendor (GO_VENDOR) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if the file vendor/vendor.json is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses vendor/vendor.json for dependencies. The Go Vndr (GO_VNDR) detector # The Go Vndr (GO_VNDR) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if the file vendor.conf is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses vendor.conf for dependencies.","title":"GoLang support"},{"location":"advanced/package-managers/golang/#golang-support","text":"Synopsys Detect has four detectors for GoLang: Go Lock (GO_DEP) detector Go Gradle (GO_GRADLE) detector Go Mod Cli (GO_MOD) detector Go Vendor (GO_VENDOR) detector Go Vndr (GO_VNDR) detector","title":"GoLang support"},{"location":"advanced/package-managers/golang/#go-lock-go_dep-detector","text":"The Go Lock (GO_DEP) detector: discovers dependencies of GoLang projects. attempts to run on your project if a Gopkg.lock file is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses Gopkg.lock for dependencies.","title":"Go Lock (GO_DEP) detector"},{"location":"advanced/package-managers/golang/#the-go-gradle-go_gradle-detector","text":"The Go Gradle (GO_GRADLE) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if a gogradle.lock file is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses gogradle.lock for dependencies.","title":"The Go Gradle (GO_GRADLE) detector"},{"location":"advanced/package-managers/golang/#the-go-mod-cli-go_mod-detector","text":"The Go Mod Cli (GO_MOD) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if a go.mod file is found in your source directory. requires that the go executable is on the PATH. runs go list -m and go mod graph , and parses the output of both to discover dependencies.","title":"The Go Mod Cli (GO_MOD) detector"},{"location":"advanced/package-managers/golang/#the-go-vendor-go_vendor-detector","text":"The Go Vendor (GO_VENDOR) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if the file vendor/vendor.json is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses vendor/vendor.json for dependencies.","title":"The Go Vendor (GO_VENDOR) detector"},{"location":"advanced/package-managers/golang/#the-go-vndr-go_vndr-detector","text":"The Go Vndr (GO_VNDR) detector: discovers dependencies of go language (GoLang) projects. attempts to run on your project if the file vendor.conf is found in your source directory. does not rely on external executables; for example, go, dep, and others. parses vendor.conf for dependencies.","title":"The Go Vndr (GO_VNDR) detector"},{"location":"advanced/package-managers/gradle/","text":"Gradle support # Synopsys Detect has two detectors for Gradle: Gradle inspector detector Gradle parse detector Gradle inspector detector # The Gradle inspector detector discovers dependencies of Gradle projects. The Gradle inspector detector attempts to run on your project if it finds a build.gradle file in the source directory (top level). The Gradle inspector detector also requires either gradlew or gradle: Synopsys Detect looks for gradlew in the source directory (top level). You can override this by setting the Gradle path property. If not overridden and not found: Synopsys Detect looks for gradle on $PATH. The Gradle inspector detector runs gradlew dependencies to get a list of the project's dependencies, and then parses the output. It consumes the output of gradlew dependencies with the help of a Gradle script ( init-detect.gradle ), which it usually downloads automatically. The file init-detect.gradle has a dependency DependencyGatherer that comes from https://github.com/blackducksoftware/integration-gradle-inspector. Filtering (including/excluding projects and configurations) is performed by this Gradle/Groovy code on the output of the gradlew dependencies command. Running the Gradle inspector with a proxy # Synopsys Detect will pass along supplied proxy host and proxy port properties to the Gradle daemon if applicable. Gradle parse detector # TBD","title":"Gradle support"},{"location":"advanced/package-managers/gradle/#gradle-support","text":"Synopsys Detect has two detectors for Gradle: Gradle inspector detector Gradle parse detector","title":"Gradle support"},{"location":"advanced/package-managers/gradle/#gradle-inspector-detector","text":"The Gradle inspector detector discovers dependencies of Gradle projects. The Gradle inspector detector attempts to run on your project if it finds a build.gradle file in the source directory (top level). The Gradle inspector detector also requires either gradlew or gradle: Synopsys Detect looks for gradlew in the source directory (top level). You can override this by setting the Gradle path property. If not overridden and not found: Synopsys Detect looks for gradle on $PATH. The Gradle inspector detector runs gradlew dependencies to get a list of the project's dependencies, and then parses the output. It consumes the output of gradlew dependencies with the help of a Gradle script ( init-detect.gradle ), which it usually downloads automatically. The file init-detect.gradle has a dependency DependencyGatherer that comes from https://github.com/blackducksoftware/integration-gradle-inspector. Filtering (including/excluding projects and configurations) is performed by this Gradle/Groovy code on the output of the gradlew dependencies command.","title":"Gradle inspector detector"},{"location":"advanced/package-managers/gradle/#running-the-gradle-inspector-with-a-proxy","text":"Synopsys Detect will pass along supplied proxy host and proxy port properties to the Gradle daemon if applicable.","title":"Running the Gradle inspector with a proxy"},{"location":"advanced/package-managers/gradle/#gradle-parse-detector","text":"TBD","title":"Gradle parse detector"},{"location":"advanced/package-managers/hex/","text":"Erlang/Hex/Rebar support # The Rebar detector discovers dependencies of Erlang projects that use the Hex package manager. The Rebar detector runs if Synopsys Detect finds a rebar.config file in your project. A rebar3 executable must be found on the PATH, or must be provided . The Rebar detector runs the rebar3 tree command and parses the output for dependency information.","title":"Erlang/Hex/Rebar support"},{"location":"advanced/package-managers/hex/#erlanghexrebar-support","text":"The Rebar detector discovers dependencies of Erlang projects that use the Hex package manager. The Rebar detector runs if Synopsys Detect finds a rebar.config file in your project. A rebar3 executable must be found on the PATH, or must be provided . The Rebar detector runs the rebar3 tree command and parses the output for dependency information.","title":"Erlang/Hex/Rebar support"},{"location":"advanced/package-managers/lerna/","text":"Lerna support # The Lerna detector will register in the presence of a lerna.json file. It will then execute a lerna command to retrieve all the packages defined in the project. Each package has a location within the project structure. It is expected to find a package.json and some type of lock file. Supported lockfile types are package-lock.json, npm-shrinkwrap.json, and yarn.lock. If no lockfile is present in the package, it will be assumed that all the dependencies defined within the package's package.json file will be resolved in the lockfile at the root of the project. If no lockfile is present at the root of the project, Lerna extraction will fail. Extracting from package-lock.json # The Lerna detect will execute the same code as the NPM package lock detector . The NPM package lock detector related properties also apply. Since the Lerna detector is currently not using the NPM Cli, only the detect.npm.include.dev.dependencies property applies. Extracting from npm-shrinkwrap.json # The Lerna detect will execute the same code as the NPM shrinkwrap detector . The NPM shrinkwrap detector related properties also apply. Since the Lerna detector is currently not using the NPM Cli, only the detect.npm.include.dev.dependencies property applies. Extracting from yarn.lock # The Lerna detect will execute the same code as the Yarn detector . The Yarn detector related properties also apply. Private packages # With the detect.lerna.include.private property, users can specify whether or not to include private packages as defined by Lerna. Lerna path # Synopsys Detect executes commands against the Lerna executable to determine package information. Synopsys Detect will attempt to find the Lerna executable, but if the user wishes to override the executable Detect uses, they can supply a path to the executable using detect.lerna.path","title":"Lerna support"},{"location":"advanced/package-managers/lerna/#lerna-support","text":"The Lerna detector will register in the presence of a lerna.json file. It will then execute a lerna command to retrieve all the packages defined in the project. Each package has a location within the project structure. It is expected to find a package.json and some type of lock file. Supported lockfile types are package-lock.json, npm-shrinkwrap.json, and yarn.lock. If no lockfile is present in the package, it will be assumed that all the dependencies defined within the package's package.json file will be resolved in the lockfile at the root of the project. If no lockfile is present at the root of the project, Lerna extraction will fail.","title":"Lerna support"},{"location":"advanced/package-managers/lerna/#extracting-from-package-lockjson","text":"The Lerna detect will execute the same code as the NPM package lock detector . The NPM package lock detector related properties also apply. Since the Lerna detector is currently not using the NPM Cli, only the detect.npm.include.dev.dependencies property applies.","title":"Extracting from package-lock.json"},{"location":"advanced/package-managers/lerna/#extracting-from-npm-shrinkwrapjson","text":"The Lerna detect will execute the same code as the NPM shrinkwrap detector . The NPM shrinkwrap detector related properties also apply. Since the Lerna detector is currently not using the NPM Cli, only the detect.npm.include.dev.dependencies property applies.","title":"Extracting from npm-shrinkwrap.json"},{"location":"advanced/package-managers/lerna/#extracting-from-yarnlock","text":"The Lerna detect will execute the same code as the Yarn detector . The Yarn detector related properties also apply.","title":"Extracting from yarn.lock"},{"location":"advanced/package-managers/lerna/#private-packages","text":"With the detect.lerna.include.private property, users can specify whether or not to include private packages as defined by Lerna.","title":"Private packages"},{"location":"advanced/package-managers/lerna/#lerna-path","text":"Synopsys Detect executes commands against the Lerna executable to determine package information. Synopsys Detect will attempt to find the Lerna executable, but if the user wishes to override the executable Detect uses, they can supply a path to the executable using detect.lerna.path","title":"Lerna path"},{"location":"advanced/package-managers/maven/","text":"Maven support # Synopsys Detect has two detectors for Maven: Maven Pom detector Maven Parse detector Maven Pom detector # The Maven Pom detector discovers dependencies of Maven projects. The Maven Pom detector attempts to run on your project if it finds a pom.xml file in the source directory (top level). The Maven Pom detector also requires either mvnw or mvn: Synopsys Detect looks for mvnw in the source directory (top level). You can override this by setting the Maven path property. If not overridden and not found: Synopsys Detect looks for mvn on $PATH. The Maven Pom detector runs mvn dependency:tree to get a list of the project's dependencies and then parses the output. Scope inclusion/exclusion is performed during the parsing of the output of the mvn dependency:tree command. When a component of an included scope is found under a component of an excluded scope, it is added to the BOM under a top level placeholder component named Additional_Components . Maven Parse detector # TBD","title":"Maven support"},{"location":"advanced/package-managers/maven/#maven-support","text":"Synopsys Detect has two detectors for Maven: Maven Pom detector Maven Parse detector","title":"Maven support"},{"location":"advanced/package-managers/maven/#maven-pom-detector","text":"The Maven Pom detector discovers dependencies of Maven projects. The Maven Pom detector attempts to run on your project if it finds a pom.xml file in the source directory (top level). The Maven Pom detector also requires either mvnw or mvn: Synopsys Detect looks for mvnw in the source directory (top level). You can override this by setting the Maven path property. If not overridden and not found: Synopsys Detect looks for mvn on $PATH. The Maven Pom detector runs mvn dependency:tree to get a list of the project's dependencies and then parses the output. Scope inclusion/exclusion is performed during the parsing of the output of the mvn dependency:tree command. When a component of an included scope is found under a component of an excluded scope, it is added to the BOM under a top level placeholder component named Additional_Components .","title":"Maven Pom detector"},{"location":"advanced/package-managers/maven/#maven-parse-detector","text":"TBD","title":"Maven Parse detector"},{"location":"advanced/package-managers/npm/","text":"npm support # Synopsys Detect has the following npm detectors: npm package lock detector npm package shrinkwrap detector npm package JSON detector npm CLI detector npm package lock # The npm package lock is the preferred npm detector and runs when it finds a package-lock.json generated by npm. npm automatically generates the package-lock.json after an npm install which should be run prior to scanning. This is the most accurate way Synopsys Detect supports npm as lock file contains resolved versions and all transitives. npm shrinkwrap # The npm shrinkwrap detector uses the npm-shrinkwrap.json file. It is the same as a package-lock.json but is a publishable lockfile. Synopsys Detect always chooses shrinkwrap over package lock. npm detector # The npm CLI detector requires a package.json and an npm executable. It executes npm -ls json , and verifies that it succeeded by ensuring that no messages were written to stderr, and that the exit code was 0. If both conditions are met, it parses the output for dependencies. If npm -ls json does write messages to stderr (for example, lint messages) that you would like Synopsys Detect to ignore, you can silence errors by adding the --silent npm argument to the npm command using Synopsys Detect property --detect.npm.arguments. This detector is only invoked if the other npm detectors are not invoked, and generating lockfiles for the other detectors should be preferred. npm package JSON # The npm CLI detector is the fallback when in Build mode. When in buildless the fallback detector is npm package JSON. This is the least accurate of the npm detectors. It requires and parses a package.json file. It does not find transitives and only reports the wild-card version present in the file.","title":"npm support"},{"location":"advanced/package-managers/npm/#npm-support","text":"Synopsys Detect has the following npm detectors: npm package lock detector npm package shrinkwrap detector npm package JSON detector npm CLI detector","title":"npm support"},{"location":"advanced/package-managers/npm/#npm-package-lock","text":"The npm package lock is the preferred npm detector and runs when it finds a package-lock.json generated by npm. npm automatically generates the package-lock.json after an npm install which should be run prior to scanning. This is the most accurate way Synopsys Detect supports npm as lock file contains resolved versions and all transitives.","title":"npm package lock"},{"location":"advanced/package-managers/npm/#npm-shrinkwrap","text":"The npm shrinkwrap detector uses the npm-shrinkwrap.json file. It is the same as a package-lock.json but is a publishable lockfile. Synopsys Detect always chooses shrinkwrap over package lock.","title":"npm shrinkwrap"},{"location":"advanced/package-managers/npm/#npm-detector","text":"The npm CLI detector requires a package.json and an npm executable. It executes npm -ls json , and verifies that it succeeded by ensuring that no messages were written to stderr, and that the exit code was 0. If both conditions are met, it parses the output for dependencies. If npm -ls json does write messages to stderr (for example, lint messages) that you would like Synopsys Detect to ignore, you can silence errors by adding the --silent npm argument to the npm command using Synopsys Detect property --detect.npm.arguments. This detector is only invoked if the other npm detectors are not invoked, and generating lockfiles for the other detectors should be preferred.","title":"npm  detector"},{"location":"advanced/package-managers/npm/#npm-package-json","text":"The npm CLI detector is the fallback when in Build mode. When in buildless the fallback detector is npm package JSON. This is the least accurate of the npm detectors. It requires and parses a package.json file. It does not find transitives and only reports the wild-card version present in the file.","title":"npm package JSON"},{"location":"advanced/package-managers/nuget/","text":"NuGet support # The NuGet detectors can discover dependencies of NuGet projects. Overview # There are two Nuget detectors: the NuGet solution detector, and the NuGet project detector. Each detector runs one of three available inspectors: the new DotNet 3.1 inspector, the DotNet inspector (for DotNet 2.1 runtime), or the old Classic inspector (aka exe inspector). On non-Windows systems: The DotNet 3.1 and DotNet inspectors are supported. A dotnet executable is required. On Windows systems: All inspectors (DotNet 3.1, DotNet, and Classic) are supported. A dotnet executable is not required. If no dotnet executable is found, Synopsys Detect runs the Classic inspector. By default, Synopsys Detect looks for dotnet on $PATH. You can override this by setting the dotnet path property to point to your dotnet executable. The NuGet detectors do not work with mono. DotNet 3.1 inspector # Source: https://github.com/blackducksoftware/nuget-dotnet3-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/NugetDotnet3Inspector/ Runtime: DotNet 3.1 Requires: .NET framework version 4.5 DotNet inspector # Source: https://github.com/blackducksoftware/blackduck-nuget-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/BlackduckNugetInspector/ Runtime: DotNet 2.1 Requires: .NET framework version 4.5 Classic inspector # Source: https://github.com/blackducksoftware/integration-nuget-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/IntegrationNugetInspector/ Operation # Each inspector (DotNet 3.1, DotNet, and Classic) supports two detectors: NuGet solution detector, and NuGet project detector. The NuGet solution detector derives packages (dependencies) from solution (.sln) files. The Nuget project detector derives packages (dependencies) from project (.csproj, .fsproj, etc.) files. The supported project files are: // C# *.csproj , // F# *.fsproj , // VB *.vbproj , // Azure Stream Analytics *.asaproj , // Docker Compose *.dcproj , // Shared Projects *.shproj , // Cloud Computing *.ccproj , // Fabric Application *.sfproj , // Node.js *.njsproj , // VC++ *.vcxproj , // VC++ *.vcproj , // .NET Core *.xproj , // Python *.pyproj , // Hive *.hiveproj , // Pig *.pigproj , // JavaScript *.jsproj , // U-SQL *.usqlproj , // Deployment *.deployproj , // Common Project System Files *.msbuildproj , // SQL *.sqlproj , // SQL Project Files *.dbproj , // RStudio *.rproj The NuGet solution detector runs if one or more solution (.sln) files are found. The NuGet Project detector runs if no solution files are found, and one or more project files are found. Refer to the preceding list of project file types. The NuGet detectors run the appropriate inspector (dotnet 3.1: NugetDotnet3Inspector, dotnet 2.1: BlackduckNugetInspector, or classic: IntegrationNugetInspector), which it normally downloads automatically. The NuGet inspectors derive dependency information from the first type of file in this order: 1. packages.config 2. project.lock.json 3. project.assets.json 4. project.json 5. XML of the project file After discovering dependencies, the dotnet inspector (NugetDotnet3Inspector or BlackduckNugetInspector) and the classic inspector (IntegrationNugetInspector) use NuGet client libraries to collect further information about the dependencies and write it to a JSON file ( projectname _inspection.json ). Synopsys Detect then parses that file for the dependency information.","title":"NuGet support"},{"location":"advanced/package-managers/nuget/#nuget-support","text":"The NuGet detectors can discover dependencies of NuGet projects.","title":"NuGet support"},{"location":"advanced/package-managers/nuget/#overview","text":"There are two Nuget detectors: the NuGet solution detector, and the NuGet project detector. Each detector runs one of three available inspectors: the new DotNet 3.1 inspector, the DotNet inspector (for DotNet 2.1 runtime), or the old Classic inspector (aka exe inspector). On non-Windows systems: The DotNet 3.1 and DotNet inspectors are supported. A dotnet executable is required. On Windows systems: All inspectors (DotNet 3.1, DotNet, and Classic) are supported. A dotnet executable is not required. If no dotnet executable is found, Synopsys Detect runs the Classic inspector. By default, Synopsys Detect looks for dotnet on $PATH. You can override this by setting the dotnet path property to point to your dotnet executable. The NuGet detectors do not work with mono.","title":"Overview"},{"location":"advanced/package-managers/nuget/#dotnet-31-inspector","text":"Source: https://github.com/blackducksoftware/nuget-dotnet3-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/NugetDotnet3Inspector/ Runtime: DotNet 3.1 Requires: .NET framework version 4.5","title":"DotNet 3.1 inspector"},{"location":"advanced/package-managers/nuget/#dotnet-inspector","text":"Source: https://github.com/blackducksoftware/blackduck-nuget-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/BlackduckNugetInspector/ Runtime: DotNet 2.1 Requires: .NET framework version 4.5","title":"DotNet inspector"},{"location":"advanced/package-managers/nuget/#classic-inspector","text":"Source: https://github.com/blackducksoftware/integration-nuget-inspector Binary: https://sig-repo.synopsys.com/bds-integrations-nuget-release/IntegrationNugetInspector/","title":"Classic inspector"},{"location":"advanced/package-managers/nuget/#operation","text":"Each inspector (DotNet 3.1, DotNet, and Classic) supports two detectors: NuGet solution detector, and NuGet project detector. The NuGet solution detector derives packages (dependencies) from solution (.sln) files. The Nuget project detector derives packages (dependencies) from project (.csproj, .fsproj, etc.) files. The supported project files are: // C# *.csproj , // F# *.fsproj , // VB *.vbproj , // Azure Stream Analytics *.asaproj , // Docker Compose *.dcproj , // Shared Projects *.shproj , // Cloud Computing *.ccproj , // Fabric Application *.sfproj , // Node.js *.njsproj , // VC++ *.vcxproj , // VC++ *.vcproj , // .NET Core *.xproj , // Python *.pyproj , // Hive *.hiveproj , // Pig *.pigproj , // JavaScript *.jsproj , // U-SQL *.usqlproj , // Deployment *.deployproj , // Common Project System Files *.msbuildproj , // SQL *.sqlproj , // SQL Project Files *.dbproj , // RStudio *.rproj The NuGet solution detector runs if one or more solution (.sln) files are found. The NuGet Project detector runs if no solution files are found, and one or more project files are found. Refer to the preceding list of project file types. The NuGet detectors run the appropriate inspector (dotnet 3.1: NugetDotnet3Inspector, dotnet 2.1: BlackduckNugetInspector, or classic: IntegrationNugetInspector), which it normally downloads automatically. The NuGet inspectors derive dependency information from the first type of file in this order: 1. packages.config 2. project.lock.json 3. project.assets.json 4. project.json 5. XML of the project file After discovering dependencies, the dotnet inspector (NugetDotnet3Inspector or BlackduckNugetInspector) and the classic inspector (IntegrationNugetInspector) use NuGet client libraries to collect further information about the dependencies and write it to a JSON file ( projectname _inspection.json ). Synopsys Detect then parses that file for the dependency information.","title":"Operation"},{"location":"advanced/package-managers/python/","text":"Python support # Synopsys Detect has three detectors for Python: Pip detector Pipenv detector Poetry detector The Pip detector # The Pip detector discovers dependencies of Python projects. The Pip detector attempts to run on your project if either a setup.py file is found, or a requirements.txt file is provided using the --detect.pip.requirements.path property. The Pip detector also requires Python and pip executables: Synopsys Detect looks for python (or python3 if the python3 property is set to true) on $PATH. You can override this by setting the python path property. Synopsys Detect looks for pip (or pip3 if the python3 property is set to true) on $PATH. The Pip detector runs the pip-inspector.py script , which uses Python/pip libraries to query the pip cache for the project, which may or may not be a virtual environment, for dependency information: pip-inspector.py queries for the project dependencies by project name which can be discovered using setup.py, or provided using the detect.pip.project.name property, using the pkg_resources library . If your project is installed into the pip cache, this discovers dependencies specified in setup.py. If a requirements.txt file is provided, pip-inspector.py uses the Python API called parse_requirements to query the requirements.txt file for possible additional dependencies, and uses the pkg_resources library to query for the details of each. The parse_requirements API is unstable, leading to the decision to deprecate this detector. Ramifications of this approach: Because pip-inspector.py uses the pkg_resources library to discover dependencies, only those packages which have been installed; using, for example, pip install , into the pip cache; in other words, appearing in the output of pip list , are included in the output. There must be a match between the package version on which your project depends and the package version installed in the pip cache. Additional details are available in the pkg_resources library documentation . If the packages are installed into a virtual environment for your project, you must run Synopsys Detect from within that virtual environment. Recommendations: Be sure that Synopsys Detect is finding the correct Python executable; this can be done by running the logging level at DEBUG and then reading the log. This is a particular concern if your system has multiple versions of Python installed; you must be sure Synopsys Detect is using the correct Python version. Create a setup.py file for your project. Install your project and dependencies into the pip cache: python setup.py install pip install -r requirements.txt The Pip detector derives your project name using your setup.py file if you have one. If you do not have a setup.py file, you must provide the correct project name using the propety --detect.pip.project.name. If there are any dependencies specified in requirements.txt that are not specified in setup.py, then provide the requirements.txt file using the Synopsys Detect property. If you are using a virtual environment, be sure to switch to that virtual environment when you run Synopsys Detect. This also applies when you are using a tool such as Poetry that sets up a Python virtual environment. Pipenv detector # The Pipenv detector discovers dependencies of Python projects. The Pipenv detector attempts to run on your project if either of the following is true: A Pipfile is found. A Pipfile.lock file is found. The Pipenv detector also requires Python and Pipenv executables: Synopsys Detect looks for python (or python3 if the python3 property is set to true) on $PATH. You can override this by setting the python path property. Synopsys Detect looks for pipenv on $PATH. The Pipenv detector runs pipenv run pip freeze and pipenv graph --bare --json-tree and derives dependency information from the output. The dependency hierarchy is derived from the output of pipenv graph --bare --json-tree . The output of pipenv run pip freeze is used to improve the accuracy of dependency versions. To troubleshoot of the Pipenv detector, start by running pipenv graph --bare --json-tree , and making sure that the output looks correct since this is the basis from which Synopsys Detect constructs the BDIO. If the output of pipenv graph --bare --json-tree does not look correct, make sure the packages (dependencies) are installed into the Pipenv virtual environment ( pipenv install ). Poetry detector # The Poetry detector discovers dependencies of Python projects. The Poetry detector attempts to run on your project if either of the following is true: A poetry.lock file is found. A pyproject.toml file is found. The Poetry detector parses poetry.lock for dependency information. If the detector discovers a pyproject.toml file but not a poetry.lock file, it will prompt the user to generate a poetry.lock by running poetry install and then run Detect again. If the Poetry detector extracts the project's name and version from the pyproject.toml file. If it does not find a pyproject.toml file, it will defer to values derived by git, from the project's directory, or defaults.","title":"Python support"},{"location":"advanced/package-managers/python/#python-support","text":"Synopsys Detect has three detectors for Python: Pip detector Pipenv detector Poetry detector","title":"Python support"},{"location":"advanced/package-managers/python/#the-pip-detector","text":"The Pip detector discovers dependencies of Python projects. The Pip detector attempts to run on your project if either a setup.py file is found, or a requirements.txt file is provided using the --detect.pip.requirements.path property. The Pip detector also requires Python and pip executables: Synopsys Detect looks for python (or python3 if the python3 property is set to true) on $PATH. You can override this by setting the python path property. Synopsys Detect looks for pip (or pip3 if the python3 property is set to true) on $PATH. The Pip detector runs the pip-inspector.py script , which uses Python/pip libraries to query the pip cache for the project, which may or may not be a virtual environment, for dependency information: pip-inspector.py queries for the project dependencies by project name which can be discovered using setup.py, or provided using the detect.pip.project.name property, using the pkg_resources library . If your project is installed into the pip cache, this discovers dependencies specified in setup.py. If a requirements.txt file is provided, pip-inspector.py uses the Python API called parse_requirements to query the requirements.txt file for possible additional dependencies, and uses the pkg_resources library to query for the details of each. The parse_requirements API is unstable, leading to the decision to deprecate this detector. Ramifications of this approach: Because pip-inspector.py uses the pkg_resources library to discover dependencies, only those packages which have been installed; using, for example, pip install , into the pip cache; in other words, appearing in the output of pip list , are included in the output. There must be a match between the package version on which your project depends and the package version installed in the pip cache. Additional details are available in the pkg_resources library documentation . If the packages are installed into a virtual environment for your project, you must run Synopsys Detect from within that virtual environment. Recommendations: Be sure that Synopsys Detect is finding the correct Python executable; this can be done by running the logging level at DEBUG and then reading the log. This is a particular concern if your system has multiple versions of Python installed; you must be sure Synopsys Detect is using the correct Python version. Create a setup.py file for your project. Install your project and dependencies into the pip cache: python setup.py install pip install -r requirements.txt The Pip detector derives your project name using your setup.py file if you have one. If you do not have a setup.py file, you must provide the correct project name using the propety --detect.pip.project.name. If there are any dependencies specified in requirements.txt that are not specified in setup.py, then provide the requirements.txt file using the Synopsys Detect property. If you are using a virtual environment, be sure to switch to that virtual environment when you run Synopsys Detect. This also applies when you are using a tool such as Poetry that sets up a Python virtual environment.","title":"The Pip detector"},{"location":"advanced/package-managers/python/#pipenv-detector","text":"The Pipenv detector discovers dependencies of Python projects. The Pipenv detector attempts to run on your project if either of the following is true: A Pipfile is found. A Pipfile.lock file is found. The Pipenv detector also requires Python and Pipenv executables: Synopsys Detect looks for python (or python3 if the python3 property is set to true) on $PATH. You can override this by setting the python path property. Synopsys Detect looks for pipenv on $PATH. The Pipenv detector runs pipenv run pip freeze and pipenv graph --bare --json-tree and derives dependency information from the output. The dependency hierarchy is derived from the output of pipenv graph --bare --json-tree . The output of pipenv run pip freeze is used to improve the accuracy of dependency versions. To troubleshoot of the Pipenv detector, start by running pipenv graph --bare --json-tree , and making sure that the output looks correct since this is the basis from which Synopsys Detect constructs the BDIO. If the output of pipenv graph --bare --json-tree does not look correct, make sure the packages (dependencies) are installed into the Pipenv virtual environment ( pipenv install ).","title":"Pipenv detector"},{"location":"advanced/package-managers/python/#poetry-detector","text":"The Poetry detector discovers dependencies of Python projects. The Poetry detector attempts to run on your project if either of the following is true: A poetry.lock file is found. A pyproject.toml file is found. The Poetry detector parses poetry.lock for dependency information. If the detector discovers a pyproject.toml file but not a poetry.lock file, it will prompt the user to generate a poetry.lock by running poetry install and then run Detect again. If the Poetry detector extracts the project's name and version from the pyproject.toml file. If it does not find a pyproject.toml file, it will defer to values derived by git, from the project's directory, or defaults.","title":"Poetry detector"},{"location":"advanced/package-managers/yarn/","text":"Yarn support # Synopsys Detect runs the Yarn detector if it finds both of the following files in your project: yarn.lock package.json The Yarn detector reads both files and derives project and dependency information from their contents. Yarn Workspace Support # Synopsys Detect does not currently support Yarn workspaces as defined here .","title":"Yarn support"},{"location":"advanced/package-managers/yarn/#yarn-support","text":"Synopsys Detect runs the Yarn detector if it finds both of the following files in your project: yarn.lock package.json The Yarn detector reads both files and derives project and dependency information from their contents.","title":"Yarn support"},{"location":"advanced/package-managers/yarn/#yarn-workspace-support","text":"Synopsys Detect does not currently support Yarn workspaces as defined here .","title":"Yarn Workspace Support"},{"location":"advanced/package-managers/yocto-bitbake/","text":"Yocto (BitBake) # The BitBake detector discovers dependencies of custom Linux distribution projects built using Yocto versions 2.0 through 3.0. The BitBake detector attempts to run on your project if all of the following are true: A build environment init script (typically oe-init-build-env ) is found in the source directory. You provide at least one package name (target image name) using the BitBake package names property. Synopsys Detect will not run the Bitbake detector if this property is not set. The BitBake detector attempts to source the oe-init-build-env file on your behalf. The BitBake detector also requires a bash executable, which it looks for on $PATH. You can override this by setting the bash path property. The BitBake detector does the following for each provided recipe name: The detector sources the build environment setup script and executes bitbake -g {package-name} to generate a dependency file recipe-depends.dot that it parses for dependency information. It also uses bitbake-layers show-recipes to gather layer information. Troubleshooting Tips # Missing components for projects using the Yocto Package Revision Service # Symptom: Components are missing from the Black Duck BOM. Problem: The Yocto Package Revision Service can increment a package revision to a value not present in the Black Duck Knowledge Base, causing a package to fail to match.","title":"Yocto (BitBake)"},{"location":"advanced/package-managers/yocto-bitbake/#yocto-bitbake","text":"The BitBake detector discovers dependencies of custom Linux distribution projects built using Yocto versions 2.0 through 3.0. The BitBake detector attempts to run on your project if all of the following are true: A build environment init script (typically oe-init-build-env ) is found in the source directory. You provide at least one package name (target image name) using the BitBake package names property. Synopsys Detect will not run the Bitbake detector if this property is not set. The BitBake detector attempts to source the oe-init-build-env file on your behalf. The BitBake detector also requires a bash executable, which it looks for on $PATH. You can override this by setting the bash path property. The BitBake detector does the following for each provided recipe name: The detector sources the build environment setup script and executes bitbake -g {package-name} to generate a dependency file recipe-depends.dot that it parses for dependency information. It also uses bitbake-layers show-recipes to gather layer information.","title":"Yocto (BitBake)"},{"location":"advanced/package-managers/yocto-bitbake/#troubleshooting-tips","text":"","title":"Troubleshooting Tips"},{"location":"advanced/package-managers/yocto-bitbake/#missing-components-for-projects-using-the-yocto-package-revision-service","text":"Symptom: Components are missing from the Black Duck BOM. Problem: The Yocto Package Revision Service can increment a package revision to a value not present in the Black Duck Knowledge Base, causing a package to fail to match.","title":"Missing components for projects using the Yocto Package Revision Service"},{"location":"advanced/troubleshooting/exit-codes/","text":"Exit Code Key Value Description SUCCESS 0 Detect exited successfully. FAILURE_BLACKDUCK_CONNECTIVITY 1 Detect was unable to connect to Black Duck. Check your configuration and connection. FAILURE_TIMEOUT 2 Detect was unable to wait for actions to be completed on Black Duck. Check your Black Duck server or increase your timeout. FAILURE_POLICY_VIOLATION 3 Detect found policy violations. FAILURE_PROXY_CONNECTIVITY 4 Detect was unable to use the configured proxy. Check your configuration and connection. FAILURE_DETECTOR 5 Detect had one or more detector failures while extracting dependencies. Check that all projects build and your environment is configured correctly. FAILURE_SCAN 6 Detect was unable to run the signature scanner against your source. Check your configuration. FAILURE_CONFIGURATION 7 Detect was unable to start due to issues with it's configuration. Check and fix your configuration. FAILURE_DETECTOR_REQUIRED 9 Detect did not run all of the required detectors. Fix detector issues or disable required detectors. FAILURE_BLACKDUCK_VERSION_NOT_SUPPORTED 10 Detect attempted an operation that was not supported by your version of Black Duck. Ensure your Black Duck is compatible with this version of detect. FAILURE_BLACKDUCK_FEATURE_ERROR 11 Detect encountered an error while attempting an operation on Black Duck. Ensure your Black Duck is compatible with this version of detect. FAILURE_POLARIS_CONNECTIVITY 12 Detect was unable to connect to Polaris. Check your configuration and connection. FAILURE_GENERAL_ERROR 99 Detect encountered a known error, details of the error are provided. FAILURE_UNKNOWN_ERROR 100 Detect encountered an unknown error.","title":"Exit codes"},{"location":"advanced/troubleshooting/general-troubleshooting/","text":"Troubleshooting tips # Troubleshooting best practices # Run Synopsys Detect with --logging.level.com.synopsys.integration=DEBUG (the default logging level, INFO, is insufficient for troubleshooting) and read through the entire log for clues. Synopsys Detect typically runs package manager commands or build tool commands similar to commands used in your build. When run by Synopsys Detect, those commands (as well as the environment in which they run) need to be consistent with your build, and it's important to verify that they are. For example, the Gradle detector defaults to running ./gradlew dependencies if it finds the file ./gradlew. If your build runs a different Gradle command or wrapper (say, /usr/local/bin/gradle), use property detect.gradle.path to tell Synopsys Detect to run the same Gradle command that your build runs. Check a DEBUG log for the package manager commands that Synopsys Detect is running, and compare them to the commands your build runs. For more troubleshooting information: Run Synopsys Detect with --detect.diagnostic=true . This will generate a diagnostic zip that contains many useful intermediate files and logs, including the generated BDIO (.jsonld) files and Black Duck Signature Scanner logs. For even more troubleshooting information: Run Synopsys Detect with --detect.diagnostic.extended=true . This will generate an extended diagnostic zip that will also include lock files and build artifacts when appropriate. See if you can reproduce the problem using the latest version of Synopsys Detect with the latest version of Black Duck. If not, the problem may be either fixed, or due to incompatible Synopsys Detect / Black Duck versions. Remember to consider the possibility that the Black Duck user lacks the necessary permissions (to create the project, update the BOM, receive notifications, etc.) in Black Duck. For more information, see Black Duck user role requirements . Remember to consider the possibility that the Black Duck server (registration key) may not have required capabilities enabled (binary upload, snippet scanning, etc.). For issues related to tools invoked by Synopsys Detect (Black Duck Signature Scanner, Docker Inspector, etc.), please check that tool's documentation. For issues related to incorrect components in the Black Duck BOM: Synopsys Detect has a great deal of control over matches produced by detectors (that are written to BDIO/.jsonld files), but no control over matches produced by the Black Duck Signature Scanner. When investigating an incorrect component in a Black Duck BOM, you need to determine whether the component was contributed by a detector, or by the Black Duck Signature Scanner: On the Black Duck Components tab for the project/version: Click on the \"N Matches\" link next to the component. The next screen lists the matches on the right side. Matches from the Black Duck Signature Scanner have a filename in the Name column. Matches from detectors have an external ID (such as \"org.hamcrest:hamcrest-core:1.3\") in the Name column. For issues related to components missing from or or incorrectly categorized in the Black Duck BOM: Synopsys Detect has a great deal of control over the production of .jsonld files (use --detect.diagnostic to save these), but no control over how they are converted into a BOM by Black Duck. A good first step is to determine whether the .jsonld files produced are correct. If they are incorrect, the problem is related to what Synopsys Detect is doing. If they are correct, but the BOM is incorrect, the problem is related to what Black Duck is doing. Similarly, Synopsys Detect is responsible for passing the correct arguments to the Black Duck Signature Scanner, but has little control over the results it produces. Synopsys Detect is a Spring Boot application, and leverages Spring Boot to provide various mechanism to configure it through property settings: https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html. This flexibility comes with a risk: it's possible for Synopsys Detect to be influenced by files (application.properties, application.xml) that may exist in the directory from which Synopsys Detect is run that are intended for some other application. This can produce some strange results. If properties have unexpected values (see the Synopsys Detect log), this is a possibility worth considering. The best solution may be simply to run Synopsys Detect from a different (ideally empty) directory (use the --detect.source.path argument). Similarly, Synopsys Detect can be influenced by environment variables via the same Spring Boot mechanism, so it's worth checking the environment for variables that correspond to Synopsys Detect property names. Diagnostic mode # Synopsys Detect's diagnostic mode automatically enabled debug logging (where possible), saves all output (logs and inspector files) to a zip file, and notifies you of the location of the zip. Diagnostic mode properties are: --detect.diagnostic : When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. --detect.diagnostic.extended : When enabled, Synopsys Detect collects relevant files such as lock files and build artifacts. The zip file is created inside the Synopsys Detect output directory, and must be provided when support issues are opened. Synopsys does not recommend keeping this option on, as it does not clean up the zip file(s); regardless of the Synopsys Detect cleanup flag. Diagnostic mode: Sets the output log level to DEBUG. Zips the entire run directory of Synopsys Detect which includes: All BDIO files created by Synopsys Detect. Any intermediary files generated by Synopsys Detect, such as Gradle inspector output files. Includes any additional reports Synopsys Detect might make such as dependency counts. Additionally --detect.diagnostic or --detect.diagnostic.extended includes additional relevant files such as: Npm package locks. vendor.config. C/C++ compilation database. The property --detect.diagnostic.extended, when set to true, enables the collection of relevant files that are not generated by Synopsys Detect; for example, lock files. By default, diagnostic mode only includes files generated by Synopsys Detect where --detect.diagnostic.extended might include files it finds. For example, a package.lock that is too deep for Synopsys Detect's search depth is not included, or a package.lock that was not parsed due to exclusion. After running a scan with diagnostic mode, results similar to the following display in your output. 2019-03-29 09:32:02 INFO [main] --- Creating diagnostics zip. 2019-03-29 09:32:02 INFO [main] --- Diagnostics zip location: C:\\detect\\blackduck\\runs\\detect-run-2019-03-29-13-31-50-492.zip 2019-03-29 09:32:03 INFO [main] --- Diagnostics file created at: C:detect\\blackduck\\runs\\detect-run-2019-03-29-13-31-50-492.zip 2019-03-29 09:32:03 INFO [main] --- Diagnostic mode has completed.","title":"Troubleshooting tips"},{"location":"advanced/troubleshooting/general-troubleshooting/#troubleshooting-tips","text":"","title":"Troubleshooting tips"},{"location":"advanced/troubleshooting/general-troubleshooting/#troubleshooting-best-practices","text":"Run Synopsys Detect with --logging.level.com.synopsys.integration=DEBUG (the default logging level, INFO, is insufficient for troubleshooting) and read through the entire log for clues. Synopsys Detect typically runs package manager commands or build tool commands similar to commands used in your build. When run by Synopsys Detect, those commands (as well as the environment in which they run) need to be consistent with your build, and it's important to verify that they are. For example, the Gradle detector defaults to running ./gradlew dependencies if it finds the file ./gradlew. If your build runs a different Gradle command or wrapper (say, /usr/local/bin/gradle), use property detect.gradle.path to tell Synopsys Detect to run the same Gradle command that your build runs. Check a DEBUG log for the package manager commands that Synopsys Detect is running, and compare them to the commands your build runs. For more troubleshooting information: Run Synopsys Detect with --detect.diagnostic=true . This will generate a diagnostic zip that contains many useful intermediate files and logs, including the generated BDIO (.jsonld) files and Black Duck Signature Scanner logs. For even more troubleshooting information: Run Synopsys Detect with --detect.diagnostic.extended=true . This will generate an extended diagnostic zip that will also include lock files and build artifacts when appropriate. See if you can reproduce the problem using the latest version of Synopsys Detect with the latest version of Black Duck. If not, the problem may be either fixed, or due to incompatible Synopsys Detect / Black Duck versions. Remember to consider the possibility that the Black Duck user lacks the necessary permissions (to create the project, update the BOM, receive notifications, etc.) in Black Duck. For more information, see Black Duck user role requirements . Remember to consider the possibility that the Black Duck server (registration key) may not have required capabilities enabled (binary upload, snippet scanning, etc.). For issues related to tools invoked by Synopsys Detect (Black Duck Signature Scanner, Docker Inspector, etc.), please check that tool's documentation. For issues related to incorrect components in the Black Duck BOM: Synopsys Detect has a great deal of control over matches produced by detectors (that are written to BDIO/.jsonld files), but no control over matches produced by the Black Duck Signature Scanner. When investigating an incorrect component in a Black Duck BOM, you need to determine whether the component was contributed by a detector, or by the Black Duck Signature Scanner: On the Black Duck Components tab for the project/version: Click on the \"N Matches\" link next to the component. The next screen lists the matches on the right side. Matches from the Black Duck Signature Scanner have a filename in the Name column. Matches from detectors have an external ID (such as \"org.hamcrest:hamcrest-core:1.3\") in the Name column. For issues related to components missing from or or incorrectly categorized in the Black Duck BOM: Synopsys Detect has a great deal of control over the production of .jsonld files (use --detect.diagnostic to save these), but no control over how they are converted into a BOM by Black Duck. A good first step is to determine whether the .jsonld files produced are correct. If they are incorrect, the problem is related to what Synopsys Detect is doing. If they are correct, but the BOM is incorrect, the problem is related to what Black Duck is doing. Similarly, Synopsys Detect is responsible for passing the correct arguments to the Black Duck Signature Scanner, but has little control over the results it produces. Synopsys Detect is a Spring Boot application, and leverages Spring Boot to provide various mechanism to configure it through property settings: https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html. This flexibility comes with a risk: it's possible for Synopsys Detect to be influenced by files (application.properties, application.xml) that may exist in the directory from which Synopsys Detect is run that are intended for some other application. This can produce some strange results. If properties have unexpected values (see the Synopsys Detect log), this is a possibility worth considering. The best solution may be simply to run Synopsys Detect from a different (ideally empty) directory (use the --detect.source.path argument). Similarly, Synopsys Detect can be influenced by environment variables via the same Spring Boot mechanism, so it's worth checking the environment for variables that correspond to Synopsys Detect property names.","title":"Troubleshooting best practices"},{"location":"advanced/troubleshooting/general-troubleshooting/#diagnostic-mode","text":"Synopsys Detect's diagnostic mode automatically enabled debug logging (where possible), saves all output (logs and inspector files) to a zip file, and notifies you of the location of the zip. Diagnostic mode properties are: --detect.diagnostic : When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. --detect.diagnostic.extended : When enabled, Synopsys Detect collects relevant files such as lock files and build artifacts. The zip file is created inside the Synopsys Detect output directory, and must be provided when support issues are opened. Synopsys does not recommend keeping this option on, as it does not clean up the zip file(s); regardless of the Synopsys Detect cleanup flag. Diagnostic mode: Sets the output log level to DEBUG. Zips the entire run directory of Synopsys Detect which includes: All BDIO files created by Synopsys Detect. Any intermediary files generated by Synopsys Detect, such as Gradle inspector output files. Includes any additional reports Synopsys Detect might make such as dependency counts. Additionally --detect.diagnostic or --detect.diagnostic.extended includes additional relevant files such as: Npm package locks. vendor.config. C/C++ compilation database. The property --detect.diagnostic.extended, when set to true, enables the collection of relevant files that are not generated by Synopsys Detect; for example, lock files. By default, diagnostic mode only includes files generated by Synopsys Detect where --detect.diagnostic.extended might include files it finds. For example, a package.lock that is too deep for Synopsys Detect's search depth is not included, or a package.lock that was not parsed due to exclusion. After running a scan with diagnostic mode, results similar to the following display in your output. 2019-03-29 09:32:02 INFO [main] --- Creating diagnostics zip. 2019-03-29 09:32:02 INFO [main] --- Diagnostics zip location: C:\\detect\\blackduck\\runs\\detect-run-2019-03-29-13-31-50-492.zip 2019-03-29 09:32:03 INFO [main] --- Diagnostics file created at: C:detect\\blackduck\\runs\\detect-run-2019-03-29-13-31-50-492.zip 2019-03-29 09:32:03 INFO [main] --- Diagnostic mode has completed.","title":"Diagnostic mode"},{"location":"advanced/troubleshooting/solutions/","text":"Solutions to common problems # WARNING: An illegal reflective access operation has occurred # Symptom # A block of warnings may appear in Synopsys Detect's logs similar to the following: WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass (file:/Users/myuser/.gradle/caches/modules-2/files-2.1/org.codehaus.groovy/groovy-all/2.4.12/760afc568cbd94c09d78f801ce51aed1326710af/groovy-all-2.4.12.jar) to method java.lang.Object.finalize() WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.reflection.CachedClass WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release Possible cause # Running Synopsys Detect with Java 11 can cause these warnings. This is a known issue with Apache since Groovy 2.4.11. See GROOVY-8339 . Synopsys Detect's use of Groovy 2 is the result of using Spring Boot 2.2.4.RELEASE which currently depends on Groovy 2. Solution # Currently we have observed no adverse effects on Synopsys Detect as a result of these warnings. The issue has been fixed in Groovy 3 as per GROOVY-8339 . Clients running Synopsys Detect with Java 11 will have these warnings until the Spring Boot project upgrades its Groovy dependencies to Groovy 3 and Synopsys Detect upgrades Spring Boot. Source Code # The relevant source code within Synopsys Detect. synopsys-detect/build.gradle#L15 ) The relevant source code within Spring Boot . spring-boot-dependencies/pom.xml#L69 DETECT_SOURCE was not set or computed correctly # Symptom # detect.sh fails with: DETECT_SOURCE was not set or computed correctly, please check your configuration and environment. Possible cause # detect.sh is trying to execute this command: curl --silent --header \\ X-Result-Detail: info\\ https://sig-repo.synopsys.com/api/storage/bds-integrations-release/com/synopsys/integration/synopsys-detect?properties=DETECT_LATEST The response to this command should be similar to the following: { properties : { DETECT_LATEST : [ https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect/5.6.1/synopsys-detect-5.6.1.jar ] }, uri : https://sig-repo.synopsys.com/api/storage/bds-integrations-release/com/synopsys/integration/synopsys-detect } When that command does not successfully return a value for property DETECT_LATEST, detect.sh reports: DETECT_SOURCE was not set or computed correctly, please check your configuration and environment. Solution # If the curl command described above does not successfully return a value for property DETECT_LATEST, you must determine why, and make the changes necessary so that curl command works. Synopsys Detect succeeds, but the results are incomplete because package managers or sub-projects were overlooked # Symptom # In this scenario, everything succeeds, but many or all components are missed. Examining the log shows that package managers were not recognized and/or sub-projects were overlooked. Possible cause # The detector search depth needs to be increased. The default value (0) limits the search for package manager files to the project directory. If project manager files are located in subdirectories and/or there are sub-projects, this depth should be increased to enable Synopsys Detect to find the relevant files, so it will run the appropriate detector(s). See detector search depth for more details. Docker Inspector error fails after logging: \"The Black Duck url must be specified\" # Symptom # When running a version of Synopsys Detect prior to Synopsys Detect version 5.6.0, the Synopsys Detect Status block reports DOCKER: FAILURE, and the following error appears in the Docker Inspector log: Docker Inspector error: Error inspecting image: The Black Duck url must be specified. Either an API token or a username/password must be specified. Possible cause # Synopsys Detect 5.5.1 and earlier have a bug that prevent them from working with Docker Inspector 8.2.0 and newer. The fix is in Synopsys Detect 5.6.0. Solution # There are two possible solutions: 1. Upgrade to Synopsys Detect 5.6.0 or newer, or: 1. Configure Synopsys Detect to use Docker Inspector 8.1.6 with the argument: --detect.docker.inspector.version=8.1.6 Synopsys Detect fails and a TRACE log shows an HTTP response from Black Duck of \"402 Payment Required\" or \"502 Bad Gateway\" # Symptom # Synopsys Detect fails, and a TRACE log contains \"402 Payment Required\" or \"502 Bad Gateway\". Possible cause # Black Duck does not have a required feature (notifications, binary analysis, etc.) enabled. Solution # Enable the required feature on the Black Duck server. Unexpected behavior running Synopsys Detect on a project that uses Spring Boot # Symptom # Unexpected behavior, and/or unexpected property values shown in the log. Possible cause # If your source directory contains Spring Framework configuration files named application.properties, application.yml, or application.xml that are written for any application other than Synopsys Detect, you should not run Synopsys Detect from your source directory. Solution # To prevent Synopsys Detect from reading those files, run Synopsys Detect from a different directory. Use the following property to point to your source directory. --detect.source.path={project directory path} PKIX error connecting to Black Duck # Symptom # Exception: Could not communicate with Black Duck: Could not perform the authorization request: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target Possible cause # The Black Duck server certificate is not in Java's keystore. Solution # Acquire the certificate file for your Black Duck server. Determine which java executable is being used to run Synopsys Detect. If you run detect.sh or detect.sh, that is either $JAVA_HOME/bin/java (the default) or the first java found on your $PATH. Determine the Java home directory for that java executable. Run keytool to install the Black Duck server certificate into the keystore in that Java home directory. Although not recommended, it is possible to disable the certificate check with the trust cert property . Not Extractable: NUGET - Solution INFO [main] -- Exception occurred: java.nio.file.InvalidPathException # Symptom # Running Synopsys Detect on a NuGet project on Windows, a message similar to the following appears in the Synopsys Detect log: Not Extractable: NUGET - Solution INFO [main] -- Exception occurred: java.nio.file.InvalidPathException: Illegal char : at index 2: C:\\... Possible cause # The value of $PATH contains a whitespace character after a semicolon and the path mentioned in the log message. Solution # Remove spaces immediately following semicolons in the value of $PATH. No project name/version provided or derived # Symptom # Upload to Black Duck fails with a message similar to the following in the log: ERROR [main] -- createProject.arg0.name can't be blank [HTTP Error]: There was a problem trying to POST https://.../api/projects, response was 412 Precondition Failed. Possible cause # No project name and version were provided via properties and no Synopsys Detect tool capable of deriving a project name and version was included in the run. For example, you will get this (or a similar) error if you run with --detect.tools.BINARY_SCANNER and do not set --detect.project.name or --detect.project.version.name. Solution # Set --detect.project.name and --detect.project.version.name. Black Duck Signature Scanner fails on Alpine Linux # Symptom # The Black Duck Signature Scanner fails on Alpine Linux with an error similar to: There was a problem scanning target '/opt/projects/myproject': Cannot run program /home/me/blackduck/tools/Black_Duck_Scan_Installation/scan.cli-2020.6.0/jre/bin/java : error=2, No such file or directory Possible cause # The Java bundled with the Black Duck Signature Scanner does not work on Alpine Linux (it relies on libraries not usually present on an Alpine system). Solution # Install an appropriate version of Java and tell Synopsys Detect to invoke the Black Duck Signature Scanner using that version of Java by setting environment variable BDS_JAVA_HOME to the JAVA_HOME value for that Java installation. For example: export BDS_JAVA_HOME=$JAVA_HOME Or: export BDS_JAVA_HOME=/usr/lib/jvm/java-11-openjdk/jre On Windows: Error trying cleanup # Symptom # When running on Windows, inspecting a Docker image (e.g. using --detect.docker.image or --detect.docker.tar), during shutdown, Synopsys Detect logs messages similar to the following: 2020-08-14 14:31:04 DEBUG [main] --- Error trying cleanup: java.io.IOException: Unable to delete file: C:\\Users\\Administrator\\blackduck\\runs\\2020-08-14-21-28-40-106\\extractions ... Caused by: java.nio.file.FileSystemException: C:\\Users\\Administrator\\blackduck\\runs\\2020-08-14-21-28-40-106\\extractions\\DOCKER-0\\application.properties: The process cannot access the file because it is being used by another process. Possible cause # This happens when Docker fails to release its lock on the volume mounted directory when it shuts down the image inspector service container due to Docker for Windows issue 394 . The result is that Synopsys Detect cannot fully clean up its output directory, and leaves behind empty subdirectories. The problem may be intermittent. Solution # There is no harm in leaving the directories behind in the short term, but we recommend periodically removing them if the problem occurs frequently. Restarting Docker will force Docker to release the locks, and enable you to remove the directories.","title":"Solutions to common problems"},{"location":"advanced/troubleshooting/solutions/#solutions-to-common-problems","text":"","title":"Solutions to common problems"},{"location":"advanced/troubleshooting/solutions/#warning-an-illegal-reflective-access-operation-has-occurred","text":"","title":"WARNING: An illegal reflective access operation has occurred"},{"location":"advanced/troubleshooting/solutions/#symptom","text":"A block of warnings may appear in Synopsys Detect's logs similar to the following: WARNING: An illegal reflective access operation has occurred WARNING: Illegal reflective access by org.codehaus.groovy.reflection.CachedClass (file:/Users/myuser/.gradle/caches/modules-2/files-2.1/org.codehaus.groovy/groovy-all/2.4.12/760afc568cbd94c09d78f801ce51aed1326710af/groovy-all-2.4.12.jar) to method java.lang.Object.finalize() WARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.reflection.CachedClass WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations WARNING: All illegal access operations will be denied in a future release","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause","text":"Running Synopsys Detect with Java 11 can cause these warnings. This is a known issue with Apache since Groovy 2.4.11. See GROOVY-8339 . Synopsys Detect's use of Groovy 2 is the result of using Spring Boot 2.2.4.RELEASE which currently depends on Groovy 2.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution","text":"Currently we have observed no adverse effects on Synopsys Detect as a result of these warnings. The issue has been fixed in Groovy 3 as per GROOVY-8339 . Clients running Synopsys Detect with Java 11 will have these warnings until the Spring Boot project upgrades its Groovy dependencies to Groovy 3 and Synopsys Detect upgrades Spring Boot.","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#source-code","text":"The relevant source code within Synopsys Detect. synopsys-detect/build.gradle#L15 ) The relevant source code within Spring Boot . spring-boot-dependencies/pom.xml#L69","title":"Source Code"},{"location":"advanced/troubleshooting/solutions/#detect_source-was-not-set-or-computed-correctly","text":"","title":"DETECT_SOURCE was not set or computed correctly"},{"location":"advanced/troubleshooting/solutions/#symptom_1","text":"detect.sh fails with: DETECT_SOURCE was not set or computed correctly, please check your configuration and environment.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_1","text":"detect.sh is trying to execute this command: curl --silent --header \\ X-Result-Detail: info\\ https://sig-repo.synopsys.com/api/storage/bds-integrations-release/com/synopsys/integration/synopsys-detect?properties=DETECT_LATEST The response to this command should be similar to the following: { properties : { DETECT_LATEST : [ https://sig-repo.synopsys.com/bds-integrations-release/com/synopsys/integration/synopsys-detect/5.6.1/synopsys-detect-5.6.1.jar ] }, uri : https://sig-repo.synopsys.com/api/storage/bds-integrations-release/com/synopsys/integration/synopsys-detect } When that command does not successfully return a value for property DETECT_LATEST, detect.sh reports: DETECT_SOURCE was not set or computed correctly, please check your configuration and environment.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_1","text":"If the curl command described above does not successfully return a value for property DETECT_LATEST, you must determine why, and make the changes necessary so that curl command works.","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#synopsys-detect-succeeds-but-the-results-are-incomplete-because-package-managers-or-sub-projects-were-overlooked","text":"","title":"Synopsys Detect succeeds, but the results are incomplete because package managers or sub-projects were overlooked"},{"location":"advanced/troubleshooting/solutions/#symptom_2","text":"In this scenario, everything succeeds, but many or all components are missed. Examining the log shows that package managers were not recognized and/or sub-projects were overlooked.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_2","text":"The detector search depth needs to be increased. The default value (0) limits the search for package manager files to the project directory. If project manager files are located in subdirectories and/or there are sub-projects, this depth should be increased to enable Synopsys Detect to find the relevant files, so it will run the appropriate detector(s). See detector search depth for more details.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#docker-inspector-error-fails-after-logging-the-black-duck-url-must-be-specified","text":"","title":"Docker Inspector error fails after logging: \"The Black Duck url must be specified\""},{"location":"advanced/troubleshooting/solutions/#symptom_3","text":"When running a version of Synopsys Detect prior to Synopsys Detect version 5.6.0, the Synopsys Detect Status block reports DOCKER: FAILURE, and the following error appears in the Docker Inspector log: Docker Inspector error: Error inspecting image: The Black Duck url must be specified. Either an API token or a username/password must be specified.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_3","text":"Synopsys Detect 5.5.1 and earlier have a bug that prevent them from working with Docker Inspector 8.2.0 and newer. The fix is in Synopsys Detect 5.6.0.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_2","text":"There are two possible solutions: 1. Upgrade to Synopsys Detect 5.6.0 or newer, or: 1. Configure Synopsys Detect to use Docker Inspector 8.1.6 with the argument: --detect.docker.inspector.version=8.1.6","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#synopsys-detect-fails-and-a-trace-log-shows-an-http-response-from-black-duck-of-402-payment-required-or-502-bad-gateway","text":"","title":"Synopsys Detect fails and a TRACE log shows an HTTP response from Black Duck of \"402 Payment Required\" or \"502 Bad Gateway\""},{"location":"advanced/troubleshooting/solutions/#symptom_4","text":"Synopsys Detect fails, and a TRACE log contains \"402 Payment Required\" or \"502 Bad Gateway\".","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_4","text":"Black Duck does not have a required feature (notifications, binary analysis, etc.) enabled.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_3","text":"Enable the required feature on the Black Duck server.","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#unexpected-behavior-running-synopsys-detect-on-a-project-that-uses-spring-boot","text":"","title":"Unexpected behavior running Synopsys Detect on a project that uses Spring Boot"},{"location":"advanced/troubleshooting/solutions/#symptom_5","text":"Unexpected behavior, and/or unexpected property values shown in the log.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_5","text":"If your source directory contains Spring Framework configuration files named application.properties, application.yml, or application.xml that are written for any application other than Synopsys Detect, you should not run Synopsys Detect from your source directory.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_4","text":"To prevent Synopsys Detect from reading those files, run Synopsys Detect from a different directory. Use the following property to point to your source directory. --detect.source.path={project directory path}","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#pkix-error-connecting-to-black-duck","text":"","title":"PKIX error connecting to Black Duck"},{"location":"advanced/troubleshooting/solutions/#symptom_6","text":"Exception: Could not communicate with Black Duck: Could not perform the authorization request: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_6","text":"The Black Duck server certificate is not in Java's keystore.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_5","text":"Acquire the certificate file for your Black Duck server. Determine which java executable is being used to run Synopsys Detect. If you run detect.sh or detect.sh, that is either $JAVA_HOME/bin/java (the default) or the first java found on your $PATH. Determine the Java home directory for that java executable. Run keytool to install the Black Duck server certificate into the keystore in that Java home directory. Although not recommended, it is possible to disable the certificate check with the trust cert property .","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#not-extractable-nuget-solution-info-main-exception-occurred-javaniofileinvalidpathexception","text":"","title":"Not Extractable: NUGET - Solution INFO [main] -- Exception occurred: java.nio.file.InvalidPathException"},{"location":"advanced/troubleshooting/solutions/#symptom_7","text":"Running Synopsys Detect on a NuGet project on Windows, a message similar to the following appears in the Synopsys Detect log: Not Extractable: NUGET - Solution INFO [main] -- Exception occurred: java.nio.file.InvalidPathException: Illegal char : at index 2: C:\\...","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_7","text":"The value of $PATH contains a whitespace character after a semicolon and the path mentioned in the log message.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_6","text":"Remove spaces immediately following semicolons in the value of $PATH.","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#no-project-nameversion-provided-or-derived","text":"","title":"No project name/version provided or derived"},{"location":"advanced/troubleshooting/solutions/#symptom_8","text":"Upload to Black Duck fails with a message similar to the following in the log: ERROR [main] -- createProject.arg0.name can't be blank [HTTP Error]: There was a problem trying to POST https://.../api/projects, response was 412 Precondition Failed.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_8","text":"No project name and version were provided via properties and no Synopsys Detect tool capable of deriving a project name and version was included in the run. For example, you will get this (or a similar) error if you run with --detect.tools.BINARY_SCANNER and do not set --detect.project.name or --detect.project.version.name.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_7","text":"Set --detect.project.name and --detect.project.version.name.","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#black-duck-signature-scanner-fails-on-alpine-linux","text":"","title":"Black Duck Signature Scanner fails on Alpine Linux"},{"location":"advanced/troubleshooting/solutions/#symptom_9","text":"The Black Duck Signature Scanner fails on Alpine Linux with an error similar to: There was a problem scanning target '/opt/projects/myproject': Cannot run program /home/me/blackduck/tools/Black_Duck_Scan_Installation/scan.cli-2020.6.0/jre/bin/java : error=2, No such file or directory","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_9","text":"The Java bundled with the Black Duck Signature Scanner does not work on Alpine Linux (it relies on libraries not usually present on an Alpine system).","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_8","text":"Install an appropriate version of Java and tell Synopsys Detect to invoke the Black Duck Signature Scanner using that version of Java by setting environment variable BDS_JAVA_HOME to the JAVA_HOME value for that Java installation. For example: export BDS_JAVA_HOME=$JAVA_HOME Or: export BDS_JAVA_HOME=/usr/lib/jvm/java-11-openjdk/jre","title":"Solution"},{"location":"advanced/troubleshooting/solutions/#on-windows-error-trying-cleanup","text":"","title":"On Windows: Error trying cleanup"},{"location":"advanced/troubleshooting/solutions/#symptom_10","text":"When running on Windows, inspecting a Docker image (e.g. using --detect.docker.image or --detect.docker.tar), during shutdown, Synopsys Detect logs messages similar to the following: 2020-08-14 14:31:04 DEBUG [main] --- Error trying cleanup: java.io.IOException: Unable to delete file: C:\\Users\\Administrator\\blackduck\\runs\\2020-08-14-21-28-40-106\\extractions ... Caused by: java.nio.file.FileSystemException: C:\\Users\\Administrator\\blackduck\\runs\\2020-08-14-21-28-40-106\\extractions\\DOCKER-0\\application.properties: The process cannot access the file because it is being used by another process.","title":"Symptom"},{"location":"advanced/troubleshooting/solutions/#possible-cause_10","text":"This happens when Docker fails to release its lock on the volume mounted directory when it shuts down the image inspector service container due to Docker for Windows issue 394 . The result is that Synopsys Detect cannot fully clean up its output directory, and leaves behind empty subdirectories. The problem may be intermittent.","title":"Possible cause"},{"location":"advanced/troubleshooting/solutions/#solution_9","text":"There is no harm in leaving the directories behind in the short term, but we recommend periodically removing them if the problem occurs frequently. Restarting Docker will force Docker to release the locks, and enable you to remove the directories.","title":"Solution"},{"location":"components/detectors/","text":"Detectors # Synopsys Detect uses detectors to find and extract dependencies from all supported package managers. Each package manager ecosystem is assigned a detector type. Each detector type may have multiple methods used to extract dependencies. Detector Search # Detectors first check to see if they apply to your project by looking for hints such as files that exist in your project directory or properties you have set. By default, detectors only search the project directory. In some cases, such as when your project contains sub-projects, or when package manager files reside in sub-directories, you may need to tell Synopsys Detect to search sub-directories by increasing the detector search depth. For more information, refer to detector search depth . Detectors then check that your environment is extractable, meaning you have all the relevant executables such as NPM or a Gradle wrapper, and all relevant downloads are present or available, such as the Docker or NuGet inspector. Inspectors are used by detectors when the package manager requires an integration or embedded plugin to work. For example, Gradle uses an inspector as a plugin that executes a custom task. Most detectors do not require an inspector. Finally, detectors perform their extraction to find your dependencies. This may require, but is not limited to, running executables, performing builds, parsing files, and communicating with web services. Build detectors versus buildless detectors # The recommended way to run Synopsys Detect is as a post-build step, so that it has access to both build artifacts and the build tools (package managers and others) used to build the project. Synopsys Detect's build detectors work in this environment and produce the most accurate results. By default, Synopsys Detect runs build detectors. If you can't build your project, you may still be able to use Synopsys Detect's buildless detectors. The results from buildless detectors may not be as accurate as the results from build detectors, but buildless detectors can run without accessing the tools required to build the project. You can choose to run buildless detectors using the buildless mode property . The following tables show which detectors run in the default (build) mode, and which detectors run in buildless mode. There is some overlap across the two lists. Build detectors # By default, Synopsys Detect requires that you are able to build the project you are scanning. This allows Synopsys Detect to get the most accurate results possible. Build detectors can communicate with package managers and run commands for example: mvn dependency:tree , and/or inspectors; such as the Gradle inspector to derive dependency information. Not all build detectors run external commands or communicate with external systems but all build detectors return accurate results. Each applicable detector's required executables (as shown in the following table) must be present and findable on your system. Synopsys Detect uses the system PATH to find executables. In some cases as an alternative to the system PATH, the location of an executable can be provided through a property. Type Name Language Forge Requirements BITBAKE Bitbake various YOCTO Properties: Package names File: build env script. Executable: bash CARGO Cargo Rust crates Files: Cargo.lock, Cargo.toml CLANG Clang C or C++ Derived from the Linux distribution. File: compile_commands.json. Executable: Linux package manager. COCOAPODS Pod Lock Objective C COCOAPODS and NPMJS Files: Podfile.lock CONDA Conda Cli Python Anaconda File: environment.yml. Executable: conda. CPAN Cpan Cli Perl CPAN File: Makefile.PL. Executable: cpan. CRAN Packrat Lock R CRAN File: packrat.lock. GIT Git Cli various N/A Directory: .git. Executable: git. GIT Git Parse various N/A Files: .git/config, .git/HEAD. GO_DEP Go Lock Golang GitHub File: Gopkg.lock. GO_GRADLE Go Gradle Golang GitHub File: gogradle.lock. GO_MOD Go Mod Cli Golang Go Modules File: go.mod. Executable: go. GO_VENDOR Go Vendor Golang GitHub File: vendor/vendor.json. GO_VNDR Go Vndr Golang GitHub File: vendor.conf. GRADLE Gradle Inspector various Maven Central File: build.gradle or build.gradle.kts. Executable: gradlew or gradle. HEX Rebar Erlang Hex File: rebar.config. Executable: rebar3. LERNA Lerna Node JS npmjs File: package.json, and one of the following: package-lock.json, npm-shrinkwrap.json, yarn.lock. MAVEN Maven Pom various Maven Central File: pom.xml. Executable: mvnw or mvn. MAVEN Maven Wrapper various Maven Central File: pom.groovy. Executable: mvnw or mvn. NPM Npm Cli Node JS npmjs Files: node_modules, package.json. Executable: npm. NPM Package Lock Node JS npmjs File: package-lock.json. Optionally for better results: package.json also. NPM Shrinkwrap Node JS npmjs File: npm-shrinkwrap.json. Optionally for better results: package.json also. NUGET Project C# NuGet.org File: a project file with one of the following extensions: .csproj, .fsproj, .vbproj, .asaproj, .dcproj, .shproj, .ccproj, .sfproj, .njsproj, .vcxproj, .vcproj, .xproj, .pyproj, .hiveproj, .pigproj, .jsproj, .usqlproj, .deployproj, .msbuildproj, .sqlproj, .dbproj, .rproj NUGET Solution C# NuGet.org File: a solution file with a .sln extension. PACKAGIST Composer PHP Packagist.org Files: composer.lock, composer.json. PEAR Pear PHP Pear Files: package.xml. Executable: pear. PIP Pip Env Python PyPi Files: Pipfile or Pipfile.lock. Executables: python or python3, and pipenv. PIP Pip Inspector Python Pypi A setup.py file, or one or more requirements.txt files. Executables: python and pip, or python3 and pip3. PIP Poetry Python pypi Files: Poetry.lock, pyproject.toml RUBYGEMS Gemlock Ruby RubyGems File: Gemfile.lock. SBT Sbt Resolution Cache Scala Maven Central File: build.sbt. SWIFT Swift Swift Swift.org File: Package.swift. Executables: swift. YARN Yarn Lock Node JS npmjs Files: yarn.lock and package.json. Buildless detectors # When in buildless mode, only detectors that do not communicate with external systems are run. Typically these detectors just parse available package mananger files such as pom.xml to derive dependency information. It is generally not recommended to run in buildless mode as the results are not guaranteed to be accurate - for example Synopsys Detect may report dependencies with fuzzy versions. However if the project can not be built, buildless mode still allows some insight into the dependencies of a project. Type Name Language Forge Requirements CARGO Cargo Rust crates Files: Cargo.lock, Cargo.toml COCOAPODS Pod Lock Objective C COCOAPODS and NPMJS Files: Podfile.lock GIT Git Parse various N/A Files: .git/config, .git/HEAD. GO_DEP Go Lock Golang GitHub File: Gopkg.lock. GO_GRADLE Go Gradle Golang GitHub File: gogradle.lock. GO_VENDOR Go Vendor Golang GitHub File: vendor/vendor.json. GO_VNDR Go Vndr Golang GitHub File: vendor.conf. GRADLE Gradle Parse various Maven Central File: build.gradle. MAVEN Maven Pom Parse various Maven Central File: pom.xml. NPM Package Json Parse Node JS npmjs File: package.json. NPM Package Lock Node JS npmjs File: package-lock.json. Optionally for better results: package.json also. NPM Shrinkwrap Node JS npmjs File: npm-shrinkwrap.json. Optionally for better results: package.json also. PACKAGIST Composer PHP Packagist.org Files: composer.lock, composer.json. PACKAGIST Packrat Lock R CRAN File: packrat.lock. PIP Poetry Python pypi Files: Poetry.lock, pyproject.toml RUBYGEMS Gemlock Ruby RubyGems File: Gemfile.lock. RUBYGEMS Gemspec Ruby RubyGems File: A gemspec file (with .gemspec extension). SBT Sbt Resolution Cache Scala Maven Central File: build.sbt. YARN Yarn Lock Node JS npmjs Files: yarn.lock and package.json.","title":"Detectors"},{"location":"components/detectors/#detectors","text":"Synopsys Detect uses detectors to find and extract dependencies from all supported package managers. Each package manager ecosystem is assigned a detector type. Each detector type may have multiple methods used to extract dependencies.","title":"Detectors"},{"location":"components/detectors/#detector-search","text":"Detectors first check to see if they apply to your project by looking for hints such as files that exist in your project directory or properties you have set. By default, detectors only search the project directory. In some cases, such as when your project contains sub-projects, or when package manager files reside in sub-directories, you may need to tell Synopsys Detect to search sub-directories by increasing the detector search depth. For more information, refer to detector search depth . Detectors then check that your environment is extractable, meaning you have all the relevant executables such as NPM or a Gradle wrapper, and all relevant downloads are present or available, such as the Docker or NuGet inspector. Inspectors are used by detectors when the package manager requires an integration or embedded plugin to work. For example, Gradle uses an inspector as a plugin that executes a custom task. Most detectors do not require an inspector. Finally, detectors perform their extraction to find your dependencies. This may require, but is not limited to, running executables, performing builds, parsing files, and communicating with web services.","title":"Detector Search"},{"location":"components/detectors/#build-detectors-versus-buildless-detectors","text":"The recommended way to run Synopsys Detect is as a post-build step, so that it has access to both build artifacts and the build tools (package managers and others) used to build the project. Synopsys Detect's build detectors work in this environment and produce the most accurate results. By default, Synopsys Detect runs build detectors. If you can't build your project, you may still be able to use Synopsys Detect's buildless detectors. The results from buildless detectors may not be as accurate as the results from build detectors, but buildless detectors can run without accessing the tools required to build the project. You can choose to run buildless detectors using the buildless mode property . The following tables show which detectors run in the default (build) mode, and which detectors run in buildless mode. There is some overlap across the two lists.","title":"Build detectors versus buildless detectors"},{"location":"components/detectors/#build-detectors","text":"By default, Synopsys Detect requires that you are able to build the project you are scanning. This allows Synopsys Detect to get the most accurate results possible. Build detectors can communicate with package managers and run commands for example: mvn dependency:tree , and/or inspectors; such as the Gradle inspector to derive dependency information. Not all build detectors run external commands or communicate with external systems but all build detectors return accurate results. Each applicable detector's required executables (as shown in the following table) must be present and findable on your system. Synopsys Detect uses the system PATH to find executables. In some cases as an alternative to the system PATH, the location of an executable can be provided through a property. Type Name Language Forge Requirements BITBAKE Bitbake various YOCTO Properties: Package names File: build env script. Executable: bash CARGO Cargo Rust crates Files: Cargo.lock, Cargo.toml CLANG Clang C or C++ Derived from the Linux distribution. File: compile_commands.json. Executable: Linux package manager. COCOAPODS Pod Lock Objective C COCOAPODS and NPMJS Files: Podfile.lock CONDA Conda Cli Python Anaconda File: environment.yml. Executable: conda. CPAN Cpan Cli Perl CPAN File: Makefile.PL. Executable: cpan. CRAN Packrat Lock R CRAN File: packrat.lock. GIT Git Cli various N/A Directory: .git. Executable: git. GIT Git Parse various N/A Files: .git/config, .git/HEAD. GO_DEP Go Lock Golang GitHub File: Gopkg.lock. GO_GRADLE Go Gradle Golang GitHub File: gogradle.lock. GO_MOD Go Mod Cli Golang Go Modules File: go.mod. Executable: go. GO_VENDOR Go Vendor Golang GitHub File: vendor/vendor.json. GO_VNDR Go Vndr Golang GitHub File: vendor.conf. GRADLE Gradle Inspector various Maven Central File: build.gradle or build.gradle.kts. Executable: gradlew or gradle. HEX Rebar Erlang Hex File: rebar.config. Executable: rebar3. LERNA Lerna Node JS npmjs File: package.json, and one of the following: package-lock.json, npm-shrinkwrap.json, yarn.lock. MAVEN Maven Pom various Maven Central File: pom.xml. Executable: mvnw or mvn. MAVEN Maven Wrapper various Maven Central File: pom.groovy. Executable: mvnw or mvn. NPM Npm Cli Node JS npmjs Files: node_modules, package.json. Executable: npm. NPM Package Lock Node JS npmjs File: package-lock.json. Optionally for better results: package.json also. NPM Shrinkwrap Node JS npmjs File: npm-shrinkwrap.json. Optionally for better results: package.json also. NUGET Project C# NuGet.org File: a project file with one of the following extensions: .csproj, .fsproj, .vbproj, .asaproj, .dcproj, .shproj, .ccproj, .sfproj, .njsproj, .vcxproj, .vcproj, .xproj, .pyproj, .hiveproj, .pigproj, .jsproj, .usqlproj, .deployproj, .msbuildproj, .sqlproj, .dbproj, .rproj NUGET Solution C# NuGet.org File: a solution file with a .sln extension. PACKAGIST Composer PHP Packagist.org Files: composer.lock, composer.json. PEAR Pear PHP Pear Files: package.xml. Executable: pear. PIP Pip Env Python PyPi Files: Pipfile or Pipfile.lock. Executables: python or python3, and pipenv. PIP Pip Inspector Python Pypi A setup.py file, or one or more requirements.txt files. Executables: python and pip, or python3 and pip3. PIP Poetry Python pypi Files: Poetry.lock, pyproject.toml RUBYGEMS Gemlock Ruby RubyGems File: Gemfile.lock. SBT Sbt Resolution Cache Scala Maven Central File: build.sbt. SWIFT Swift Swift Swift.org File: Package.swift. Executables: swift. YARN Yarn Lock Node JS npmjs Files: yarn.lock and package.json.","title":"Build detectors"},{"location":"components/detectors/#buildless-detectors","text":"When in buildless mode, only detectors that do not communicate with external systems are run. Typically these detectors just parse available package mananger files such as pom.xml to derive dependency information. It is generally not recommended to run in buildless mode as the results are not guaranteed to be accurate - for example Synopsys Detect may report dependencies with fuzzy versions. However if the project can not be built, buildless mode still allows some insight into the dependencies of a project. Type Name Language Forge Requirements CARGO Cargo Rust crates Files: Cargo.lock, Cargo.toml COCOAPODS Pod Lock Objective C COCOAPODS and NPMJS Files: Podfile.lock GIT Git Parse various N/A Files: .git/config, .git/HEAD. GO_DEP Go Lock Golang GitHub File: Gopkg.lock. GO_GRADLE Go Gradle Golang GitHub File: gogradle.lock. GO_VENDOR Go Vendor Golang GitHub File: vendor/vendor.json. GO_VNDR Go Vndr Golang GitHub File: vendor.conf. GRADLE Gradle Parse various Maven Central File: build.gradle. MAVEN Maven Pom Parse various Maven Central File: pom.xml. NPM Package Json Parse Node JS npmjs File: package.json. NPM Package Lock Node JS npmjs File: package-lock.json. Optionally for better results: package.json also. NPM Shrinkwrap Node JS npmjs File: npm-shrinkwrap.json. Optionally for better results: package.json also. PACKAGIST Composer PHP Packagist.org Files: composer.lock, composer.json. PACKAGIST Packrat Lock R CRAN File: packrat.lock. PIP Poetry Python pypi Files: Poetry.lock, pyproject.toml RUBYGEMS Gemlock Ruby RubyGems File: Gemfile.lock. RUBYGEMS Gemspec Ruby RubyGems File: A gemspec file (with .gemspec extension). SBT Sbt Resolution Cache Scala Maven Central File: build.sbt. YARN Yarn Lock Node JS npmjs Files: yarn.lock and package.json.","title":"Buildless detectors"},{"location":"components/inspectors/","text":"Inspectors # An inspector is typically a plugin that a Synopsys Detect detector uses to access the internal resources of a package manager through its API. There are currently three inspectors that Synopsys Detect might download and one inspector it has internally. If Synopsys Detect decides that your package manager needs an external inspector, you must either be online or have the applicable air gap files. Gradle inspector # The Gradle inspector is added as a dependency to a temporary Gradle script file that is executed by the Synopsys Detect Gradle detector. If you are online, then Synopsys Artifactory is added as a Maven repository and the inspector is downloaded by Gradle. If you are offline, the air gap inspector jar files are added as classpath file dependencies. In both cases, the Synopsys Detect Gradle detector executes the custom Gradle script mentioned above, which invokes the Gradle inspector's task. The source code for the Gradle inspector is located at GitHub . Docker Inspector # The Docker Inspector is available as a Java jar or shell script for Linux or Mac. If you are online, then Synopsys Artifactory is used to download the Docker Inspector jar file. If you are offline, the Docker Inspector jar file and required Docker image tar files are sourced from the provided path to the Docker Inspetor air gap files. Synopsys Detect loads the Docker images (container-based services that Docker Inspector depends on) from the provided image tar files so they are available to the Docker Inspector. In both cases, the Docker Inspector jar is run which (by default) uses your Docker engine to start and stop the container-based services. The source code for Docker Inspector is located at GitHub . NuGet Inspector # The NuGet inspector is available as an independent executable for Windows or as a dotnet application for all dotnet supported operating systems. If you are online, then Synopsys Artifactory is used to download the applicable NuGet package which is then unzipped and the runtime files are located. If you are offline, the air gap inspector runtime files are located at the provided path. In both cases, the located executable is run which communicates with NuGet and the dotnet build system. The source code for the NuGet executable inspector is located at GitHub . The source code for the NuGet dotnet inspector is located at GitHub . Python Inspector # While Python has an inspector, this inspector is not downloaded from an external source and is contained in the Synopsys Detect source code. The Python Inspector is a Python script that Synopsys Detect executes using Python. This script uses pip's internal methods to extract dependencies.","title":"Inspectors"},{"location":"components/inspectors/#inspectors","text":"An inspector is typically a plugin that a Synopsys Detect detector uses to access the internal resources of a package manager through its API. There are currently three inspectors that Synopsys Detect might download and one inspector it has internally. If Synopsys Detect decides that your package manager needs an external inspector, you must either be online or have the applicable air gap files.","title":"Inspectors"},{"location":"components/inspectors/#gradle-inspector","text":"The Gradle inspector is added as a dependency to a temporary Gradle script file that is executed by the Synopsys Detect Gradle detector. If you are online, then Synopsys Artifactory is added as a Maven repository and the inspector is downloaded by Gradle. If you are offline, the air gap inspector jar files are added as classpath file dependencies. In both cases, the Synopsys Detect Gradle detector executes the custom Gradle script mentioned above, which invokes the Gradle inspector's task. The source code for the Gradle inspector is located at GitHub .","title":"Gradle inspector"},{"location":"components/inspectors/#docker-inspector","text":"The Docker Inspector is available as a Java jar or shell script for Linux or Mac. If you are online, then Synopsys Artifactory is used to download the Docker Inspector jar file. If you are offline, the Docker Inspector jar file and required Docker image tar files are sourced from the provided path to the Docker Inspetor air gap files. Synopsys Detect loads the Docker images (container-based services that Docker Inspector depends on) from the provided image tar files so they are available to the Docker Inspector. In both cases, the Docker Inspector jar is run which (by default) uses your Docker engine to start and stop the container-based services. The source code for Docker Inspector is located at GitHub .","title":"Docker Inspector"},{"location":"components/inspectors/#nuget-inspector","text":"The NuGet inspector is available as an independent executable for Windows or as a dotnet application for all dotnet supported operating systems. If you are online, then Synopsys Artifactory is used to download the applicable NuGet package which is then unzipped and the runtime files are located. If you are offline, the air gap inspector runtime files are located at the provided path. In both cases, the located executable is run which communicates with NuGet and the dotnet build system. The source code for the NuGet executable inspector is located at GitHub . The source code for the NuGet dotnet inspector is located at GitHub .","title":"NuGet Inspector"},{"location":"components/inspectors/#python-inspector","text":"While Python has an inspector, this inspector is not downloaded from an external source and is contained in the Synopsys Detect source code. The Python Inspector is a Python script that Synopsys Detect executes using Python. This script uses pip's internal methods to extract dependencies.","title":"Python Inspector"},{"location":"components/tools/","text":"Tools # Each Synopsys Detect run consists of running any applicable Synopsys Detect tools. The available Synopsys Detect tools in order of execution, with the corresponding detect tools property value specified in parentheses are: Polaris (--detect.tools=POLARIS) Docker Inspector (--detect.tools=DOCKER) Bazel (--detect.tools=BAZEL) Detector (--detect.tools=DETECTOR) Black Duck Signature Scanner (--detect.tools=SIGNATURE_SCAN) Black Duck - Binary Analysis (--detect.tools=BINARY_SCAN) Vulnerability Impact Analysis Tool (--detect.tools=IMPACT_ANALYSIS) The detector tool runs any applicable detectors .","title":"Tools"},{"location":"components/tools/#tools","text":"Each Synopsys Detect run consists of running any applicable Synopsys Detect tools. The available Synopsys Detect tools in order of execution, with the corresponding detect tools property value specified in parentheses are: Polaris (--detect.tools=POLARIS) Docker Inspector (--detect.tools=DOCKER) Bazel (--detect.tools=BAZEL) Detector (--detect.tools=DETECTOR) Black Duck Signature Scanner (--detect.tools=SIGNATURE_SCAN) Black Duck - Binary Analysis (--detect.tools=BINARY_SCAN) Vulnerability Impact Analysis Tool (--detect.tools=IMPACT_ANALYSIS) The detector tool runs any applicable detectors .","title":"Tools"},{"location":"properties/all-properties/","text":"This page lists all Synopsys Detect properties including deprecated and advanced. For most use cases, refer to basic properties . packagist Property Description detect.packagist.include.dev.dependencies default: true Include Packagist Development Dependencies: Set this value to false if you would like to exclude your dev requires dependencies when ran. sbt Property Description detect.sbt.report.search.depth default: 3 SBT Report Search Depth: Depth the sbt detector will use to search for report files. detect.sbt.excluded.configurations (Advanced) SBT Configurations Excluded: The names of the sbt configurations to exclude. detect.sbt.included.configurations (Advanced) SBT Configurations Included: The names of the sbt configurations to include. bitbake Property Description detect.bitbake.build.env.name default: oe-init-build-env BitBake Init Script Name: The name of the build environment init script. detect.bitbake.package.names BitBake Package Names: A comma-separated list of package names from which dependencies are extracted. detect.bitbake.source.arguments BitBake Source Arguments: A comma-separated list of arguments to supply when sourcing the build environment init script. detect.bitbake.search.depth default: 1 BitBake Search Depth: The depth at which Detect will search for files generated by Bitbake. detect.bitbake.reference.impl (Deprecated) default: -poky-linux Reference implementation: The reference implementation of the Yocto project. These characters are stripped from the discovered target architecture. DEPRECATED: This property is no longer required and will not be used in the Bitbake Detector. It will cause failure in 7.0.0 and be removed in 8.0.0. project Property Description detect.policy.check.fail.on.severities default: NONE Acceptable Values: ALL, NONE, UNSPECIFIED, TRIVIAL, MINOR, MAJOR, CRITICAL, BLOCKER Fail on Policy Violation Severities: A comma-separated list of policy violation severities that will fail Detect. If this is set to NONE, Detect will not fail due to policy violations. A value of ALL is equivalent to all of the other possible values except NONE. detect.project.description Project Description: If project description is specified, your project version will be created with this description. detect.project.name Project Name: An override for the name to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable project name. If that fails, the final part of the directory path where the inspection is taking place will be used. detect.project.tier Project Tier: If a Black Duck project tier is specified, your project will be created with this tier. detect.project.version.name Version Name: An override for the version to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable version name. If that fails, the current date will be used. detect.project.version.nickname Version Nickname: If a project version nickname is specified, your project version will be created with this nickname. detect.project.version.notes Version Notes: If project version notes are specified, your project version will be created with these notes. detect.project.version.phase default: DEVELOPMENT Acceptable Values: ARCHIVED, DEPRECATED, DEVELOPMENT, PLANNING, PRERELEASE, RELEASED Version Phase: An override for the Project Version phase. detect.project.version.update default: false Update Project Version: If set to true, will update the Project Version with the configured properties. See detailed help for more information. detect.bom.aggregate.name (Advanced) Aggregate BDIO File Name: If set, this will aggregate all the BOMs to create a single BDIO file with the name provided. detect.bom.aggregate.remediation.mode (Advanced) default: TRANSITIVE Acceptable Values: DIRECT, TRANSITIVE BDIO Aggregate Remediation Mode: If an aggregate BDIO file is being generated and this property is set to DIRECT, the aggregate BDIO file will exclude code location nodes from the top layer of the dependency tree to preserve the correct identification of direct dependencies in the resulting Black Duck BOM. When this property is set to TRANSITIVE (the default), component source information is preserved by including code location nodes at the top of the dependency tree, but all components will appear as TRANSITIVE in the BOM. detect.clone.project.version.name (Advanced) Clone Project Version Name: The name of the project version to clone this project version from. Respects the given Clone Categories in detect.project.clone.categories or as set on the Black Duck server. detect.clone.project.version.latest (Advanced) default: false Clone Latest Project Version: If set to true, detect will attempt to use the latest project version as the clone for this project. The project must exist and have at least one version. detect.code.location.name (Advanced) Scan Name: An override for the name Detect will use for the scan file it creates. If supplied and multiple scans are found, Detect will append an index to each scan name. detect.default.project.version.scheme (Advanced) default: TEXT Acceptable Values: TIMESTAMP, TEXT Default Project Version Name Scheme: The scheme to use when the package managers can not determine a version. See detailed help for more information. detect.default.project.version.text (Advanced) default: Default Detect Version Default Project Version Name Text: The text to use as the default project version. detect.default.project.version.timeformat (Advanced) default: yyyy-MM-dd'T'HH:mm:ss.SSS Default Project Version Name Timestamp Format: The timestamp format to use as the default project version. detect.project.application.id (Advanced) Application ID: Sets the 'Application ID' project setting. detect.custom.fields.project (Advanced) Custom Fields: A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example, to set a custom field with label 'example' to 'one,two': detect.custom.fields.project[0].label='example' and detect.custom.fields.project[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. detect.custom.fields.version (Advanced) Custom Fields: A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example , to set a custom field with label 'example' to 'one,two': detect.custom.fields.version[0].label='example' and detect.custom.fields.version[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. detect.project.clone.categories (Advanced) default: COMPONENT_DATA,VULN_DATA Acceptable Values: COMPONENT_DATA, VULN_DATA, LICENSE_TERM_FULFILLMENT Clone Project Categories: An override for the Project Clone Categories that are used when cloning a version. If the project already exists, make sure to use --detect.project.version.update to make sure these are set. detect.project.codelocation.prefix (Advanced) Scan Name Prefix: A prefix to the name of the scans created by Detect. Useful for running against the same projects on multiple machines. detect.project.codelocation.suffix (Advanced) Scan Name Suffix: A suffix to the name of the scans created by Detect. detect.project.codelocation.unmap (Advanced) default: false Unmap All Other Scans for Project: If set to true, unmaps all other scans mapped to the project version produced by the current run of Detect. detect.project.user.groups (Advanced) Project User Groups: A comma-separated list of names of user groups to add to the project. detect.project.tags (Advanced) Project Tags: A comma-separated list of tags to add to the project. This property is not supported when using Synopsys Detect in offline mode. detect.project.level.adjustments (Advanced) default: true Allow Project Level Adjustments: An override for the Project level matches. detect.parent.project.name (Advanced) Parent Project Name: When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. detect.parent.project.version.name (Advanced) Parent Project Version Name: When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. detect.project.version.distribution (Advanced) default: EXTERNAL Acceptable Values: EXTERNAL, SAAS, INTERNAL, OPENSOURCE Version Distribution: An override for the Project Version distribution blackduck server Property Description blackduck.api.token Black Duck API Token: The API token used to authenticate with the Black Duck Server. blackduck.offline.mode default: false Offline Mode: This can disable any Black Duck communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner. blackduck.password Black Duck Password: Black Duck password. blackduck.url Black Duck URL: URL of the Black Duck server. blackduck.username Black Duck Username: Black Duck username. detect.report.timeout default: 300 Report Generation Timeout: The amount of time in seconds Detect will wait for scans to finish and to generate reports (i.e. risk and policy check). When changing this value, keep in mind the checking of policies might have to wait for scans to process which can take some time. detect.test.connection default: false Test Connection to Black Duck: Test the connection to Black Duck with the current configuration. blackduck.timeout (Advanced) default: 120 Black Duck Timeout: The time to wait for network connections to complete (in seconds). blackduck.trust.cert (Advanced) default: false Trust All SSL Certificates: If true, automatically trust the certificate for the current run of Detect only. blackduck.hub.url (Deprecated) Blackduck Hub Url: URL of the Hub server. DEPRECATED: This property is changing. Please use --blackduck.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.timeout (Deprecated) default: 120 Blackduck Hub Timeout: The time to wait for rest connections to complete in seconds. DEPRECATED: This property is changing. Please use --blackduck.timeout in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.username (Deprecated) Blackduck Hub Username: Hub username. DEPRECATED: This property is changing. Please use --blackduck.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.password (Deprecated) Blackduck Hub Password: Hub password. DEPRECATED: This property is changing. Please use --blackduck.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.api.token (Deprecated) Blackduck Hub Api Token: Hub API Token. DEPRECATED: This property is changing. Please use --blackduck.api.token in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.host (Deprecated) Blackduck Hub Proxy Host: Proxy host. DEPRECATED: This property is changing. Please use --blackduck.proxy.host in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.port (Deprecated) Blackduck Hub Proxy Port: Proxy port. DEPRECATED: This property is changing. Please use --blackduck.proxy.port in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.username (Deprecated) Blackduck Hub Proxy Username: Proxy username. DEPRECATED: This property is changing. Please use --blackduck.proxy.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.password (Deprecated) Blackduck Hub Proxy Password: Proxy password. DEPRECATED: This property is changing. Please use --blackduck.proxy.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ntlm.domain (Deprecated) Blackduck Hub Proxy Ntlm Domain: NTLM Proxy domain. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.domain in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ignored.hosts (Deprecated) Blackduck Hub Proxy Ignored Hosts: A comma-separated list of host patterns that should not use the proxy. DEPRECATED: This property is changing. Please use --blackduck.proxy.ignored.hosts in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ntlm.workstation (Deprecated) Blackduck Hub Proxy Ntlm Workstation: NTLM Proxy workstation. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.workstation in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.trust.cert (Deprecated) default: false Blackduck Hub Trust Cert: If true, automatically trusts the certificate for the current run of Detect only. DEPRECATED: This property is changing. Please use --blackduck.trust.cert in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.offline.mode (Deprecated) default: false Blackduck Hub Offline Mode: This disables any Hub communication. If true, Detect does not upload BDIO files, does not check policies, and does not download and install the signature scanner. DEPRECATED: This property is changing. Please use --blackduck.offline.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.disable.without.hub (Deprecated) default: false Detect Disable Without Hub: If true, during initialization Detect will check for Hub connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.disable.without.blackduck (Deprecated) default: false Check For Valid Black Duck Connection: If true, during initialization Detect will check for Black Duck connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. docker Property Description detect.docker.image Docker Image Name: The Docker image name to inspect. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. detect.docker.image.id Docker Image ID: The Docker image ID to inspect. detect.docker.path Docker Executable: Path to the docker executable. detect.docker.tar Docker Image Archive File: A saved Docker image - must be a .tar file. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. detect.phone.home.passthrough (Advanced) Phone Home Passthrough: Additional values may be sent home for usage information. The keys will be sent without the prefix. detect.docker.passthrough (Advanced) Docker Passthrough: Additional properties may be passed to the docker inspector by adding the prefix detect.docker.passthrough. The keys will be given to docker inspector without the prefix. detect.docker.inspector.air.gap.path (Advanced) Docker Inspector AirGap Path: The path to the directory containing the Docker Inspector jar and images. detect.docker.inspector.path (Advanced) Docker Inspector .jar File Path: This is used to override using the hosted Docker Inspector .jar file by binary repository url. You can use a compatible (the same major version that Detect downloads by default) local Docker Inspector .jar file at this path. detect.docker.inspector.version (Advanced) Docker Inspector Version: Version of the Docker Inspector to use. By default Detect will attempt to automatically determine the version to use. detect.docker.path.required (Advanced) default: false Run Without Docker in Path: If set to true, Detect will attempt to run the Docker Inspector only if it finds a docker client executable. detect.docker.platform.top.layer.id (Advanced) Platform Top Layer ID: To exclude components from platform layers from the results, assign to this property the ID of the top layer of the platform image. Get the platform top layer ID from the output of 'docker inspect platformimage:tag'. The platform top layer ID is the last item in RootFS.Layers. For more information, see 'Isolating application components' in the Docker Inspector documentation. bazel Property Description detect.bazel.path Bazel Executable: The path to the Bazel executable. detect.bazel.target Bazel Target: The Bazel target (for example, //foo:foolib) for which dependencies are collected. For Detect to run Bazel, this property must be set. detect.bazel.cquery.options Bazel cquery additional options: A comma-separated list of additional options to pass to the bazel cquery command. detect.bazel.dependency.type Acceptable Values: ALL, NONE, MAVEN_JAR, MAVEN_INSTALL, HASKELL_CABAL_LIBRARY Bazel workspace external dependency rule: The Bazel workspace rule(s) used to pull in external dependencies. If not set, Detect will attempt to determine the rule(s) from the contents of the WORKSPACE file. project info Property Description detect.api.timeout (Deprecated) default: 300000 Detect Api Timeout: Timeout for response from Black Duck regarding your project (i.e. risk reports and policy check). When changing this value, keep in mind the checking of policies might have to wait for a new scan to process which can take some time. DEPRECATED: This property is now deprecated. Please use --detect.report.timeout in the future. NOTE the new property is in SECONDS not MILLISECONDS. It will cause failure in 6.0.0 and be removed in 7.0.0. general Property Description detect.detector.buildless default: false Buildless Mode: If set to true, only Detector's capable of running without a build will be run. detect.wait.for.results default: false Wait For Results: If set to true, Detect will wait for Synopsys products until results are available or the detect.report.timeout is exceeded. detect.parallel.processors (Advanced) default: 1 Detect Parallel Processors: The number of threads to run processes in parallel, defaults to 1, but if you specify less than or equal to 0, the number of processors on the machine will be used. detect.ignore.connection.failures (Advanced) default: false Detect Ignore Connection Failures: If true, Detect will ignore any products that it cannot connect to. detect.force.success (Advanced) default: false Force Success: If true, Detect will always exit with code 0. pear Property Description detect.pear.only.required.deps default: false Include Only Required Pear Dependencies: Set to true if you would like to include only required packages. detect.pear.path Pear Executable: The path to the pear executable. pip Property Description detect.pip.project.name PIP Project Name: The name of your PIP project, to be used if your project's name cannot be correctly inferred from its setup.py file. detect.pip.project.version.name PIP Project Version Name: The version of your PIP project, to be used if your project's version name cannot be correctly inferred from its setup.py file. detect.pip.requirements.path PIP Requirements Path: A comma-separated list of paths to requirements.txt files. detect.pip.only.project.tree default: false PIP Include Only Project Tree: By default, pipenv includes all dependencies found in the graph. Set to true to only include dependencies found underneath the dependency that matches the provided pip project and version name. detect.pipenv.path Pipenv Executable: The path to the Pipenv executable. conda Property Description detect.conda.environment.name Anaconda Environment Name: The name of the anaconda environment used by your project. detect.conda.path Conda Executable: The path to the conda executable. hex Property Description detect.hex.rebar3.path Rebar3 Executable: The path to the rebar3 executable. python Property Description detect.python.path Python Executable: The path to the Python executable. detect.python.python3 default: false Use Python3: If true will use Python 3 if available on class path. debug Property Description detect.diagnostic default: false Diagnostic Mode: When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. detect.diagnostic.extended default: false Diagnostic Mode Extended: When enabled, Synopsys Detect performs the actions of --detect.diagnostic, but also includes relevant files such as lock files and build artifacts. binary scanner Property Description detect.binary.scan.file.path Binary Scan Target: If specified, this file and this file only will be uploaded for binary scan analysis. This property takes precedence over detect.binary.scan.file.name.patterns. The BINARY_SCAN tool does not provide project and version name defaults to Detect, so you need to set project and version names via properties when only the BINARY_SCAN tool is invoked. detect.binary.scan.file.name.patterns Binary Scan Filename Patterns: If specified, all files in the source directory whose names match these file name patterns will be zipped and uploaded for binary scan analysis. This property will not be used if detect.binary.scan.file.path is specified. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. maven Property Description detect.maven.build.command Maven Build Command: Maven command line arguments to add to the mvn/mvnw command line. detect.maven.path Maven Executable: The path to the Maven executable (mvn or mvnw). detect.maven.included.scopes Dependency Scope Included: A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude). detect.maven.excluded.scopes Dependency Scope Excluded: A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include). detect.maven.excluded.modules (Advanced) Maven Modules Excluded: A comma-separated list of Maven modules (sub-projects) to exclude. detect.maven.included.modules (Advanced) Maven Modules Included: A comma-separated list of Maven modules (sub-projects) to include. detect.maven.include.plugins (Advanced) default: false Maven Include Plugins: Whether or not detect will include the plugins section when parsing a pom.xml. detect.maven.scope (Deprecated) Dependency Scope Included: The name of a Maven scope. Output will be limited to dependencies with this scope. DEPRECATED: This property is changing. Please use --detect.maven.included.scope in the future. It will cause failure in 7.0.0 and be removed in 8.0.0. go Property Description detect.go.path Go Executable: Path to the Go executable. npm Property Description detect.npm.arguments Additional NPM Command Arguments: A space-separated list of additional arguments to add to the npm command line when running Detect against an NPM project. detect.npm.include.dev.dependencies default: true Include NPM Development Dependencies: Set this value to false if you would like to exclude your dev dependencies when ran. detect.npm.path NPM Executable: The path to the Npm executable. polaris Property Description detect.polaris.enabled (Deprecated) default: false Detect Polaris Enabled: Set to false to disable the Synopsys Polaris Tool. DEPRECATED: This property is changing. Please use --detect.tools and POLARIS in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. polaris.url (Deprecated) Polaris Url: The url of your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.access.token (Deprecated) Polaris Access Token: The access token for your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.arguments (Deprecated) Polaris Arguments: Additional arguments to pass to polaris separated by space. The polaris.command takes precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.command (Deprecated) Polaris Command: A replacement command to pass to polaris separated by space. Include the analyze or setup command itself. If specified, polaris.arguments will be ignored and this will take precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. nuget Property Description detect.dotnet.path dotnet Executable: The path to the dotnet executable. detect.nuget.config.path Nuget Config File: The path to the Nuget.Config file to supply to the nuget exe. detect.nuget.packages.repo.url default: https://api.nuget.org/v3/index.json Nuget Packages Repository URL: The source for nuget packages detect.nuget.excluded.modules (Advanced) Nuget Projects Excluded: The names of the projects in a solution to exclude. detect.nuget.ignore.failure (Advanced) default: false Ignore Nuget Failures: If true errors will be logged and then ignored. detect.nuget.included.modules (Advanced) Nuget Modules Included: The names of the projects in a solution to include (overrides exclude). detect.nuget.inspector.air.gap.path (Advanced) Nuget Inspector AirGap Path: The path to the directory containing the nuget inspector nupkg. detect.nuget.inspector.version (Advanced) Nuget Inspector Version: Version of the Nuget Inspector. By default Detect will run the latest version that is compatible with the Detect version. detect.nuget.inspector.name (Deprecated) default: IntegrationNugetInspector Detect Nuget Inspector Name: Name of the Nuget Inspector package and the Nuget Inspector exe. (Do not include '.exe'.) DEPRECATED: In the future, Detect will not look for a custom named inspector. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.nuget.path (Deprecated) Detect Nuget Path: The path to the Nuget executable. Nuget is used to download the classic inspectors nuget package. DEPRECATED: In the future, Detect will no longer need a nuget executable as it will download the inspector from Artifactory exclusively. It will cause failure in 6.0.0 and be removed in 7.0.0. lerna Property Description detect.lerna.path Lerna Executable: Path of the lerna executable. detect.lerna.include.private default: false Include Lerna Packages defined as private.: Lerna allows for private packages that do not get published. Set this to true to include all packages including private packages. ruby Property Description detect.ruby.include.runtime.dependencies default: true Ruby Runtime Dependencies: If set to false, runtime dependencies will not be included when parsing *.gemspec files. detect.ruby.include.dev.dependencies default: false Ruby Development Dependencies: If set to true, development dependencies will be included when parsing *.gemspec files. impact analysis Property Description detect.impact.analysis.enabled default: false Vulnerability Impact Analysis Enabled: If set to true, Detect will attempt to look for *.class files and generate a Vulnerability Impact Analysis Report for upload to Black Duck. detect.impact.analysis.output.path Impact Analysis Output Directory: The path to the output directory for Impact Analysis reports. gradle Property Description detect.gradle.build.command Gradle Build Command: Gradle command line arguments to add to the gradle/gradlew command line. detect.gradle.path Gradle Executable: The path to the Gradle executable (gradle or gradlew). detect.gradle.excluded.configurations (Advanced) Gradle Exclude Configurations: A comma-separated list of Gradle configurations to exclude. detect.gradle.excluded.projects (Advanced) Gradle Exclude Projects: A comma-separated list of Gradle sub-projects to exclude. detect.gradle.included.configurations (Advanced) Gradle Include Configurations: A comma-separated list of Gradle configurations to include. detect.gradle.included.projects (Advanced) Gradle Include Projects: A comma-separated list of Gradle sub-projects to include. detect.gradle.inspector.air.gap.path (Advanced) Gradle Inspector AirGap Path: The path to the directory containing the air gap dependencies for the gradle inspector. detect.gradle.inspector.version (Advanced) Gradle Inspector Version: The version of the Gradle Inspector that Detect should use. By default, Detect will try to automatically determine the correct Gradle Inspector version. detect.gradle.inspector.repository.url (Deprecated) Detect Gradle Inspector Repository Url: The respository gradle should use to look for the gradle inspector dependencies. DEPRECATED: In the future, the gradle inspector will no longer be downloaded from a custom repository, please use Detect Air Gap instead. It will cause failure in 6.0.0 and be removed in 7.0.0. proxy Property Description blackduck.proxy.host (Advanced) Proxy Host: Hostname for proxy server. blackduck.proxy.ignored.hosts (Advanced) Bypass Proxy Hosts: A comma separated list of regular expression host patterns that should not use the proxy. blackduck.proxy.ntlm.domain (Advanced) NTLM Proxy Domain: NTLM Proxy domain. blackduck.proxy.ntlm.workstation (Advanced) NTLM Proxy Workstation: NTLM Proxy workstation. blackduck.proxy.password (Advanced) Proxy Password: Proxy password. blackduck.proxy.port (Advanced) Proxy Port: Proxy port. blackduck.proxy.username (Advanced) Proxy Username: Proxy username. cpan Property Description detect.cpan.path cpan Executable: The path to the cpan executable. detect.cpanm.path cpanm Executable: The path to the cpanm executable. cleanup Property Description detect.cleanup default: true Cleanup Output: If true, the files created by Detect will be cleaned up. paths Property Description detect.bash.path Bash Executable: Path to the Bash executable. detect.bdio.output.path BDIO Output Directory: The path to the output directory for all BDIO files. detect.bdio2.enabled default: false BDIO 2 Enabled: The version of BDIO files to generate. detect.detector.search.depth default: 0 Detector Search Depth: Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies. detect.git.path Git Executable: Path of the git executable detect.java.path Java Executable: Path to the java executable. detect.output.path Detect Output Path: The path to the output directory. detect.swift.path Swift Executable: Path of the swift executable. detect.resolve.tilde.in.paths default: true Resolve Tilde in Paths: If set to false Detect will not automatically resolve the '~/' prefix in a mac or linux path to the user's home directory. detect.scan.output.path Scan Output Path: The output directory for all signature scanner output files. If not set, the signature scanner output files will be in a 'scan' subdirectory of the output directory. detect.source.path Source Path: The path to the project directory to inspect. detect.tools Acceptable Values: ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Detect Tools Included: The tools Detect should allow in a comma-separated list. Tools in this list (as long as they are not also in the excluded list) will be allowed to run if all criteria of the tool are met. Exclusion rules always win. detect.tools.excluded Acceptable Values: ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Detect Tools Excluded: The tools Detect should not allow, in a comma-separated list. Excluded tools will not be run even if all criteria for the tool is met. Exclusion rules always win. detect.detector.search.continue (Advanced) default: false Detector Search Continue: If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. detect.detector.search.exclusion (Advanced) Detector Directory Exclusions: A comma-separated list of directory names to exclude from detector search. detect.detector.search.exclusion.patterns (Advanced) Detector Directory Patterns Exclusions: A comma-separated list of directory name patterns to exclude from detector search. detect.detector.search.exclusion.paths (Advanced) Detector Directory Path Exclusions: A comma-separated list of directory paths to exclude from detector search. (E.g. 'foo/bar/biz' will only exclude the 'biz' directory if the parent directory structure is 'foo/bar/'.) detect.detector.search.exclusion.files (Advanced) Detector File Exclusions: A comma-separated list of file names to exclude from detector search. detect.detector.search.exclusion.defaults (Advanced) default: true Detector Exclude Default Directories: If true, the bom tool search will exclude the default directory names. See the detailed help for more information. detect.tools.output.path (Advanced) Detect Tools Output Path: The path to the tools directory where detect should download and/or access things like the Signature Scanner that it shares over multiple runs. detect.project.detector (Advanced) Project Name and Version Detector: The detector that will be used to determine the project name and version when multiple detector types. This property should be used with the detect.project.tool. detect.project.tool (Advanced) default: DOCKER,DETECTOR,BAZEL Acceptable Values: DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Detector Tool Priority: The tool priority for project name and version. The project name and version will be determined by the first tool in this list that provides them. detect.bom.tool.search.exclusion.defaults (Deprecated) default: true Detect Bom Tool Search Exclusion Defaults: If true, the bom tool search will exclude the default directory names. See the detailed help for more information. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion.defaults in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.exclusion (Deprecated) Detect Bom Tool Search Exclusion: A comma-separated list of directory names to exclude from the bom tool search. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.project.bom.tool (Deprecated) Detect Project Bom Tool: The detector to choose when multiple detector types are found and one needs to be chosen for project name and version. This property should be used with the detect.project.tool. DEPRECATED: This property is changing. Please use --detect.project.detector in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.depth (Deprecated) default: 0 Detect Bom Tool Search Depth: Depth of subdirectories within the source directory to search for files that indicate whether a detector applies. DEPRECATED: This property is changing. Please use --detect.detector.search.depth in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.continue (Deprecated) default: false Detect Bom Tool Search Continue: If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. DEPRECATED: This property is changing. Please use --detect.detector.search.continue in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. signature scanner Property Description detect.blackduck.signature.scanner.arguments Signature Scanner Arguments: Additional arguments to use when running the Black Duck signature scanner. detect.blackduck.signature.scanner.copyright.search default: false Signature Scanner Copyright Search: When set to true, user will be able to scan and discover copyright names in Black Duck. detect.blackduck.signature.scanner.dry.run default: false Signature Scanner Dry Run: If set to true, the signature scanner results are not uploaded to Black Duck, and the scanner results are written to disk. detect.blackduck.signature.scanner.exclusion.name.patterns default: node_modules Directory Name Exclusion Patterns: A comma-separated list of directory name patterns for which Detect searches and adds to the signature scanner --exclude flag values. detect.blackduck.signature.scanner.exclusion.pattern.search.depth default: 4 Exclusion Patterns Search Depth: Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns. detect.blackduck.signature.scanner.exclusion.patterns Exclusion Patterns: A comma-separated list of values to be used with the Signature Scanner --exclude flag. detect.blackduck.signature.scanner.individual.file.matching default: NONE Acceptable Values: NONE, SOURCE, BINARY, ALL Individual File Matching: Users may set this property to indicate what types of files they want to match detect.blackduck.signature.scanner.license.search default: false Signature Scanner License Search: When set to true, user will be able to scan and discover license names in Black Duck detect.blackduck.signature.scanner.local.path Signature Scanner Local Path: To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. detect.blackduck.signature.scanner.paths Signature Scanner Target Paths: These paths and only these paths will be scanned. detect.blackduck.signature.scanner.snippet.matching default: NONE Acceptable Values: NONE, SNIPPET_MATCHING, SNIPPET_MATCHING_ONLY, FULL_SNIPPET_MATCHING, FULL_SNIPPET_MATCHING_ONLY Snippet Matching: Use this value to enable the various snippet scanning modes. For a full explanation, please refer to the 'Running a component scan using the Signature Scanner command line' section in your Black Duck server's online help. detect.blackduck.signature.scanner.upload.source.mode default: false Upload source mode: If set to true, the signature scanner will, if supported by your Black Duck version, upload source code to Black Duck. detect.blackduck.signature.scanner.host.url (Advanced) Signature Scanner Host URL: If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Black Duck's urls for different operating systems. detect.blackduck.signature.scanner.memory (Advanced) default: 4096 Signature Scanner Memory: The memory for the scanner to use. detect.blackduck.signature.scanner.offline.local.path (Advanced) Signature Scanner Local Path (Offline): To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. detect.hub.signature.scanner.dry.run (Deprecated) default: false Detect Hub Signature Scanner Dry Run: If set to true, the signature scanner results will not be uploaded to the Hub and the scanner results will be written to disk. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.dry.run in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.snippet.mode (Deprecated) default: false Detect Hub Signature Scanner Snippet Mode: If set to true, the signature scanner will, if supported by your Hub version, run in snippet scanning mode. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.snippet.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.exclusion.patterns (Deprecated) Detect Hub Signature Scanner Exclusion Patterns: A comma-separated list of values to be used with the Signature Scanner --exclude flag. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.paths (Deprecated) Detect Hub Signature Scanner Paths: These paths and only these paths will be scanned. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.paths in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.exclusion.name.patterns (Deprecated) default: node_modules Detect Hub Signature Scanner Exclusion Name Patterns: A comma-separated list of directory name patterns Detect will search for and add to the Signature Scanner --exclude flag values. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.name.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.memory (Deprecated) default: 4096 Detect Hub Signature Scanner Memory: The memory for the scanner to use. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.memory in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.disabled (Deprecated) default: false Detect Hub Signature Scanner Disabled: Set to true to disable the Hub Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.disabled (Deprecated) default: false Detect Blackduck Signature Scanner Disabled: Set to true to disable the Black Duck Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.offline.local.path (Deprecated) Detect Hub Signature Scanner Offline Local Path: To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.offline.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.local.path (Deprecated) Detect Hub Signature Scanner Local Path: To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.host.url (Deprecated) Detect Hub Signature Scanner Host Url: If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Hub's urls for different operating systems. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.host.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.parallel.processors (Deprecated) default: 1 Signature Scanner Parallel Processors: The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. The --detect.parallel.processors property will take precedence over this property. It will cause failure in 7.0.0 and be removed in 8.0.0. detect.hub.signature.scanner.parallel.processors (Deprecated) default: 1 Detect Hub Signature Scanner Parallel Processors: The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.arguments (Deprecated) Detect Hub Signature Scanner Arguments: Additional arguments to use when running the Hub signature scanner. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.arguments in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.snippet.mode (Deprecated) default: false Snippet Scanning: If set to true, the signature scanner will, if supported by your Black Duck version, run in snippet scanning mode. DEPRECATED: This property is now deprecated. Please use --detect.blackduck.signature.scanner.snippet.matching in the future. NOTE the new property is one of a particular set of values. You will need to consult the documentation for the Signature Scanner in Black Duck for details. It will cause failure in 6.0.0 and be removed in 7.0.0. report Property Description detect.notices.report default: false Generate Notices Report: When set to true, a Black Duck notices report in text form will be created in your source directory. detect.notices.report.path default: . Notices Report Path: The output directory for notices report. Default is the source directory. detect.risk.report.pdf default: false Generate Risk Report (PDF): When set to true, a Black Duck risk report in PDF form will be created. detect.risk.report.pdf.path default: . Risk Report Output Path: The output directory for risk report in PDF. Default is the source directory. logging Property Description logging.level.com.synopsys.integration default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level: The logging level of Detect. logging.level.detect default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level Shorthand: Shorthand for the logging level of detect. Equivalent to setting logging.level.com.synopsys.integration. detect.suppress.configuration.output (Deprecated) default: false Detect Suppress Configuration Output: If true, the default behavior of printing your configuration properties at startup will be suppressed. DEPRECATED: This property is being removed. Configuration can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.suppress.results.output (Deprecated) default: false Detect Suppress Results Output: If true, the default behavior of printing the Detect Results will be suppressed. DEPRECATED: This property is being removed. Results can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. logging.level.com.blackducksoftware.integration (Deprecated) default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level: The logging level of Detect. DEPRECATED: This property is changing. Please use --logging.level.com.synopsys.integration in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. yarn Property Description detect.yarn.prod.only default: false Include Yarn Production Dependencies Only: Set this to true to only scan production dependencies. detector Property Description detect.required.detector.types Acceptable Values: BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Required Detect Types: The set of required detectors. detect.excluded.detector.types (Advanced) Acceptable Values: ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Detector Types Excluded: By default, all detectors will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all detectors, specify \"ALL\". Exclusion rules always win. detect.included.detector.types (Advanced) Acceptable Values: ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Detector Types Included: By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. detect.excluded.bom.tool.types (Deprecated) Detect Excluded Bom Tool Types: By default, all tools will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all tools, specify \"ALL\". Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.excluded.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.included.bom.tool.types (Deprecated) Detect Included Bom Tool Types: By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.included.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.required.bom.tool.types (Deprecated) Detect Required Bom Tool Types: If set, Detect will fail if it does not find the bom tool types supplied here. DEPRECATED: This property is changing. Please use --detect.required.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0.","title":"All properties"},{"location":"properties/basic-properties/","text":"This page lists Synopsys Detect's basic properties; for advanced and deprecated properties, refer to all properties . packagist Property Description detect.packagist.include.dev.dependencies default: true Include Packagist Development Dependencies: Set this value to false if you would like to exclude your dev requires dependencies when ran. sbt Property Description detect.sbt.report.search.depth default: 3 SBT Report Search Depth: Depth the sbt detector will use to search for report files. bitbake Property Description detect.bitbake.build.env.name default: oe-init-build-env BitBake Init Script Name: The name of the build environment init script. detect.bitbake.package.names BitBake Package Names: A comma-separated list of package names from which dependencies are extracted. detect.bitbake.source.arguments BitBake Source Arguments: A comma-separated list of arguments to supply when sourcing the build environment init script. detect.bitbake.search.depth default: 1 BitBake Search Depth: The depth at which Detect will search for files generated by Bitbake. project Property Description detect.policy.check.fail.on.severities default: NONE Acceptable Values: ALL, NONE, UNSPECIFIED, TRIVIAL, MINOR, MAJOR, CRITICAL, BLOCKER Fail on Policy Violation Severities: A comma-separated list of policy violation severities that will fail Detect. If this is set to NONE, Detect will not fail due to policy violations. A value of ALL is equivalent to all of the other possible values except NONE. detect.project.description Project Description: If project description is specified, your project version will be created with this description. detect.project.name Project Name: An override for the name to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable project name. If that fails, the final part of the directory path where the inspection is taking place will be used. detect.project.tier Project Tier: If a Black Duck project tier is specified, your project will be created with this tier. detect.project.version.name Version Name: An override for the version to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable version name. If that fails, the current date will be used. detect.project.version.nickname Version Nickname: If a project version nickname is specified, your project version will be created with this nickname. detect.project.version.notes Version Notes: If project version notes are specified, your project version will be created with these notes. detect.project.version.phase default: DEVELOPMENT Acceptable Values: ARCHIVED, DEPRECATED, DEVELOPMENT, PLANNING, PRERELEASE, RELEASED Version Phase: An override for the Project Version phase. detect.project.version.update default: false Update Project Version: If set to true, will update the Project Version with the configured properties. See detailed help for more information. blackduck server Property Description blackduck.api.token Black Duck API Token: The API token used to authenticate with the Black Duck Server. blackduck.offline.mode default: false Offline Mode: This can disable any Black Duck communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner. blackduck.password Black Duck Password: Black Duck password. blackduck.url Black Duck URL: URL of the Black Duck server. blackduck.username Black Duck Username: Black Duck username. detect.report.timeout default: 300 Report Generation Timeout: The amount of time in seconds Detect will wait for scans to finish and to generate reports (i.e. risk and policy check). When changing this value, keep in mind the checking of policies might have to wait for scans to process which can take some time. detect.test.connection default: false Test Connection to Black Duck: Test the connection to Black Duck with the current configuration. docker Property Description detect.docker.image Docker Image Name: The Docker image name to inspect. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. detect.docker.image.id Docker Image ID: The Docker image ID to inspect. detect.docker.path Docker Executable: Path to the docker executable. detect.docker.tar Docker Image Archive File: A saved Docker image - must be a .tar file. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. bazel Property Description detect.bazel.path Bazel Executable: The path to the Bazel executable. detect.bazel.target Bazel Target: The Bazel target (for example, //foo:foolib) for which dependencies are collected. For Detect to run Bazel, this property must be set. detect.bazel.cquery.options Bazel cquery additional options: A comma-separated list of additional options to pass to the bazel cquery command. detect.bazel.dependency.type Acceptable Values: ALL, NONE, MAVEN_JAR, MAVEN_INSTALL, HASKELL_CABAL_LIBRARY Bazel workspace external dependency rule: The Bazel workspace rule(s) used to pull in external dependencies. If not set, Detect will attempt to determine the rule(s) from the contents of the WORKSPACE file. general Property Description detect.detector.buildless default: false Buildless Mode: If set to true, only Detector's capable of running without a build will be run. detect.wait.for.results default: false Wait For Results: If set to true, Detect will wait for Synopsys products until results are available or the detect.report.timeout is exceeded. pear Property Description detect.pear.only.required.deps default: false Include Only Required Pear Dependencies: Set to true if you would like to include only required packages. detect.pear.path Pear Executable: The path to the pear executable. pip Property Description detect.pip.project.name PIP Project Name: The name of your PIP project, to be used if your project's name cannot be correctly inferred from its setup.py file. detect.pip.project.version.name PIP Project Version Name: The version of your PIP project, to be used if your project's version name cannot be correctly inferred from its setup.py file. detect.pip.requirements.path PIP Requirements Path: A comma-separated list of paths to requirements.txt files. detect.pip.only.project.tree default: false PIP Include Only Project Tree: By default, pipenv includes all dependencies found in the graph. Set to true to only include dependencies found underneath the dependency that matches the provided pip project and version name. detect.pipenv.path Pipenv Executable: The path to the Pipenv executable. conda Property Description detect.conda.environment.name Anaconda Environment Name: The name of the anaconda environment used by your project. detect.conda.path Conda Executable: The path to the conda executable. hex Property Description detect.hex.rebar3.path Rebar3 Executable: The path to the rebar3 executable. python Property Description detect.python.path Python Executable: The path to the Python executable. detect.python.python3 default: false Use Python3: If true will use Python 3 if available on class path. debug Property Description detect.diagnostic default: false Diagnostic Mode: When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. detect.diagnostic.extended default: false Diagnostic Mode Extended: When enabled, Synopsys Detect performs the actions of --detect.diagnostic, but also includes relevant files such as lock files and build artifacts. binary scanner Property Description detect.binary.scan.file.path Binary Scan Target: If specified, this file and this file only will be uploaded for binary scan analysis. This property takes precedence over detect.binary.scan.file.name.patterns. The BINARY_SCAN tool does not provide project and version name defaults to Detect, so you need to set project and version names via properties when only the BINARY_SCAN tool is invoked. detect.binary.scan.file.name.patterns Binary Scan Filename Patterns: If specified, all files in the source directory whose names match these file name patterns will be zipped and uploaded for binary scan analysis. This property will not be used if detect.binary.scan.file.path is specified. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. maven Property Description detect.maven.build.command Maven Build Command: Maven command line arguments to add to the mvn/mvnw command line. detect.maven.path Maven Executable: The path to the Maven executable (mvn or mvnw). detect.maven.included.scopes Dependency Scope Included: A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude). detect.maven.excluded.scopes Dependency Scope Excluded: A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include). go Property Description detect.go.path Go Executable: Path to the Go executable. npm Property Description detect.npm.arguments Additional NPM Command Arguments: A space-separated list of additional arguments to add to the npm command line when running Detect against an NPM project. detect.npm.include.dev.dependencies default: true Include NPM Development Dependencies: Set this value to false if you would like to exclude your dev dependencies when ran. detect.npm.path NPM Executable: The path to the Npm executable. nuget Property Description detect.dotnet.path dotnet Executable: The path to the dotnet executable. detect.nuget.config.path Nuget Config File: The path to the Nuget.Config file to supply to the nuget exe. detect.nuget.packages.repo.url default: https://api.nuget.org/v3/index.json Nuget Packages Repository URL: The source for nuget packages lerna Property Description detect.lerna.path Lerna Executable: Path of the lerna executable. detect.lerna.include.private default: false Include Lerna Packages defined as private.: Lerna allows for private packages that do not get published. Set this to true to include all packages including private packages. ruby Property Description detect.ruby.include.runtime.dependencies default: true Ruby Runtime Dependencies: If set to false, runtime dependencies will not be included when parsing *.gemspec files. detect.ruby.include.dev.dependencies default: false Ruby Development Dependencies: If set to true, development dependencies will be included when parsing *.gemspec files. impact analysis Property Description detect.impact.analysis.enabled default: false Vulnerability Impact Analysis Enabled: If set to true, Detect will attempt to look for *.class files and generate a Vulnerability Impact Analysis Report for upload to Black Duck. detect.impact.analysis.output.path Impact Analysis Output Directory: The path to the output directory for Impact Analysis reports. gradle Property Description detect.gradle.build.command Gradle Build Command: Gradle command line arguments to add to the gradle/gradlew command line. detect.gradle.path Gradle Executable: The path to the Gradle executable (gradle or gradlew). cpan Property Description detect.cpan.path cpan Executable: The path to the cpan executable. detect.cpanm.path cpanm Executable: The path to the cpanm executable. cleanup Property Description detect.cleanup default: true Cleanup Output: If true, the files created by Detect will be cleaned up. paths Property Description detect.bash.path Bash Executable: Path to the Bash executable. detect.bdio.output.path BDIO Output Directory: The path to the output directory for all BDIO files. detect.bdio2.enabled default: false BDIO 2 Enabled: The version of BDIO files to generate. detect.detector.search.depth default: 0 Detector Search Depth: Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies. detect.git.path Git Executable: Path of the git executable detect.java.path Java Executable: Path to the java executable. detect.output.path Detect Output Path: The path to the output directory. detect.swift.path Swift Executable: Path of the swift executable. detect.resolve.tilde.in.paths default: true Resolve Tilde in Paths: If set to false Detect will not automatically resolve the '~/' prefix in a mac or linux path to the user's home directory. detect.scan.output.path Scan Output Path: The output directory for all signature scanner output files. If not set, the signature scanner output files will be in a 'scan' subdirectory of the output directory. detect.source.path Source Path: The path to the project directory to inspect. detect.tools Acceptable Values: ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Detect Tools Included: The tools Detect should allow in a comma-separated list. Tools in this list (as long as they are not also in the excluded list) will be allowed to run if all criteria of the tool are met. Exclusion rules always win. detect.tools.excluded Acceptable Values: ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Detect Tools Excluded: The tools Detect should not allow, in a comma-separated list. Excluded tools will not be run even if all criteria for the tool is met. Exclusion rules always win. signature scanner Property Description detect.blackduck.signature.scanner.arguments Signature Scanner Arguments: Additional arguments to use when running the Black Duck signature scanner. detect.blackduck.signature.scanner.copyright.search default: false Signature Scanner Copyright Search: When set to true, user will be able to scan and discover copyright names in Black Duck. detect.blackduck.signature.scanner.dry.run default: false Signature Scanner Dry Run: If set to true, the signature scanner results are not uploaded to Black Duck, and the scanner results are written to disk. detect.blackduck.signature.scanner.exclusion.name.patterns default: node_modules Directory Name Exclusion Patterns: A comma-separated list of directory name patterns for which Detect searches and adds to the signature scanner --exclude flag values. detect.blackduck.signature.scanner.exclusion.pattern.search.depth default: 4 Exclusion Patterns Search Depth: Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns. detect.blackduck.signature.scanner.exclusion.patterns Exclusion Patterns: A comma-separated list of values to be used with the Signature Scanner --exclude flag. detect.blackduck.signature.scanner.individual.file.matching default: NONE Acceptable Values: NONE, SOURCE, BINARY, ALL Individual File Matching: Users may set this property to indicate what types of files they want to match detect.blackduck.signature.scanner.license.search default: false Signature Scanner License Search: When set to true, user will be able to scan and discover license names in Black Duck detect.blackduck.signature.scanner.local.path Signature Scanner Local Path: To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. detect.blackduck.signature.scanner.paths Signature Scanner Target Paths: These paths and only these paths will be scanned. detect.blackduck.signature.scanner.snippet.matching default: NONE Acceptable Values: NONE, SNIPPET_MATCHING, SNIPPET_MATCHING_ONLY, FULL_SNIPPET_MATCHING, FULL_SNIPPET_MATCHING_ONLY Snippet Matching: Use this value to enable the various snippet scanning modes. For a full explanation, please refer to the 'Running a component scan using the Signature Scanner command line' section in your Black Duck server's online help. detect.blackduck.signature.scanner.upload.source.mode default: false Upload source mode: If set to true, the signature scanner will, if supported by your Black Duck version, upload source code to Black Duck. report Property Description detect.notices.report default: false Generate Notices Report: When set to true, a Black Duck notices report in text form will be created in your source directory. detect.notices.report.path default: . Notices Report Path: The output directory for notices report. Default is the source directory. detect.risk.report.pdf default: false Generate Risk Report (PDF): When set to true, a Black Duck risk report in PDF form will be created. detect.risk.report.pdf.path default: . Risk Report Output Path: The output directory for risk report in PDF. Default is the source directory. logging Property Description logging.level.com.synopsys.integration default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level: The logging level of Detect. logging.level.detect default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level Shorthand: Shorthand for the logging level of detect. Equivalent to setting logging.level.com.synopsys.integration. yarn Property Description detect.yarn.prod.only default: false Include Yarn Production Dependencies Only: Set this to true to only scan production dependencies. detector Property Description detect.required.detector.types Acceptable Values: BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Required Detect Types: The set of required detectors.","title":"Basic properties"},{"location":"properties/deprecated-properties/","text":"This page lists Synopsys Detect's deprecated properties; for both active and deprecated properties, refer to all properties . bitbake Property Description detect.bitbake.reference.impl default: -poky-linux Reference implementation: The reference implementation of the Yocto project. These characters are stripped from the discovered target architecture. DEPRECATED: This property is no longer required and will not be used in the Bitbake Detector. It will cause failure in 7.0.0 and be removed in 8.0.0. blackduck server Property Description blackduck.hub.url Blackduck Hub Url: URL of the Hub server. DEPRECATED: This property is changing. Please use --blackduck.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.timeout default: 120 Blackduck Hub Timeout: The time to wait for rest connections to complete in seconds. DEPRECATED: This property is changing. Please use --blackduck.timeout in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.username Blackduck Hub Username: Hub username. DEPRECATED: This property is changing. Please use --blackduck.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.password Blackduck Hub Password: Hub password. DEPRECATED: This property is changing. Please use --blackduck.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.api.token Blackduck Hub Api Token: Hub API Token. DEPRECATED: This property is changing. Please use --blackduck.api.token in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.host Blackduck Hub Proxy Host: Proxy host. DEPRECATED: This property is changing. Please use --blackduck.proxy.host in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.port Blackduck Hub Proxy Port: Proxy port. DEPRECATED: This property is changing. Please use --blackduck.proxy.port in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.username Blackduck Hub Proxy Username: Proxy username. DEPRECATED: This property is changing. Please use --blackduck.proxy.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.password Blackduck Hub Proxy Password: Proxy password. DEPRECATED: This property is changing. Please use --blackduck.proxy.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ntlm.domain Blackduck Hub Proxy Ntlm Domain: NTLM Proxy domain. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.domain in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ignored.hosts Blackduck Hub Proxy Ignored Hosts: A comma-separated list of host patterns that should not use the proxy. DEPRECATED: This property is changing. Please use --blackduck.proxy.ignored.hosts in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.proxy.ntlm.workstation Blackduck Hub Proxy Ntlm Workstation: NTLM Proxy workstation. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.workstation in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.trust.cert default: false Blackduck Hub Trust Cert: If true, automatically trusts the certificate for the current run of Detect only. DEPRECATED: This property is changing. Please use --blackduck.trust.cert in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. blackduck.hub.offline.mode default: false Blackduck Hub Offline Mode: This disables any Hub communication. If true, Detect does not upload BDIO files, does not check policies, and does not download and install the signature scanner. DEPRECATED: This property is changing. Please use --blackduck.offline.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.disable.without.hub default: false Detect Disable Without Hub: If true, during initialization Detect will check for Hub connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.disable.without.blackduck default: false Check For Valid Black Duck Connection: If true, during initialization Detect will check for Black Duck connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. project info Property Description detect.api.timeout default: 300000 Detect Api Timeout: Timeout for response from Black Duck regarding your project (i.e. risk reports and policy check). When changing this value, keep in mind the checking of policies might have to wait for a new scan to process which can take some time. DEPRECATED: This property is now deprecated. Please use --detect.report.timeout in the future. NOTE the new property is in SECONDS not MILLISECONDS. It will cause failure in 6.0.0 and be removed in 7.0.0. maven Property Description detect.maven.scope Dependency Scope Included: The name of a Maven scope. Output will be limited to dependencies with this scope. DEPRECATED: This property is changing. Please use --detect.maven.included.scope in the future. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris Property Description detect.polaris.enabled default: false Detect Polaris Enabled: Set to false to disable the Synopsys Polaris Tool. DEPRECATED: This property is changing. Please use --detect.tools and POLARIS in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. polaris.url Polaris Url: The url of your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.access.token Polaris Access Token: The access token for your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.arguments Polaris Arguments: Additional arguments to pass to polaris separated by space. The polaris.command takes precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. polaris.command Polaris Command: A replacement command to pass to polaris separated by space. Include the analyze or setup command itself. If specified, polaris.arguments will be ignored and this will take precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. nuget Property Description detect.nuget.inspector.name default: IntegrationNugetInspector Detect Nuget Inspector Name: Name of the Nuget Inspector package and the Nuget Inspector exe. (Do not include '.exe'.) DEPRECATED: In the future, Detect will not look for a custom named inspector. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.nuget.path Detect Nuget Path: The path to the Nuget executable. Nuget is used to download the classic inspectors nuget package. DEPRECATED: In the future, Detect will no longer need a nuget executable as it will download the inspector from Artifactory exclusively. It will cause failure in 6.0.0 and be removed in 7.0.0. gradle Property Description detect.gradle.inspector.repository.url Detect Gradle Inspector Repository Url: The respository gradle should use to look for the gradle inspector dependencies. DEPRECATED: In the future, the gradle inspector will no longer be downloaded from a custom repository, please use Detect Air Gap instead. It will cause failure in 6.0.0 and be removed in 7.0.0. paths Property Description detect.bom.tool.search.exclusion.defaults default: true Detect Bom Tool Search Exclusion Defaults: If true, the bom tool search will exclude the default directory names. See the detailed help for more information. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion.defaults in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.exclusion Detect Bom Tool Search Exclusion: A comma-separated list of directory names to exclude from the bom tool search. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.project.bom.tool Detect Project Bom Tool: The detector to choose when multiple detector types are found and one needs to be chosen for project name and version. This property should be used with the detect.project.tool. DEPRECATED: This property is changing. Please use --detect.project.detector in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.depth default: 0 Detect Bom Tool Search Depth: Depth of subdirectories within the source directory to search for files that indicate whether a detector applies. DEPRECATED: This property is changing. Please use --detect.detector.search.depth in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.bom.tool.search.continue default: false Detect Bom Tool Search Continue: If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. DEPRECATED: This property is changing. Please use --detect.detector.search.continue in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. signature scanner Property Description detect.hub.signature.scanner.dry.run default: false Detect Hub Signature Scanner Dry Run: If set to true, the signature scanner results will not be uploaded to the Hub and the scanner results will be written to disk. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.dry.run in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.snippet.mode default: false Detect Hub Signature Scanner Snippet Mode: If set to true, the signature scanner will, if supported by your Hub version, run in snippet scanning mode. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.snippet.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.exclusion.patterns Detect Hub Signature Scanner Exclusion Patterns: A comma-separated list of values to be used with the Signature Scanner --exclude flag. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.paths Detect Hub Signature Scanner Paths: These paths and only these paths will be scanned. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.paths in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.exclusion.name.patterns default: node_modules Detect Hub Signature Scanner Exclusion Name Patterns: A comma-separated list of directory name patterns Detect will search for and add to the Signature Scanner --exclude flag values. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.name.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.memory default: 4096 Detect Hub Signature Scanner Memory: The memory for the scanner to use. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.memory in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.disabled default: false Detect Hub Signature Scanner Disabled: Set to true to disable the Hub Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.disabled default: false Detect Blackduck Signature Scanner Disabled: Set to true to disable the Black Duck Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.offline.local.path Detect Hub Signature Scanner Offline Local Path: To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.offline.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.local.path Detect Hub Signature Scanner Local Path: To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.host.url Detect Hub Signature Scanner Host Url: If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Hub's urls for different operating systems. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.host.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.parallel.processors default: 1 Signature Scanner Parallel Processors: The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. The --detect.parallel.processors property will take precedence over this property. It will cause failure in 7.0.0 and be removed in 8.0.0. detect.hub.signature.scanner.parallel.processors default: 1 Detect Hub Signature Scanner Parallel Processors: The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.hub.signature.scanner.arguments Detect Hub Signature Scanner Arguments: Additional arguments to use when running the Hub signature scanner. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.arguments in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.blackduck.signature.scanner.snippet.mode default: false Snippet Scanning: If set to true, the signature scanner will, if supported by your Black Duck version, run in snippet scanning mode. DEPRECATED: This property is now deprecated. Please use --detect.blackduck.signature.scanner.snippet.matching in the future. NOTE the new property is one of a particular set of values. You will need to consult the documentation for the Signature Scanner in Black Duck for details. It will cause failure in 6.0.0 and be removed in 7.0.0. logging Property Description detect.suppress.configuration.output default: false Detect Suppress Configuration Output: If true, the default behavior of printing your configuration properties at startup will be suppressed. DEPRECATED: This property is being removed. Configuration can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.suppress.results.output default: false Detect Suppress Results Output: If true, the default behavior of printing the Detect Results will be suppressed. DEPRECATED: This property is being removed. Results can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. logging.level.com.blackducksoftware.integration default: INFO Acceptable Values: OFF, ERROR, WARN, INFO, DEBUG, TRACE Logging Level: The logging level of Detect. DEPRECATED: This property is changing. Please use --logging.level.com.synopsys.integration in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detector Property Description detect.excluded.bom.tool.types Detect Excluded Bom Tool Types: By default, all tools will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all tools, specify \"ALL\". Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.excluded.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.included.bom.tool.types Detect Included Bom Tool Types: By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.included.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. detect.required.bom.tool.types Detect Required Bom Tool Types: If set, Detect will fail if it does not find the bom tool types supplied here. DEPRECATED: This property is changing. Please use --detect.required.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0.","title":"Deprecated properties"},{"location":"properties/configuration/binary scanner/","text":"binary scanner # Binary Scan Target # --detect.binary.scan.file.path If specified, this file and this file only will be uploaded for binary scan analysis. This property takes precedence over detect.binary.scan.file.name.patterns. The BINARY_SCAN tool does not provide project and version name defaults to Detect, so you need to set project and version names via properties when only the BINARY_SCAN tool is invoked. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Binary Scan Filename Patterns # --detect.binary.scan.file.name.patterns If specified, all files in the source directory whose names match these file name patterns will be zipped and uploaded for binary scan analysis. This property will not be used if detect.binary.scan.file.path is specified. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"binary scanner"},{"location":"properties/configuration/binary scanner/#binary-scanner","text":"","title":"binary scanner"},{"location":"properties/configuration/binary scanner/#binary-scan-target","text":"--detect.binary.scan.file.path If specified, this file and this file only will be uploaded for binary scan analysis. This property takes precedence over detect.binary.scan.file.name.patterns. The BINARY_SCAN tool does not provide project and version name defaults to Detect, so you need to set project and version names via properties when only the BINARY_SCAN tool is invoked. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Binary Scan Target"},{"location":"properties/configuration/binary scanner/#binary-scan-filename-patterns","text":"--detect.binary.scan.file.name.patterns If specified, all files in the source directory whose names match these file name patterns will be zipped and uploaded for binary scan analysis. This property will not be used if detect.binary.scan.file.path is specified. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Binary Scan Filename Patterns"},{"location":"properties/configuration/blackduck server/","text":"blackduck server # Black Duck API Token # --blackduck.api.token The API token used to authenticate with the Black Duck Server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Offline Mode # --blackduck.offline.mode=false This can disable any Black Duck communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Black Duck Password # --blackduck.password Black Duck password. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Black Duck URL # --blackduck.url URL of the Black Duck server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Black Duck Username # --blackduck.username Black Duck username. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Report Generation Timeout # --detect.report.timeout=300 The amount of time in seconds Detect will wait for scans to finish and to generate reports (i.e. risk and policy check). When changing this value, keep in mind the checking of policies might have to wait for scans to process which can take some time. Details Added 5.2.0 Type Long Default Value 300 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Test Connection to Black Duck # --detect.test.connection=false Test the connection to Black Duck with the current configuration. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Black Duck Timeout (Advanced) # --blackduck.timeout=120 The time to wait for network connections to complete (in seconds). Details Added 4.2.0 Type Integer Default Value 120 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Trust All SSL Certificates (Advanced) # --blackduck.trust.cert=false If true, automatically trust the certificate for the current run of Detect only. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Url (Deprecated) # --blackduck.hub.url URL of the Hub server. DEPRECATED: This property is changing. Please use --blackduck.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Timeout (Deprecated) # --blackduck.hub.timeout=120 The time to wait for rest connections to complete in seconds. DEPRECATED: This property is changing. Please use --blackduck.timeout in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 120 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Username (Deprecated) # --blackduck.hub.username Hub username. DEPRECATED: This property is changing. Please use --blackduck.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Password (Deprecated) # --blackduck.hub.password Hub password. DEPRECATED: This property is changing. Please use --blackduck.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Api Token (Deprecated) # --blackduck.hub.api.token Hub API Token. DEPRECATED: This property is changing. Please use --blackduck.api.token in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Host (Deprecated) # --blackduck.hub.proxy.host Proxy host. DEPRECATED: This property is changing. Please use --blackduck.proxy.host in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Port (Deprecated) # --blackduck.hub.proxy.port Proxy port. DEPRECATED: This property is changing. Please use --blackduck.proxy.port in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Username (Deprecated) # --blackduck.hub.proxy.username Proxy username. DEPRECATED: This property is changing. Please use --blackduck.proxy.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Password (Deprecated) # --blackduck.hub.proxy.password Proxy password. DEPRECATED: This property is changing. Please use --blackduck.proxy.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Ntlm Domain (Deprecated) # --blackduck.hub.proxy.ntlm.domain NTLM Proxy domain. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.domain in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Ignored Hosts (Deprecated) # --blackduck.hub.proxy.ignored.hosts A comma-separated list of host patterns that should not use the proxy. DEPRECATED: This property is changing. Please use --blackduck.proxy.ignored.hosts in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Proxy Ntlm Workstation (Deprecated) # --blackduck.hub.proxy.ntlm.workstation NTLM Proxy workstation. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.workstation in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Trust Cert (Deprecated) # --blackduck.hub.trust.cert=false If true, automatically trusts the certificate for the current run of Detect only. DEPRECATED: This property is changing. Please use --blackduck.trust.cert in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Blackduck Hub Offline Mode (Deprecated) # --blackduck.hub.offline.mode=false This disables any Hub communication. If true, Detect does not upload BDIO files, does not check policies, and does not download and install the signature scanner. DEPRECATED: This property is changing. Please use --blackduck.offline.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Disable Without Hub (Deprecated) # --detect.disable.without.hub=false If true, during initialization Detect will check for Hub connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Check For Valid Black Duck Connection (Deprecated) # --detect.disable.without.blackduck=false If true, during initialization Detect will check for Black Duck connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"blackduck server"},{"location":"properties/configuration/blackduck server/#blackduck-server","text":"","title":"blackduck server"},{"location":"properties/configuration/blackduck server/#black-duck-api-token","text":"--blackduck.api.token The API token used to authenticate with the Black Duck Server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Black Duck API Token"},{"location":"properties/configuration/blackduck server/#offline-mode","text":"--blackduck.offline.mode=false This can disable any Black Duck communication - if true, Detect will not upload BDIO files, it will not check policies, and it will not download and install the signature scanner. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Offline Mode"},{"location":"properties/configuration/blackduck server/#black-duck-password","text":"--blackduck.password Black Duck password. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Black Duck Password"},{"location":"properties/configuration/blackduck server/#black-duck-url","text":"--blackduck.url URL of the Black Duck server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Black Duck URL"},{"location":"properties/configuration/blackduck server/#black-duck-username","text":"--blackduck.username Black Duck username. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Black Duck Username"},{"location":"properties/configuration/blackduck server/#report-generation-timeout","text":"--detect.report.timeout=300 The amount of time in seconds Detect will wait for scans to finish and to generate reports (i.e. risk and policy check). When changing this value, keep in mind the checking of policies might have to wait for scans to process which can take some time. Details Added 5.2.0 Type Long Default Value 300 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Report Generation Timeout"},{"location":"properties/configuration/blackduck server/#test-connection-to-black-duck","text":"--detect.test.connection=false Test the connection to Black Duck with the current configuration. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Test Connection to Black Duck"},{"location":"properties/configuration/blackduck server/#black-duck-timeout-advanced","text":"--blackduck.timeout=120 The time to wait for network connections to complete (in seconds). Details Added 4.2.0 Type Integer Default Value 120 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Black Duck Timeout (Advanced)"},{"location":"properties/configuration/blackduck server/#trust-all-ssl-certificates-advanced","text":"--blackduck.trust.cert=false If true, automatically trust the certificate for the current run of Detect only. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Trust All SSL Certificates (Advanced)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-url-deprecated","text":"--blackduck.hub.url URL of the Hub server. DEPRECATED: This property is changing. Please use --blackduck.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Url (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-timeout-deprecated","text":"--blackduck.hub.timeout=120 The time to wait for rest connections to complete in seconds. DEPRECATED: This property is changing. Please use --blackduck.timeout in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 120 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Timeout (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-username-deprecated","text":"--blackduck.hub.username Hub username. DEPRECATED: This property is changing. Please use --blackduck.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Username (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-password-deprecated","text":"--blackduck.hub.password Hub password. DEPRECATED: This property is changing. Please use --blackduck.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Password (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-api-token-deprecated","text":"--blackduck.hub.api.token Hub API Token. DEPRECATED: This property is changing. Please use --blackduck.api.token in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Api Token (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-host-deprecated","text":"--blackduck.hub.proxy.host Proxy host. DEPRECATED: This property is changing. Please use --blackduck.proxy.host in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Host (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-port-deprecated","text":"--blackduck.hub.proxy.port Proxy port. DEPRECATED: This property is changing. Please use --blackduck.proxy.port in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Port (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-username-deprecated","text":"--blackduck.hub.proxy.username Proxy username. DEPRECATED: This property is changing. Please use --blackduck.proxy.username in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Username (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-password-deprecated","text":"--blackduck.hub.proxy.password Proxy password. DEPRECATED: This property is changing. Please use --blackduck.proxy.password in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Password (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-ntlm-domain-deprecated","text":"--blackduck.hub.proxy.ntlm.domain NTLM Proxy domain. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.domain in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Ntlm Domain (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-ignored-hosts-deprecated","text":"--blackduck.hub.proxy.ignored.hosts A comma-separated list of host patterns that should not use the proxy. DEPRECATED: This property is changing. Please use --blackduck.proxy.ignored.hosts in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Ignored Hosts (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-proxy-ntlm-workstation-deprecated","text":"--blackduck.hub.proxy.ntlm.workstation NTLM Proxy workstation. DEPRECATED: This property is changing. Please use --blackduck.proxy.ntlm.workstation in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Proxy Ntlm Workstation (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-trust-cert-deprecated","text":"--blackduck.hub.trust.cert=false If true, automatically trusts the certificate for the current run of Detect only. DEPRECATED: This property is changing. Please use --blackduck.trust.cert in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Trust Cert (Deprecated)"},{"location":"properties/configuration/blackduck server/#blackduck-hub-offline-mode-deprecated","text":"--blackduck.hub.offline.mode=false This disables any Hub communication. If true, Detect does not upload BDIO files, does not check policies, and does not download and install the signature scanner. DEPRECATED: This property is changing. Please use --blackduck.offline.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Blackduck Hub Offline Mode (Deprecated)"},{"location":"properties/configuration/blackduck server/#detect-disable-without-hub-deprecated","text":"--detect.disable.without.hub=false If true, during initialization Detect will check for Hub connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Disable Without Hub (Deprecated)"},{"location":"properties/configuration/blackduck server/#check-for-valid-black-duck-connection-deprecated","text":"--detect.disable.without.blackduck=false If true, during initialization Detect will check for Black Duck connectivity and exit with status code 0 if it cannot connect. DEPRECATED: This property is changing. Please use --detect.ignore.connection.failures in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Check For Valid Black Duck Connection (Deprecated)"},{"location":"properties/configuration/cleanup/","text":"cleanup # Cleanup Output # --detect.cleanup=true If true, the files created by Detect will be cleaned up. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"cleanup"},{"location":"properties/configuration/cleanup/#cleanup","text":"","title":"cleanup"},{"location":"properties/configuration/cleanup/#cleanup-output","text":"--detect.cleanup=true If true, the files created by Detect will be cleaned up. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Cleanup Output"},{"location":"properties/configuration/debug/","text":"debug # Diagnostic Mode # --detect.diagnostic=false When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Diagnostic Mode Extended # --detect.diagnostic.extended=false When enabled, Synopsys Detect performs the actions of --detect.diagnostic, but also includes relevant files such as lock files and build artifacts. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"debug"},{"location":"properties/configuration/debug/#debug","text":"","title":"debug"},{"location":"properties/configuration/debug/#diagnostic-mode","text":"--detect.diagnostic=false When enabled, diagnostic mode collects all files generated by Synopsys Detect and zips the files using a unique run ID. It includes logs, BDIO files, extraction files, and reports. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Diagnostic Mode"},{"location":"properties/configuration/debug/#diagnostic-mode-extended","text":"--detect.diagnostic.extended=false When enabled, Synopsys Detect performs the actions of --detect.diagnostic, but also includes relevant files such as lock files and build artifacts. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Diagnostic Mode Extended"},{"location":"properties/configuration/detector/","text":"detector # Required Detect Types # --detect.required.detector.types=BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG The set of required detectors. If you want one or more detectors to be required (must be found to apply), use this property to specify the set of required detectors. If this property is set, and one (or more) of the given detectors is not found to apply, Detect will fail. Details Added 4.3.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes Detector Types Excluded (Advanced) # --detect.excluded.detector.types=ALL,NONE,BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG By default, all detectors will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all detectors, specify \"ALL\". Exclusion rules always win. If Detect runs one or more detector on your project that you would like to exclude, you can use this property to prevent Detect from running them. Details Added 3.0.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes Detector Types Included (Advanced) # --detect.included.detector.types=ALL,NONE,BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. If you want to limit Detect to a subset of its detectors, use this property to specify that subset. Details Added 3.0.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes Detect Excluded Bom Tool Types (Deprecated) # --detect.excluded.bom.tool.types By default, all tools will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all tools, specify \"ALL\". Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.excluded.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Included Bom Tool Types (Deprecated) # --detect.included.bom.tool.types By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.included.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Required Bom Tool Types (Deprecated) # --detect.required.bom.tool.types If set, Detect will fail if it does not find the bom tool types supplied here. DEPRECATED: This property is changing. Please use --detect.required.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"detector"},{"location":"properties/configuration/detector/#detector","text":"","title":"detector"},{"location":"properties/configuration/detector/#required-detect-types","text":"--detect.required.detector.types=BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG The set of required detectors. If you want one or more detectors to be required (must be found to apply), use this property to specify the set of required detectors. If this property is set, and one (or more) of the given detectors is not found to apply, Detect will fail. Details Added 4.3.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes","title":"Required Detect Types"},{"location":"properties/configuration/detector/#detector-types-excluded-advanced","text":"--detect.excluded.detector.types=ALL,NONE,BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG By default, all detectors will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all detectors, specify \"ALL\". Exclusion rules always win. If Detect runs one or more detector on your project that you would like to exclude, you can use this property to prevent Detect from running them. Details Added 3.0.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes","title":"Detector Types Excluded (Advanced)"},{"location":"properties/configuration/detector/#detector-types-included-advanced","text":"--detect.included.detector.types=ALL,NONE,BITBAKE,CARGO,COCOAPODS,CONDA,CPAN,CRAN,GIT,GO_MOD,GO_DEP,GO_VNDR,GO_VENDOR,GO_GRADLE,GRADLE,HEX,LERNA,MAVEN,NPM,NUGET,PACKAGIST,PEAR,PIP,RUBYGEMS,SBT,SWIFT,YARN,CLANG By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. If you want to limit Detect to a subset of its detectors, use this property to specify that subset. Details Added 3.0.0 Type DetectorType List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, BITBAKE, CARGO, COCOAPODS, CONDA, CPAN, CRAN, GIT, GO_MOD, GO_DEP, GO_VNDR, GO_VENDOR, GO_GRADLE, GRADLE, HEX, LERNA, MAVEN, NPM, NUGET, PACKAGIST, PEAR, PIP, RUBYGEMS, SBT, SWIFT, YARN, CLANG Strict Yes","title":"Detector Types Included (Advanced)"},{"location":"properties/configuration/detector/#detect-excluded-bom-tool-types-deprecated","text":"--detect.excluded.bom.tool.types By default, all tools will be included. If you want to exclude specific detectors, specify the ones to exclude here. If you want to exclude all tools, specify \"ALL\". Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.excluded.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Excluded Bom Tool Types (Deprecated)"},{"location":"properties/configuration/detector/#detect-included-bom-tool-types-deprecated","text":"--detect.included.bom.tool.types By default, all tools will be included. If you want to include only specific tools, specify the ones to include here. Exclusion rules always win. DEPRECATED: This property is changing. Please use --detect.included.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Included Bom Tool Types (Deprecated)"},{"location":"properties/configuration/detector/#detect-required-bom-tool-types-deprecated","text":"--detect.required.bom.tool.types If set, Detect will fail if it does not find the bom tool types supplied here. DEPRECATED: This property is changing. Please use --detect.required.detector.types in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Required Bom Tool Types (Deprecated)"},{"location":"properties/configuration/general/","text":"general # Buildless Mode # --detect.detector.buildless=false If set to true, only Detector's capable of running without a build will be run. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Wait For Results # --detect.wait.for.results=false If set to true, Detect will wait for Synopsys products until results are available or the detect.report.timeout is exceeded. Details Added 5.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Parallel Processors (Advanced) # --detect.parallel.processors=1 The number of threads to run processes in parallel, defaults to 1, but if you specify less than or equal to 0, the number of processors on the machine will be used. Details Added 6.0.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Ignore Connection Failures (Advanced) # --detect.ignore.connection.failures=false If true, Detect will ignore any products that it cannot connect to. If true, when Detect attempts to boot a product it will also check if it can communicate with it - if it cannot, it will not run the product. Details Added 5.3.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Force Success (Advanced) # --detect.force.success=false If true, Detect will always exit with code 0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"general"},{"location":"properties/configuration/general/#general","text":"","title":"general"},{"location":"properties/configuration/general/#buildless-mode","text":"--detect.detector.buildless=false If set to true, only Detector's capable of running without a build will be run. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Buildless Mode"},{"location":"properties/configuration/general/#wait-for-results","text":"--detect.wait.for.results=false If set to true, Detect will wait for Synopsys products until results are available or the detect.report.timeout is exceeded. Details Added 5.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Wait For Results"},{"location":"properties/configuration/general/#detect-parallel-processors-advanced","text":"--detect.parallel.processors=1 The number of threads to run processes in parallel, defaults to 1, but if you specify less than or equal to 0, the number of processors on the machine will be used. Details Added 6.0.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Parallel Processors (Advanced)"},{"location":"properties/configuration/general/#detect-ignore-connection-failures-advanced","text":"--detect.ignore.connection.failures=false If true, Detect will ignore any products that it cannot connect to. If true, when Detect attempts to boot a product it will also check if it can communicate with it - if it cannot, it will not run the product. Details Added 5.3.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Ignore Connection Failures (Advanced)"},{"location":"properties/configuration/general/#force-success-advanced","text":"--detect.force.success=false If true, Detect will always exit with code 0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Force Success (Advanced)"},{"location":"properties/configuration/impact analysis/","text":"impact analysis # Vulnerability Impact Analysis Enabled # --detect.impact.analysis.enabled=false If set to true, Detect will attempt to look for *.class files and generate a Vulnerability Impact Analysis Report for upload to Black Duck. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Impact Analysis Output Directory # --detect.impact.analysis.output.path The path to the output directory for Impact Analysis reports. If not set, the Impact Analysis reports are placed in a 'impact-analysis' subdirectory of the output directory. Details Added 6.5.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"impact analysis"},{"location":"properties/configuration/impact analysis/#impact-analysis","text":"","title":"impact analysis"},{"location":"properties/configuration/impact analysis/#vulnerability-impact-analysis-enabled","text":"--detect.impact.analysis.enabled=false If set to true, Detect will attempt to look for *.class files and generate a Vulnerability Impact Analysis Report for upload to Black Duck. Details Added 6.5.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Vulnerability Impact Analysis Enabled"},{"location":"properties/configuration/impact analysis/#impact-analysis-output-directory","text":"--detect.impact.analysis.output.path The path to the output directory for Impact Analysis reports. If not set, the Impact Analysis reports are placed in a 'impact-analysis' subdirectory of the output directory. Details Added 6.5.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Impact Analysis Output Directory"},{"location":"properties/configuration/logging/","text":"logging # Logging Level # --logging.level.com.synopsys.integration=OFF,ERROR,WARN,INFO,DEBUG,TRACE The logging level of Detect. Details Added 5.3.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes Logging Level Shorthand # --logging.level.detect=OFF,ERROR,WARN,INFO,DEBUG,TRACE Shorthand for the logging level of detect. Equivalent to setting logging.level.com.synopsys.integration. Details Added 5.5.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes Detect Suppress Configuration Output (Deprecated) # --detect.suppress.configuration.output=false If true, the default behavior of printing your configuration properties at startup will be suppressed. DEPRECATED: This property is being removed. Configuration can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Suppress Results Output (Deprecated) # --detect.suppress.results.output=false If true, the default behavior of printing the Detect Results will be suppressed. DEPRECATED: This property is being removed. Results can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Logging Level (Deprecated) # --logging.level.com.blackducksoftware.integration=OFF,ERROR,WARN,INFO,DEBUG,TRACE The logging level of Detect. DEPRECATED: This property is changing. Please use --logging.level.com.synopsys.integration in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes","title":"logging"},{"location":"properties/configuration/logging/#logging","text":"","title":"logging"},{"location":"properties/configuration/logging/#logging-level","text":"--logging.level.com.synopsys.integration=OFF,ERROR,WARN,INFO,DEBUG,TRACE The logging level of Detect. Details Added 5.3.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes","title":"Logging Level"},{"location":"properties/configuration/logging/#logging-level-shorthand","text":"--logging.level.detect=OFF,ERROR,WARN,INFO,DEBUG,TRACE Shorthand for the logging level of detect. Equivalent to setting logging.level.com.synopsys.integration. Details Added 5.5.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes","title":"Logging Level Shorthand"},{"location":"properties/configuration/logging/#detect-suppress-configuration-output-deprecated","text":"--detect.suppress.configuration.output=false If true, the default behavior of printing your configuration properties at startup will be suppressed. DEPRECATED: This property is being removed. Configuration can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Suppress Configuration Output (Deprecated)"},{"location":"properties/configuration/logging/#detect-suppress-results-output-deprecated","text":"--detect.suppress.results.output=false If true, the default behavior of printing the Detect Results will be suppressed. DEPRECATED: This property is being removed. Results can no longer be suppressed individually. Log level can be used. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Suppress Results Output (Deprecated)"},{"location":"properties/configuration/logging/#logging-level-deprecated","text":"--logging.level.com.blackducksoftware.integration=OFF,ERROR,WARN,INFO,DEBUG,TRACE The logging level of Detect. DEPRECATED: This property is changing. Please use --logging.level.com.synopsys.integration in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type LogLevel Default Value INFO Comma Separated No Case Sensitive Yes Acceptable Values OFF, ERROR, WARN, INFO, DEBUG, TRACE Strict Yes","title":"Logging Level (Deprecated)"},{"location":"properties/configuration/paths/","text":"paths # Bash Executable # --detect.bash.path Path to the Bash executable. If set, Detect will use the given Bash executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No BDIO Output Directory # --detect.bdio.output.path The path to the output directory for all BDIO files. If not set, the BDIO files are placed in a 'BDIO' subdirectory of the output directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No BDIO 2 Enabled # --detect.bdio2.enabled=false The version of BDIO files to generate. If set to false, BDIO version 1 will be generated. If set to true, BDIO version 2 will be generated. Details Added 6.1.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detector Search Depth # --detect.detector.search.depth=0 Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies. A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc. Details Added 3.2.0 Type Integer Default Value 0 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Git Executable # --detect.git.path Path of the git executable Details Added 5.5.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Java Executable # --detect.java.path Path to the java executable. If set, Detect will use the given java executable instead of searching for one. Details Added 5.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Output Path # --detect.output.path The path to the output directory. If set, Detect will use the given directory to store files that it downloads and creates, instead of using the default location (~/blackduck). Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Swift Executable # --detect.swift.path Path of the swift executable. Details Added 6.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Resolve Tilde in Paths # --detect.resolve.tilde.in.paths=true If set to false Detect will not automatically resolve the '~/' prefix in a mac or linux path to the user's home directory. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No Scan Output Path # --detect.scan.output.path The output directory for all signature scanner output files. If not set, the signature scanner output files will be in a 'scan' subdirectory of the output directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Source Path # --detect.source.path The path to the project directory to inspect. Detect will search the given directory for hints that indicate which package manager(s) the project uses, and will attempt to run the corresponding detector(s). Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Tools Included # --detect.tools=ALL,NONE,DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tools Detect should allow in a comma-separated list. Tools in this list (as long as they are not also in the excluded list) will be allowed to run if all criteria of the tool are met. Exclusion rules always win. This property and detect.tools.excluded provide control over which tools Detect runs. Details Added 5.0.0 Type DetectTool List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes Detect Tools Excluded # --detect.tools.excluded=ALL,NONE,DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tools Detect should not allow, in a comma-separated list. Excluded tools will not be run even if all criteria for the tool is met. Exclusion rules always win. This property and detect.tools provide control over which tools Detect runs. Details Added 5.0.0 Type DetectTool List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes Detector Search Continue (Advanced) # --detect.detector.search.continue=false If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. If true, Detect will find Maven projects that are in subdirectories of a Maven project and Gradle projects that are in subdirectories of Gradle projects, etc. If false, Detect will only find bom tools in subdirectories of a project if they are of a different type such as an Npm project in a subdirectory of a Gradle project. Details Added 3.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detector Directory Exclusions (Advanced) # --detect.detector.search.exclusion A comma-separated list of directory names to exclude from detector search. While searching the source directory to determine which detectors to run, subdirectories whose name appear in this list will not be searched. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detector Directory Patterns Exclusions (Advanced) # --detect.detector.search.exclusion.patterns A comma-separated list of directory name patterns to exclude from detector search. While searching the source directory to determine which detectors to run, subdirectories whose name match a pattern in this list will not be searched. These patterns are file system glob patterns ('?' is a wildcard for a single character, '*' is a wildcard for zero or more characters). For example, suppose you're running in bash on Linux, you've set --detect.detector.search.depth=1, and have a subdirectory named blackduck-common (a gradle project) that you want to exclude from the detector search. Any of the following would exclude it:--detect.detector.search.exclusion.patterns=blackduck-common,--detect.detector.search.exclusion.patterns='blackduck-common',--detect.detector.search.exclusion.patterns='blackduck-*' Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detector Directory Path Exclusions (Advanced) # --detect.detector.search.exclusion.paths A comma-separated list of directory paths to exclude from detector search. (E.g. 'foo/bar/biz' will only exclude the 'biz' directory if the parent directory structure is 'foo/bar/'.) This property performs the same basic function as detect.detector.search.exclusion, but lets you be more specific. Details Added 5.5.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detector File Exclusions (Advanced) # --detect.detector.search.exclusion.files A comma-separated list of file names to exclude from detector search. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detector Exclude Default Directories (Advanced) # --detect.detector.search.exclusion.defaults=true If true, the bom tool search will exclude the default directory names. See the detailed help for more information. If true, these directories will be excluded from the detector search: bin, build, .git, .gradle, node_modules, out, packages, target. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Tools Output Path (Advanced) # --detect.tools.output.path The path to the tools directory where detect should download and/or access things like the Signature Scanner that it shares over multiple runs. If set, Detect will use the given directory instead of using the default location of output path plus tools. Details Added 5.6.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Project Name and Version Detector (Advanced) # --detect.project.detector The detector that will be used to determine the project name and version when multiple detector types. This property should be used with the detect.project.tool. If Detect finds that multiple detectors apply, this property can be used to select the detector that will provide the project name and version. When using this property, you should also set detect.project.tool=DETECTOR Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detector Tool Priority (Advanced) # --detect.project.tool=DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tool priority for project name and version. The project name and version will be determined by the first tool in this list that provides them. This allows you to control which tool provides the project name and version when more than one tool are capable of providing it. Details Added 5.0.0 Type DetectTool List Default Value DOCKER,DETECTOR,BAZEL Comma Separated Yes Case Sensitive Yes Acceptable Values DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes Detect Bom Tool Search Exclusion Defaults (Deprecated) # --detect.bom.tool.search.exclusion.defaults=true If true, the bom tool search will exclude the default directory names. See the detailed help for more information. If true, these directories will be excluded from the bom tool search: bin, build, .git, .gradle, node_modules, out, packages, target DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion.defaults in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Bom Tool Search Exclusion (Deprecated) # --detect.bom.tool.search.exclusion A comma-separated list of directory names to exclude from the bom tool search. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detect Project Bom Tool (Deprecated) # --detect.project.bom.tool The detector to choose when multiple detector types are found and one needs to be chosen for project name and version. This property should be used with the detect.project.tool. DEPRECATED: This property is changing. Please use --detect.project.detector in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Bom Tool Search Depth (Deprecated) # --detect.bom.tool.search.depth=0 Depth of subdirectories within the source directory to search for files that indicate whether a detector applies. A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc. DEPRECATED: This property is changing. Please use --detect.detector.search.depth in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Integer Default Value 0 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Bom Tool Search Continue (Deprecated) # --detect.bom.tool.search.continue=false If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. If true, Detect will find Maven projects that are in subdirectories of a Maven project and Gradle projects that are in subdirectories of Gradle projects, etc. If false, Detect will only find bom tools in subdirectories of a project if they are of a different type such as an Npm project in a subdirectory of a Gradle project . DEPRECATED: This property is changing. Please use --detect.detector.search.continue in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"paths"},{"location":"properties/configuration/paths/#paths","text":"","title":"paths"},{"location":"properties/configuration/paths/#bash-executable","text":"--detect.bash.path Path to the Bash executable. If set, Detect will use the given Bash executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Bash Executable"},{"location":"properties/configuration/paths/#bdio-output-directory","text":"--detect.bdio.output.path The path to the output directory for all BDIO files. If not set, the BDIO files are placed in a 'BDIO' subdirectory of the output directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"BDIO Output Directory"},{"location":"properties/configuration/paths/#bdio-2-enabled","text":"--detect.bdio2.enabled=false The version of BDIO files to generate. If set to false, BDIO version 1 will be generated. If set to true, BDIO version 2 will be generated. Details Added 6.1.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"BDIO 2 Enabled"},{"location":"properties/configuration/paths/#detector-search-depth","text":"--detect.detector.search.depth=0 Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies. A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc. Details Added 3.2.0 Type Integer Default Value 0 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detector Search Depth"},{"location":"properties/configuration/paths/#git-executable","text":"--detect.git.path Path of the git executable Details Added 5.5.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Git Executable"},{"location":"properties/configuration/paths/#java-executable","text":"--detect.java.path Path to the java executable. If set, Detect will use the given java executable instead of searching for one. Details Added 5.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Java Executable"},{"location":"properties/configuration/paths/#detect-output-path","text":"--detect.output.path The path to the output directory. If set, Detect will use the given directory to store files that it downloads and creates, instead of using the default location (~/blackduck). Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Output Path"},{"location":"properties/configuration/paths/#swift-executable","text":"--detect.swift.path Path of the swift executable. Details Added 6.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Swift Executable"},{"location":"properties/configuration/paths/#resolve-tilde-in-paths","text":"--detect.resolve.tilde.in.paths=true If set to false Detect will not automatically resolve the '~/' prefix in a mac or linux path to the user's home directory. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Resolve Tilde in Paths"},{"location":"properties/configuration/paths/#scan-output-path","text":"--detect.scan.output.path The output directory for all signature scanner output files. If not set, the signature scanner output files will be in a 'scan' subdirectory of the output directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Scan Output Path"},{"location":"properties/configuration/paths/#source-path","text":"--detect.source.path The path to the project directory to inspect. Detect will search the given directory for hints that indicate which package manager(s) the project uses, and will attempt to run the corresponding detector(s). Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Source Path"},{"location":"properties/configuration/paths/#detect-tools-included","text":"--detect.tools=ALL,NONE,DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tools Detect should allow in a comma-separated list. Tools in this list (as long as they are not also in the excluded list) will be allowed to run if all criteria of the tool are met. Exclusion rules always win. This property and detect.tools.excluded provide control over which tools Detect runs. Details Added 5.0.0 Type DetectTool List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes","title":"Detect Tools Included"},{"location":"properties/configuration/paths/#detect-tools-excluded","text":"--detect.tools.excluded=ALL,NONE,DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tools Detect should not allow, in a comma-separated list. Excluded tools will not be run even if all criteria for the tool is met. Exclusion rules always win. This property and detect.tools provide control over which tools Detect runs. Details Added 5.0.0 Type DetectTool List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes","title":"Detect Tools Excluded"},{"location":"properties/configuration/paths/#detector-search-continue-advanced","text":"--detect.detector.search.continue=false If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. If true, Detect will find Maven projects that are in subdirectories of a Maven project and Gradle projects that are in subdirectories of Gradle projects, etc. If false, Detect will only find bom tools in subdirectories of a project if they are of a different type such as an Npm project in a subdirectory of a Gradle project. Details Added 3.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detector Search Continue (Advanced)"},{"location":"properties/configuration/paths/#detector-directory-exclusions-advanced","text":"--detect.detector.search.exclusion A comma-separated list of directory names to exclude from detector search. While searching the source directory to determine which detectors to run, subdirectories whose name appear in this list will not be searched. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detector Directory Exclusions (Advanced)"},{"location":"properties/configuration/paths/#detector-directory-patterns-exclusions-advanced","text":"--detect.detector.search.exclusion.patterns A comma-separated list of directory name patterns to exclude from detector search. While searching the source directory to determine which detectors to run, subdirectories whose name match a pattern in this list will not be searched. These patterns are file system glob patterns ('?' is a wildcard for a single character, '*' is a wildcard for zero or more characters). For example, suppose you're running in bash on Linux, you've set --detect.detector.search.depth=1, and have a subdirectory named blackduck-common (a gradle project) that you want to exclude from the detector search. Any of the following would exclude it:--detect.detector.search.exclusion.patterns=blackduck-common,--detect.detector.search.exclusion.patterns='blackduck-common',--detect.detector.search.exclusion.patterns='blackduck-*' Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detector Directory Patterns Exclusions (Advanced)"},{"location":"properties/configuration/paths/#detector-directory-path-exclusions-advanced","text":"--detect.detector.search.exclusion.paths A comma-separated list of directory paths to exclude from detector search. (E.g. 'foo/bar/biz' will only exclude the 'biz' directory if the parent directory structure is 'foo/bar/'.) This property performs the same basic function as detect.detector.search.exclusion, but lets you be more specific. Details Added 5.5.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detector Directory Path Exclusions (Advanced)"},{"location":"properties/configuration/paths/#detector-file-exclusions-advanced","text":"--detect.detector.search.exclusion.files A comma-separated list of file names to exclude from detector search. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detector File Exclusions (Advanced)"},{"location":"properties/configuration/paths/#detector-exclude-default-directories-advanced","text":"--detect.detector.search.exclusion.defaults=true If true, the bom tool search will exclude the default directory names. See the detailed help for more information. If true, these directories will be excluded from the detector search: bin, build, .git, .gradle, node_modules, out, packages, target. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detector Exclude Default Directories (Advanced)"},{"location":"properties/configuration/paths/#detect-tools-output-path-advanced","text":"--detect.tools.output.path The path to the tools directory where detect should download and/or access things like the Signature Scanner that it shares over multiple runs. If set, Detect will use the given directory instead of using the default location of output path plus tools. Details Added 5.6.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Tools Output Path (Advanced)"},{"location":"properties/configuration/paths/#project-name-and-version-detector-advanced","text":"--detect.project.detector The detector that will be used to determine the project name and version when multiple detector types. This property should be used with the detect.project.tool. If Detect finds that multiple detectors apply, this property can be used to select the detector that will provide the project name and version. When using this property, you should also set detect.project.tool=DETECTOR Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Project Name and Version Detector (Advanced)"},{"location":"properties/configuration/paths/#detector-tool-priority-advanced","text":"--detect.project.tool=DETECTOR,SIGNATURE_SCAN,BINARY_SCAN,IMPACT_ANALYSIS,POLARIS,DOCKER,BAZEL The tool priority for project name and version. The project name and version will be determined by the first tool in this list that provides them. This allows you to control which tool provides the project name and version when more than one tool are capable of providing it. Details Added 5.0.0 Type DetectTool List Default Value DOCKER,DETECTOR,BAZEL Comma Separated Yes Case Sensitive Yes Acceptable Values DETECTOR, SIGNATURE_SCAN, BINARY_SCAN, IMPACT_ANALYSIS, POLARIS, DOCKER, BAZEL Strict Yes","title":"Detector Tool Priority (Advanced)"},{"location":"properties/configuration/paths/#detect-bom-tool-search-exclusion-defaults-deprecated","text":"--detect.bom.tool.search.exclusion.defaults=true If true, the bom tool search will exclude the default directory names. See the detailed help for more information. If true, these directories will be excluded from the bom tool search: bin, build, .git, .gradle, node_modules, out, packages, target DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion.defaults in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Bom Tool Search Exclusion Defaults (Deprecated)"},{"location":"properties/configuration/paths/#detect-bom-tool-search-exclusion-deprecated","text":"--detect.bom.tool.search.exclusion A comma-separated list of directory names to exclude from the bom tool search. DEPRECATED: This property is changing. Please use --detect.detector.search.exclusion in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detect Bom Tool Search Exclusion (Deprecated)"},{"location":"properties/configuration/paths/#detect-project-bom-tool-deprecated","text":"--detect.project.bom.tool The detector to choose when multiple detector types are found and one needs to be chosen for project name and version. This property should be used with the detect.project.tool. DEPRECATED: This property is changing. Please use --detect.project.detector in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Project Bom Tool (Deprecated)"},{"location":"properties/configuration/paths/#detect-bom-tool-search-depth-deprecated","text":"--detect.bom.tool.search.depth=0 Depth of subdirectories within the source directory to search for files that indicate whether a detector applies. A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc. DEPRECATED: This property is changing. Please use --detect.detector.search.depth in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Integer Default Value 0 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Bom Tool Search Depth (Deprecated)"},{"location":"properties/configuration/paths/#detect-bom-tool-search-continue-deprecated","text":"--detect.bom.tool.search.continue=false If true, the bom tool search will continue to look for nested bom tools of the same type to the maximum search depth, see the detailed help for more information. If true, Detect will find Maven projects that are in subdirectories of a Maven project and Gradle projects that are in subdirectories of Gradle projects, etc. If false, Detect will only find bom tools in subdirectories of a project if they are of a different type such as an Npm project in a subdirectory of a Gradle project . DEPRECATED: This property is changing. Please use --detect.detector.search.continue in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Bom Tool Search Continue (Deprecated)"},{"location":"properties/configuration/polaris/","text":"polaris # Detect Polaris Enabled (Deprecated) # --detect.polaris.enabled=false Set to false to disable the Synopsys Polaris Tool. DEPRECATED: This property is changing. Please use --detect.tools and POLARIS in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Polaris Url (Deprecated) # --polaris.url The url of your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Polaris Access Token (Deprecated) # --polaris.access.token The access token for your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 5.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Polaris Arguments (Deprecated) # --polaris.arguments Additional arguments to pass to polaris separated by space. The polaris.command takes precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 5.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Polaris Command (Deprecated) # --polaris.command A replacement command to pass to polaris separated by space. Include the analyze or setup command itself. If specified, polaris.arguments will be ignored and this will take precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"polaris"},{"location":"properties/configuration/polaris/#polaris","text":"","title":"polaris"},{"location":"properties/configuration/polaris/#detect-polaris-enabled-deprecated","text":"--detect.polaris.enabled=false Set to false to disable the Synopsys Polaris Tool. DEPRECATED: This property is changing. Please use --detect.tools and POLARIS in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Polaris Enabled (Deprecated)"},{"location":"properties/configuration/polaris/#polaris-url-deprecated","text":"--polaris.url The url of your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Polaris Url (Deprecated)"},{"location":"properties/configuration/polaris/#polaris-access-token-deprecated","text":"--polaris.access.token The access token for your polaris instance. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 5.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Polaris Access Token (Deprecated)"},{"location":"properties/configuration/polaris/#polaris-arguments-deprecated","text":"--polaris.arguments Additional arguments to pass to polaris separated by space. The polaris.command takes precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 5.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Polaris Arguments (Deprecated)"},{"location":"properties/configuration/polaris/#polaris-command-deprecated","text":"--polaris.command A replacement command to pass to polaris separated by space. Include the analyze or setup command itself. If specified, polaris.arguments will be ignored and this will take precedence. DEPRECATED: This property is being removed. Detect will no longer invoke the Polaris CLI. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Polaris Command (Deprecated)"},{"location":"properties/configuration/project info/","text":"project info # Detect Api Timeout (Deprecated) # --detect.api.timeout=300000 Timeout for response from Black Duck regarding your project (i.e. risk reports and policy check). When changing this value, keep in mind the checking of policies might have to wait for a new scan to process which can take some time. DEPRECATED: This property is now deprecated. Please use --detect.report.timeout in the future. NOTE the new property is in SECONDS not MILLISECONDS. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Long Default Value 300000 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"project info"},{"location":"properties/configuration/project info/#project-info","text":"","title":"project info"},{"location":"properties/configuration/project info/#detect-api-timeout-deprecated","text":"--detect.api.timeout=300000 Timeout for response from Black Duck regarding your project (i.e. risk reports and policy check). When changing this value, keep in mind the checking of policies might have to wait for a new scan to process which can take some time. DEPRECATED: This property is now deprecated. Please use --detect.report.timeout in the future. NOTE the new property is in SECONDS not MILLISECONDS. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Long Default Value 300000 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Api Timeout (Deprecated)"},{"location":"properties/configuration/project/","text":"project # Fail on Policy Violation Severities # --detect.policy.check.fail.on.severities=ALL,NONE,UNSPECIFIED,TRIVIAL,MINOR,MAJOR,CRITICAL,BLOCKER A comma-separated list of policy violation severities that will fail Detect. If this is set to NONE, Detect will not fail due to policy violations. A value of ALL is equivalent to all of the other possible values except NONE. Details Added 3.0.0 Type PolicyRuleSeverityType List Default Value NONE Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, UNSPECIFIED, TRIVIAL, MINOR, MAJOR, CRITICAL, BLOCKER Strict Yes Project Description # --detect.project.description If project description is specified, your project version will be created with this description. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Project Name # --detect.project.name An override for the name to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable project name. If that fails, the final part of the directory path where the inspection is taking place will be used. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Project Tier # --detect.project.tier If a Black Duck project tier is specified, your project will be created with this tier. Details Added 3.1.0 Type Optional Integer Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Version Name # --detect.project.version.name An override for the version to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable version name. If that fails, the current date will be used. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Version Nickname # --detect.project.version.nickname If a project version nickname is specified, your project version will be created with this nickname. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Version Notes # --detect.project.version.notes If project version notes are specified, your project version will be created with these notes. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Version Phase # --detect.project.version.phase=ARCHIVED,DEPRECATED,DEVELOPMENT,PLANNING,PRERELEASE,RELEASED An override for the Project Version phase. Details Added 3.0.0 Type ProjectVersionPhaseType Default Value DEVELOPMENT Comma Separated No Case Sensitive Yes Acceptable Values ARCHIVED, DEPRECATED, DEVELOPMENT, PLANNING, PRERELEASE, RELEASED Strict Yes Update Project Version # --detect.project.version.update=false If set to true, will update the Project Version with the configured properties. See detailed help for more information. When set to true, the following properties will be updated on the Project. Project tier (detect.project.tier) and Project Level Adjustments (detect.project.level.adjustments). The following properties will also be updated on the Version.Version notes (detect.project.version.notes), phase(detect.project.version.phase), distribution(detect.project.version.distribution). Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Aggregate BDIO File Name (Advanced) # --detect.bom.aggregate.name If set, this will aggregate all the BOMs to create a single BDIO file with the name provided. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No BDIO Aggregate Remediation Mode (Advanced) # --detect.bom.aggregate.remediation.mode=DIRECT,TRANSITIVE If an aggregate BDIO file is being generated and this property is set to DIRECT, the aggregate BDIO file will exclude code location nodes from the top layer of the dependency tree to preserve the correct identification of direct dependencies in the resulting Black Duck BOM. When this property is set to TRANSITIVE (the default), component source information is preserved by including code location nodes at the top of the dependency tree, but all components will appear as TRANSITIVE in the BOM. Details Added 6.1.0 Type AggregateMode Default Value TRANSITIVE Comma Separated No Case Sensitive Yes Acceptable Values DIRECT, TRANSITIVE Strict Yes Clone Project Version Name (Advanced) # --detect.clone.project.version.name The name of the project version to clone this project version from. Respects the given Clone Categories in detect.project.clone.categories or as set on the Black Duck server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Clone Latest Project Version (Advanced) # --detect.clone.project.version.latest=false If set to true, detect will attempt to use the latest project version as the clone for this project. The project must exist and have at least one version. Details Added 5.6.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Scan Name (Advanced) # --detect.code.location.name An override for the name Detect will use for the scan file it creates. If supplied and multiple scans are found, Detect will append an index to each scan name. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Default Project Version Name Scheme (Advanced) # --detect.default.project.version.scheme=TIMESTAMP,TEXT The scheme to use when the package managers can not determine a version. See detailed help for more information. Details Added 3.0.0 Type DefaultVersionNameScheme Default Value TEXT Comma Separated No Case Sensitive Yes Acceptable Values TIMESTAMP, TEXT Strict Yes Default Project Version Name Text (Advanced) # --detect.default.project.version.text=Default Detect Version The text to use as the default project version. Details Added 3.0.0 Type String Default Value Default Detect Version Comma Separated No Case Sensitive No Acceptable Values Any Strict No Default Project Version Name Timestamp Format (Advanced) # --detect.default.project.version.timeformat=yyyy-MM-dd'T'HH:mm:ss.SSS The timestamp format to use as the default project version. Details Added 3.0.0 Type String Default Value yyyy-MM-dd'T'HH:mm:ss.SSS Comma Separated No Case Sensitive No Acceptable Values Any Strict No Application ID (Advanced) # --detect.project.application.id Sets the 'Application ID' project setting. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Custom Fields (Advanced) # --detect.custom.fields.project A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example, to set a custom field with label 'example' to 'one,two': detect.custom.fields.project[0].label='example' and detect.custom.fields.project[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. Details Added 5.6.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Custom Fields (Advanced) # --detect.custom.fields.version A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example , to set a custom field with label 'example' to 'one,two': detect.custom.fields.version[0].label='example' and detect.custom.fields.version[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. Details Added 5.6.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Clone Project Categories (Advanced) # --detect.project.clone.categories=COMPONENT_DATA,VULN_DATA,LICENSE_TERM_FULFILLMENT An override for the Project Clone Categories that are used when cloning a version. If the project already exists, make sure to use --detect.project.version.update to make sure these are set. Details Added 4.2.0 Type ProjectCloneCategoriesType List Default Value COMPONENT_DATA,VULN_DATA Comma Separated Yes Case Sensitive Yes Acceptable Values COMPONENT_DATA, VULN_DATA, LICENSE_TERM_FULFILLMENT Strict Yes Scan Name Prefix (Advanced) # --detect.project.codelocation.prefix A prefix to the name of the scans created by Detect. Useful for running against the same projects on multiple machines. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Scan Name Suffix (Advanced) # --detect.project.codelocation.suffix A suffix to the name of the scans created by Detect. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Unmap All Other Scans for Project (Advanced) # --detect.project.codelocation.unmap=false If set to true, unmaps all other scans mapped to the project version produced by the current run of Detect. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Project User Groups (Advanced) # --detect.project.user.groups A comma-separated list of names of user groups to add to the project. Details Added 5.4.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Project Tags (Advanced) # --detect.project.tags A comma-separated list of tags to add to the project. This property is not supported when using Synopsys Detect in offline mode. Details Added 5.6.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Allow Project Level Adjustments (Advanced) # --detect.project.level.adjustments=true An override for the Project level matches. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No Parent Project Name (Advanced) # --detect.parent.project.name When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Parent Project Version Name (Advanced) # --detect.parent.project.version.name When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Version Distribution (Advanced) # --detect.project.version.distribution=EXTERNAL,SAAS,INTERNAL,OPENSOURCE An override for the Project Version distribution Details Added 3.0.0 Type LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType Default Value EXTERNAL Comma Separated No Case Sensitive Yes Acceptable Values EXTERNAL, SAAS, INTERNAL, OPENSOURCE Strict Yes","title":"project"},{"location":"properties/configuration/project/#project","text":"","title":"project"},{"location":"properties/configuration/project/#fail-on-policy-violation-severities","text":"--detect.policy.check.fail.on.severities=ALL,NONE,UNSPECIFIED,TRIVIAL,MINOR,MAJOR,CRITICAL,BLOCKER A comma-separated list of policy violation severities that will fail Detect. If this is set to NONE, Detect will not fail due to policy violations. A value of ALL is equivalent to all of the other possible values except NONE. Details Added 3.0.0 Type PolicyRuleSeverityType List Default Value NONE Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, UNSPECIFIED, TRIVIAL, MINOR, MAJOR, CRITICAL, BLOCKER Strict Yes","title":"Fail on Policy Violation Severities"},{"location":"properties/configuration/project/#project-description","text":"--detect.project.description If project description is specified, your project version will be created with this description. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Project Description"},{"location":"properties/configuration/project/#project-name","text":"--detect.project.name An override for the name to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable project name. If that fails, the final part of the directory path where the inspection is taking place will be used. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Project Name"},{"location":"properties/configuration/project/#project-tier","text":"--detect.project.tier If a Black Duck project tier is specified, your project will be created with this tier. Details Added 3.1.0 Type Optional Integer Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Project Tier"},{"location":"properties/configuration/project/#version-name","text":"--detect.project.version.name An override for the version to use for the Black Duck project. If not supplied, Detect will attempt to use the tools to figure out a reasonable version name. If that fails, the current date will be used. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Version Name"},{"location":"properties/configuration/project/#version-nickname","text":"--detect.project.version.nickname If a project version nickname is specified, your project version will be created with this nickname. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Version Nickname"},{"location":"properties/configuration/project/#version-notes","text":"--detect.project.version.notes If project version notes are specified, your project version will be created with these notes. Details Added 3.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Version Notes"},{"location":"properties/configuration/project/#version-phase","text":"--detect.project.version.phase=ARCHIVED,DEPRECATED,DEVELOPMENT,PLANNING,PRERELEASE,RELEASED An override for the Project Version phase. Details Added 3.0.0 Type ProjectVersionPhaseType Default Value DEVELOPMENT Comma Separated No Case Sensitive Yes Acceptable Values ARCHIVED, DEPRECATED, DEVELOPMENT, PLANNING, PRERELEASE, RELEASED Strict Yes","title":"Version Phase"},{"location":"properties/configuration/project/#update-project-version","text":"--detect.project.version.update=false If set to true, will update the Project Version with the configured properties. See detailed help for more information. When set to true, the following properties will be updated on the Project. Project tier (detect.project.tier) and Project Level Adjustments (detect.project.level.adjustments). The following properties will also be updated on the Version.Version notes (detect.project.version.notes), phase(detect.project.version.phase), distribution(detect.project.version.distribution). Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Update Project Version"},{"location":"properties/configuration/project/#aggregate-bdio-file-name-advanced","text":"--detect.bom.aggregate.name If set, this will aggregate all the BOMs to create a single BDIO file with the name provided. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Aggregate BDIO File Name (Advanced)"},{"location":"properties/configuration/project/#bdio-aggregate-remediation-mode-advanced","text":"--detect.bom.aggregate.remediation.mode=DIRECT,TRANSITIVE If an aggregate BDIO file is being generated and this property is set to DIRECT, the aggregate BDIO file will exclude code location nodes from the top layer of the dependency tree to preserve the correct identification of direct dependencies in the resulting Black Duck BOM. When this property is set to TRANSITIVE (the default), component source information is preserved by including code location nodes at the top of the dependency tree, but all components will appear as TRANSITIVE in the BOM. Details Added 6.1.0 Type AggregateMode Default Value TRANSITIVE Comma Separated No Case Sensitive Yes Acceptable Values DIRECT, TRANSITIVE Strict Yes","title":"BDIO Aggregate Remediation Mode (Advanced)"},{"location":"properties/configuration/project/#clone-project-version-name-advanced","text":"--detect.clone.project.version.name The name of the project version to clone this project version from. Respects the given Clone Categories in detect.project.clone.categories or as set on the Black Duck server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Clone Project Version Name (Advanced)"},{"location":"properties/configuration/project/#clone-latest-project-version-advanced","text":"--detect.clone.project.version.latest=false If set to true, detect will attempt to use the latest project version as the clone for this project. The project must exist and have at least one version. Details Added 5.6.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Clone Latest Project Version (Advanced)"},{"location":"properties/configuration/project/#scan-name-advanced","text":"--detect.code.location.name An override for the name Detect will use for the scan file it creates. If supplied and multiple scans are found, Detect will append an index to each scan name. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Scan Name (Advanced)"},{"location":"properties/configuration/project/#default-project-version-name-scheme-advanced","text":"--detect.default.project.version.scheme=TIMESTAMP,TEXT The scheme to use when the package managers can not determine a version. See detailed help for more information. Details Added 3.0.0 Type DefaultVersionNameScheme Default Value TEXT Comma Separated No Case Sensitive Yes Acceptable Values TIMESTAMP, TEXT Strict Yes","title":"Default Project Version Name Scheme (Advanced)"},{"location":"properties/configuration/project/#default-project-version-name-text-advanced","text":"--detect.default.project.version.text=Default Detect Version The text to use as the default project version. Details Added 3.0.0 Type String Default Value Default Detect Version Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Default Project Version Name Text (Advanced)"},{"location":"properties/configuration/project/#default-project-version-name-timestamp-format-advanced","text":"--detect.default.project.version.timeformat=yyyy-MM-dd'T'HH:mm:ss.SSS The timestamp format to use as the default project version. Details Added 3.0.0 Type String Default Value yyyy-MM-dd'T'HH:mm:ss.SSS Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Default Project Version Name Timestamp Format (Advanced)"},{"location":"properties/configuration/project/#application-id-advanced","text":"--detect.project.application.id Sets the 'Application ID' project setting. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Application ID (Advanced)"},{"location":"properties/configuration/project/#custom-fields-advanced","text":"--detect.custom.fields.project A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example, to set a custom field with label 'example' to 'one,two': detect.custom.fields.project[0].label='example' and detect.custom.fields.project[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. Details Added 5.6.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Custom Fields (Advanced)"},{"location":"properties/configuration/project/#custom-fields-advanced_1","text":"--detect.custom.fields.version A list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example , to set a custom field with label 'example' to 'one,two': detect.custom.fields.version[0].label='example' and detect.custom.fields.version[0].value='one,two'. To set another field, use index 1. Note that these will not show up in the detect configuration log. Details Added 5.6.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Custom Fields (Advanced)"},{"location":"properties/configuration/project/#clone-project-categories-advanced","text":"--detect.project.clone.categories=COMPONENT_DATA,VULN_DATA,LICENSE_TERM_FULFILLMENT An override for the Project Clone Categories that are used when cloning a version. If the project already exists, make sure to use --detect.project.version.update to make sure these are set. Details Added 4.2.0 Type ProjectCloneCategoriesType List Default Value COMPONENT_DATA,VULN_DATA Comma Separated Yes Case Sensitive Yes Acceptable Values COMPONENT_DATA, VULN_DATA, LICENSE_TERM_FULFILLMENT Strict Yes","title":"Clone Project Categories (Advanced)"},{"location":"properties/configuration/project/#scan-name-prefix-advanced","text":"--detect.project.codelocation.prefix A prefix to the name of the scans created by Detect. Useful for running against the same projects on multiple machines. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Scan Name Prefix (Advanced)"},{"location":"properties/configuration/project/#scan-name-suffix-advanced","text":"--detect.project.codelocation.suffix A suffix to the name of the scans created by Detect. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Scan Name Suffix (Advanced)"},{"location":"properties/configuration/project/#unmap-all-other-scans-for-project-advanced","text":"--detect.project.codelocation.unmap=false If set to true, unmaps all other scans mapped to the project version produced by the current run of Detect. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Unmap All Other Scans for Project (Advanced)"},{"location":"properties/configuration/project/#project-user-groups-advanced","text":"--detect.project.user.groups A comma-separated list of names of user groups to add to the project. Details Added 5.4.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Project User Groups (Advanced)"},{"location":"properties/configuration/project/#project-tags-advanced","text":"--detect.project.tags A comma-separated list of tags to add to the project. This property is not supported when using Synopsys Detect in offline mode. Details Added 5.6.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Project Tags (Advanced)"},{"location":"properties/configuration/project/#allow-project-level-adjustments-advanced","text":"--detect.project.level.adjustments=true An override for the Project level matches. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Allow Project Level Adjustments (Advanced)"},{"location":"properties/configuration/project/#parent-project-name-advanced","text":"--detect.parent.project.name When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Parent Project Name (Advanced)"},{"location":"properties/configuration/project/#parent-project-version-name-advanced","text":"--detect.parent.project.version.name When a parent project and version name are specified, the created detect project will be added as a component to the specified parent project version. The specified parent project and parent project version must exist on Black Duck. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Parent Project Version Name (Advanced)"},{"location":"properties/configuration/project/#version-distribution-advanced","text":"--detect.project.version.distribution=EXTERNAL,SAAS,INTERNAL,OPENSOURCE An override for the Project Version distribution Details Added 3.0.0 Type LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType Default Value EXTERNAL Comma Separated No Case Sensitive Yes Acceptable Values EXTERNAL, SAAS, INTERNAL, OPENSOURCE Strict Yes","title":"Version Distribution (Advanced)"},{"location":"properties/configuration/proxy/","text":"proxy # Proxy Host (Advanced) # --blackduck.proxy.host Hostname for proxy server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Bypass Proxy Hosts (Advanced) # --blackduck.proxy.ignored.hosts A comma separated list of regular expression host patterns that should not use the proxy. These patterns must adhere to Java regular expressions: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html Details Added 4.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No NTLM Proxy Domain (Advanced) # --blackduck.proxy.ntlm.domain NTLM Proxy domain. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No NTLM Proxy Workstation (Advanced) # --blackduck.proxy.ntlm.workstation NTLM Proxy workstation. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Proxy Password (Advanced) # --blackduck.proxy.password Proxy password. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Proxy Port (Advanced) # --blackduck.proxy.port Proxy port. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Proxy Username (Advanced) # --blackduck.proxy.username Proxy username. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"proxy"},{"location":"properties/configuration/proxy/#proxy","text":"","title":"proxy"},{"location":"properties/configuration/proxy/#proxy-host-advanced","text":"--blackduck.proxy.host Hostname for proxy server. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Proxy Host (Advanced)"},{"location":"properties/configuration/proxy/#bypass-proxy-hosts-advanced","text":"--blackduck.proxy.ignored.hosts A comma separated list of regular expression host patterns that should not use the proxy. These patterns must adhere to Java regular expressions: https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html Details Added 4.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Bypass Proxy Hosts (Advanced)"},{"location":"properties/configuration/proxy/#ntlm-proxy-domain-advanced","text":"--blackduck.proxy.ntlm.domain NTLM Proxy domain. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"NTLM Proxy Domain (Advanced)"},{"location":"properties/configuration/proxy/#ntlm-proxy-workstation-advanced","text":"--blackduck.proxy.ntlm.workstation NTLM Proxy workstation. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"NTLM Proxy Workstation (Advanced)"},{"location":"properties/configuration/proxy/#proxy-password-advanced","text":"--blackduck.proxy.password Proxy password. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Proxy Password (Advanced)"},{"location":"properties/configuration/proxy/#proxy-port-advanced","text":"--blackduck.proxy.port Proxy port. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Proxy Port (Advanced)"},{"location":"properties/configuration/proxy/#proxy-username-advanced","text":"--blackduck.proxy.username Proxy username. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Proxy Username (Advanced)"},{"location":"properties/configuration/report/","text":"report # Generate Notices Report # --detect.notices.report=false When set to true, a Black Duck notices report in text form will be created in your source directory. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Notices Report Path # --detect.notices.report.path=. The output directory for notices report. Default is the source directory. Details Added 3.0.0 Type Path Default Value . Comma Separated No Case Sensitive No Acceptable Values Any Strict No Generate Risk Report (PDF) # --detect.risk.report.pdf=false When set to true, a Black Duck risk report in PDF form will be created. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Risk Report Output Path # --detect.risk.report.pdf.path=. The output directory for risk report in PDF. Default is the source directory. Details Added 3.0.0 Type Path Default Value . Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"report"},{"location":"properties/configuration/report/#report","text":"","title":"report"},{"location":"properties/configuration/report/#generate-notices-report","text":"--detect.notices.report=false When set to true, a Black Duck notices report in text form will be created in your source directory. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Generate Notices Report"},{"location":"properties/configuration/report/#notices-report-path","text":"--detect.notices.report.path=. The output directory for notices report. Default is the source directory. Details Added 3.0.0 Type Path Default Value . Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Notices Report Path"},{"location":"properties/configuration/report/#generate-risk-report-40pdf41","text":"--detect.risk.report.pdf=false When set to true, a Black Duck risk report in PDF form will be created. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Generate Risk Report (PDF)"},{"location":"properties/configuration/report/#risk-report-output-path","text":"--detect.risk.report.pdf.path=. The output directory for risk report in PDF. Default is the source directory. Details Added 3.0.0 Type Path Default Value . Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Risk Report Output Path"},{"location":"properties/configuration/signature scanner/","text":"signature scanner # Signature Scanner Arguments # --detect.blackduck.signature.scanner.arguments Additional arguments to use when running the Black Duck signature scanner. For example: Suppose you are running in bash on Linux and want to use the signature scanner's ability to read a list of directories to exclude from a file (using the signature scanner --exclude-from option). You tell the signature scanner read excluded directories from a file named excludes.txt in your home directory with: --detect.blackduck.signature.scanner.arguments='--exclude-from \\${HOME}/excludes.txt' Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Copyright Search # --detect.blackduck.signature.scanner.copyright.search=false When set to true, user will be able to scan and discover copyright names in Black Duck. Details Added 6.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Dry Run # --detect.blackduck.signature.scanner.dry.run=false If set to true, the signature scanner results are not uploaded to Black Duck, and the scanner results are written to disk. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Directory Name Exclusion Patterns # --detect.blackduck.signature.scanner.exclusion.name.patterns=node_modules A comma-separated list of directory name patterns for which Detect searches and adds to the signature scanner --exclude flag values. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Detect will recursively search within the scan targets for files/directories that match these patterns and will create the corresponding exclusion patterns (paths relative to the scan target directory) for the signature scanner (Black Duck scan CLI). Please note that the signature scanner will only exclude directories; matched filenames will be passed to the signature scanner but will have no effect. These patterns will be added to the patterns provided by detect.blackduck.signature.scanner.exclusion.patterns and passed as --exclude values. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.name.patterns=blackduck-common, --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-common', --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-*'. Use this property when you want Detect to convert the given patterns to actual paths. Use detect.blackduck.signature.scanner.exclusion.patterns to pass patterns directly to the signature scanner as-is. Details Added 4.2.0 Type String List Default Value node_modules Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Exclusion Patterns Search Depth # --detect.blackduck.signature.scanner.exclusion.pattern.search.depth=4 Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns. Details Added 5.0.0 Type Integer Default Value 4 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Exclusion Patterns # --detect.blackduck.signature.scanner.exclusion.patterns A comma-separated list of values to be used with the Signature Scanner --exclude flag. Each pattern provided is passed to the signature scanner (Black Duck scan CLI) as a value for an --exclude option. The signature scanner requires that these exclusion patterns start and end with a forward slash (/) and may not contain double asterisks (**). These patterns will be added to the paths created from detect.blackduck.signature.scanner.exclusion.name.patterns and passed as --exclude values. Use this property to pass patterns directly to the signature scanner as-is. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude from signature scanning. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.patterns=/blackduck-common/, --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-common/', --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-*/'. Use detect.blackduck.signature.scanner.exclusion.name.patterns when you want Detect to convert the given patterns to actual paths. Details Added 4.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Individual File Matching # --detect.blackduck.signature.scanner.individual.file.matching=NONE,SOURCE,BINARY,ALL Users may set this property to indicate what types of files they want to match Details Added 6.2.0 Type IndividualFileMatching Default Value NONE Comma Separated No Case Sensitive No Acceptable Values NONE, SOURCE, BINARY, ALL Strict Yes Signature Scanner License Search # --detect.blackduck.signature.scanner.license.search=false When set to true, user will be able to scan and discover license names in Black Duck Details Added 6.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Local Path # --detect.blackduck.signature.scanner.local.path To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Target Paths # --detect.blackduck.signature.scanner.paths These paths and only these paths will be scanned. Details Added 4.2.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Snippet Matching # --detect.blackduck.signature.scanner.snippet.matching=NONE,SNIPPET_MATCHING,SNIPPET_MATCHING_ONLY,FULL_SNIPPET_MATCHING,FULL_SNIPPET_MATCHING_ONLY Use this value to enable the various snippet scanning modes. For a full explanation, please refer to the 'Running a component scan using the Signature Scanner command line' section in your Black Duck server's online help. Details Added 5.5.0 Type SnippetMatching Default Value NONE Comma Separated No Case Sensitive No Acceptable Values NONE, SNIPPET_MATCHING, SNIPPET_MATCHING_ONLY, FULL_SNIPPET_MATCHING, FULL_SNIPPET_MATCHING_ONLY Strict Yes Upload source mode # --detect.blackduck.signature.scanner.upload.source.mode=false If set to true, the signature scanner will, if supported by your Black Duck version, upload source code to Black Duck. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Host URL (Advanced) # --detect.blackduck.signature.scanner.host.url If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Black Duck's urls for different operating systems. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Memory (Advanced) # --detect.blackduck.signature.scanner.memory=4096 The memory for the scanner to use. Details Added 4.2.0 Type Integer Default Value 4096 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Local Path (Offline) (Advanced) # --detect.blackduck.signature.scanner.offline.local.path To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Dry Run (Deprecated) # --detect.hub.signature.scanner.dry.run=false If set to true, the signature scanner results will not be uploaded to the Hub and the scanner results will be written to disk. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.dry.run in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Snippet Mode (Deprecated) # --detect.hub.signature.scanner.snippet.mode=false If set to true, the signature scanner will, if supported by your Hub version, run in snippet scanning mode. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.snippet.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Exclusion Patterns (Deprecated) # --detect.hub.signature.scanner.exclusion.patterns A comma-separated list of values to be used with the Signature Scanner --exclude flag. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Paths (Deprecated) # --detect.hub.signature.scanner.paths These paths and only these paths will be scanned. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.paths in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Exclusion Name Patterns (Deprecated) # --detect.hub.signature.scanner.exclusion.name.patterns=node_modules A comma-separated list of directory name patterns Detect will search for and add to the Signature Scanner --exclude flag values. Detect will recursively search within the scan targets for files/directories that match these file name patterns and will create the corresponding exclusion patterns for the signature scanner. These patterns will be added to the patterns provided by detect.blackduck.signature.scanner.exclusion.patterns. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.name.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type String List Default Value node_modules Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Memory (Deprecated) # --detect.hub.signature.scanner.memory=4096 The memory for the scanner to use. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.memory in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 4096 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Disabled (Deprecated) # --detect.hub.signature.scanner.disabled=false Set to true to disable the Hub Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Blackduck Signature Scanner Disabled (Deprecated) # --detect.blackduck.signature.scanner.disabled=false Set to true to disable the Black Duck Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Offline Local Path (Deprecated) # --detect.hub.signature.scanner.offline.local.path To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.offline.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Local Path (Deprecated) # --detect.hub.signature.scanner.local.path To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Host Url (Deprecated) # --detect.hub.signature.scanner.host.url If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Hub's urls for different operating systems. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.host.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Signature Scanner Parallel Processors (Deprecated) # --detect.blackduck.signature.scanner.parallel.processors=1 The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. The --detect.parallel.processors property will take precedence over this property. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.2.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Parallel Processors (Deprecated) # --detect.hub.signature.scanner.parallel.processors=1 The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Hub Signature Scanner Arguments (Deprecated) # --detect.hub.signature.scanner.arguments Additional arguments to use when running the Hub signature scanner. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.arguments in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Snippet Scanning (Deprecated) # --detect.blackduck.signature.scanner.snippet.mode=false If set to true, the signature scanner will, if supported by your Black Duck version, run in snippet scanning mode. DEPRECATED: This property is now deprecated. Please use --detect.blackduck.signature.scanner.snippet.matching in the future. NOTE the new property is one of a particular set of values. You will need to consult the documentation for the Signature Scanner in Black Duck for details. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"signature scanner"},{"location":"properties/configuration/signature scanner/#signature-scanner","text":"","title":"signature scanner"},{"location":"properties/configuration/signature scanner/#signature-scanner-arguments","text":"--detect.blackduck.signature.scanner.arguments Additional arguments to use when running the Black Duck signature scanner. For example: Suppose you are running in bash on Linux and want to use the signature scanner's ability to read a list of directories to exclude from a file (using the signature scanner --exclude-from option). You tell the signature scanner read excluded directories from a file named excludes.txt in your home directory with: --detect.blackduck.signature.scanner.arguments='--exclude-from \\${HOME}/excludes.txt' Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Arguments"},{"location":"properties/configuration/signature scanner/#signature-scanner-copyright-search","text":"--detect.blackduck.signature.scanner.copyright.search=false When set to true, user will be able to scan and discover copyright names in Black Duck. Details Added 6.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Copyright Search"},{"location":"properties/configuration/signature scanner/#signature-scanner-dry-run","text":"--detect.blackduck.signature.scanner.dry.run=false If set to true, the signature scanner results are not uploaded to Black Duck, and the scanner results are written to disk. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Dry Run"},{"location":"properties/configuration/signature scanner/#directory-name-exclusion-patterns","text":"--detect.blackduck.signature.scanner.exclusion.name.patterns=node_modules A comma-separated list of directory name patterns for which Detect searches and adds to the signature scanner --exclude flag values. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Detect will recursively search within the scan targets for files/directories that match these patterns and will create the corresponding exclusion patterns (paths relative to the scan target directory) for the signature scanner (Black Duck scan CLI). Please note that the signature scanner will only exclude directories; matched filenames will be passed to the signature scanner but will have no effect. These patterns will be added to the patterns provided by detect.blackduck.signature.scanner.exclusion.patterns and passed as --exclude values. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.name.patterns=blackduck-common, --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-common', --detect.blackduck.signature.scanner.exclusion.name.patterns='blackduck-*'. Use this property when you want Detect to convert the given patterns to actual paths. Use detect.blackduck.signature.scanner.exclusion.patterns to pass patterns directly to the signature scanner as-is. Details Added 4.2.0 Type String List Default Value node_modules Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Directory Name Exclusion Patterns"},{"location":"properties/configuration/signature scanner/#exclusion-patterns-search-depth","text":"--detect.blackduck.signature.scanner.exclusion.pattern.search.depth=4 Enables you to adjust the depth to which Detect will search when creating signature scanner exclusion patterns. Details Added 5.0.0 Type Integer Default Value 4 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Exclusion Patterns Search Depth"},{"location":"properties/configuration/signature scanner/#exclusion-patterns","text":"--detect.blackduck.signature.scanner.exclusion.patterns A comma-separated list of values to be used with the Signature Scanner --exclude flag. Each pattern provided is passed to the signature scanner (Black Duck scan CLI) as a value for an --exclude option. The signature scanner requires that these exclusion patterns start and end with a forward slash (/) and may not contain double asterisks (**). These patterns will be added to the paths created from detect.blackduck.signature.scanner.exclusion.name.patterns and passed as --exclude values. Use this property to pass patterns directly to the signature scanner as-is. For example: suppose you are running in bash on Linux, and have a subdirectory named blackduck-common that you want to exclude from signature scanning. Any of the following would exclude it: --detect.blackduck.signature.scanner.exclusion.patterns=/blackduck-common/, --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-common/', --detect.blackduck.signature.scanner.exclusion.patterns='/blackduck-*/'. Use detect.blackduck.signature.scanner.exclusion.name.patterns when you want Detect to convert the given patterns to actual paths. Details Added 4.2.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Exclusion Patterns"},{"location":"properties/configuration/signature scanner/#individual-file-matching","text":"--detect.blackduck.signature.scanner.individual.file.matching=NONE,SOURCE,BINARY,ALL Users may set this property to indicate what types of files they want to match Details Added 6.2.0 Type IndividualFileMatching Default Value NONE Comma Separated No Case Sensitive No Acceptable Values NONE, SOURCE, BINARY, ALL Strict Yes","title":"Individual File Matching"},{"location":"properties/configuration/signature scanner/#signature-scanner-license-search","text":"--detect.blackduck.signature.scanner.license.search=false When set to true, user will be able to scan and discover license names in Black Duck Details Added 6.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner License Search"},{"location":"properties/configuration/signature scanner/#signature-scanner-local-path","text":"--detect.blackduck.signature.scanner.local.path To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Local Path"},{"location":"properties/configuration/signature scanner/#signature-scanner-target-paths","text":"--detect.blackduck.signature.scanner.paths These paths and only these paths will be scanned. Details Added 4.2.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Target Paths"},{"location":"properties/configuration/signature scanner/#snippet-matching","text":"--detect.blackduck.signature.scanner.snippet.matching=NONE,SNIPPET_MATCHING,SNIPPET_MATCHING_ONLY,FULL_SNIPPET_MATCHING,FULL_SNIPPET_MATCHING_ONLY Use this value to enable the various snippet scanning modes. For a full explanation, please refer to the 'Running a component scan using the Signature Scanner command line' section in your Black Duck server's online help. Details Added 5.5.0 Type SnippetMatching Default Value NONE Comma Separated No Case Sensitive No Acceptable Values NONE, SNIPPET_MATCHING, SNIPPET_MATCHING_ONLY, FULL_SNIPPET_MATCHING, FULL_SNIPPET_MATCHING_ONLY Strict Yes","title":"Snippet Matching"},{"location":"properties/configuration/signature scanner/#upload-source-mode","text":"--detect.blackduck.signature.scanner.upload.source.mode=false If set to true, the signature scanner will, if supported by your Black Duck version, upload source code to Black Duck. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Upload source mode"},{"location":"properties/configuration/signature scanner/#signature-scanner-host-url-advanced","text":"--detect.blackduck.signature.scanner.host.url If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Black Duck's urls for different operating systems. Details Added 4.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Host URL (Advanced)"},{"location":"properties/configuration/signature scanner/#signature-scanner-memory-advanced","text":"--detect.blackduck.signature.scanner.memory=4096 The memory for the scanner to use. Details Added 4.2.0 Type Integer Default Value 4096 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Memory (Advanced)"},{"location":"properties/configuration/signature scanner/#signature-scanner-local-path-40offline41-advanced","text":"--detect.blackduck.signature.scanner.offline.local.path To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Local Path (Offline) (Advanced)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-dry-run-deprecated","text":"--detect.hub.signature.scanner.dry.run=false If set to true, the signature scanner results will not be uploaded to the Hub and the scanner results will be written to disk. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.dry.run in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Dry Run (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-snippet-mode-deprecated","text":"--detect.hub.signature.scanner.snippet.mode=false If set to true, the signature scanner will, if supported by your Hub version, run in snippet scanning mode. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.snippet.mode in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Snippet Mode (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-exclusion-patterns-deprecated","text":"--detect.hub.signature.scanner.exclusion.patterns A comma-separated list of values to be used with the Signature Scanner --exclude flag. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Exclusion Patterns (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-paths-deprecated","text":"--detect.hub.signature.scanner.paths These paths and only these paths will be scanned. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.paths in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Paths (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-exclusion-name-patterns-deprecated","text":"--detect.hub.signature.scanner.exclusion.name.patterns=node_modules A comma-separated list of directory name patterns Detect will search for and add to the Signature Scanner --exclude flag values. Detect will recursively search within the scan targets for files/directories that match these file name patterns and will create the corresponding exclusion patterns for the signature scanner. These patterns will be added to the patterns provided by detect.blackduck.signature.scanner.exclusion.patterns. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.exclusion.name.patterns in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type String List Default Value node_modules Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Exclusion Name Patterns (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-memory-deprecated","text":"--detect.hub.signature.scanner.memory=4096 The memory for the scanner to use. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.memory in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 4096 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Memory (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-disabled-deprecated","text":"--detect.hub.signature.scanner.disabled=false Set to true to disable the Hub Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Disabled (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-blackduck-signature-scanner-disabled-deprecated","text":"--detect.blackduck.signature.scanner.disabled=false Set to true to disable the Black Duck Signature Scanner. DEPRECATED: This property is changing. Please use --detect.tools in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Blackduck Signature Scanner Disabled (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-offline-local-path-deprecated","text":"--detect.hub.signature.scanner.offline.local.path To use a local signature scanner and force offline, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.offline.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Offline Local Path (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-local-path-deprecated","text":"--detect.hub.signature.scanner.local.path To use a local signature scanner, specify the path where the signature scanner was unzipped. This will likely look similar to 'scan.cli-x.y.z' and includes the 'bin, icon, jre, and lib' directories of the expanded scan.cli. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.local.path in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Local Path (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-host-url-deprecated","text":"--detect.hub.signature.scanner.host.url If this url is set, an attempt will be made to use it to download the signature scanner. The server url provided must respect the Hub's urls for different operating systems. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.host.url in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Host Url (Deprecated)"},{"location":"properties/configuration/signature scanner/#signature-scanner-parallel-processors-deprecated","text":"--detect.blackduck.signature.scanner.parallel.processors=1 The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. The --detect.parallel.processors property will take precedence over this property. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.2.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Signature Scanner Parallel Processors (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-parallel-processors-deprecated","text":"--detect.hub.signature.scanner.parallel.processors=1 The number of scans to run in parallel, defaults to 1, but if you specify -1, the number of processors on the machine will be used. DEPRECATED: This property is changing. Please use --detect.parallel.processors in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Parallel Processors (Deprecated)"},{"location":"properties/configuration/signature scanner/#detect-hub-signature-scanner-arguments-deprecated","text":"--detect.hub.signature.scanner.arguments Additional arguments to use when running the Hub signature scanner. DEPRECATED: This property is changing. Please use --detect.blackduck.signature.scanner.arguments in the future. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Hub Signature Scanner Arguments (Deprecated)"},{"location":"properties/configuration/signature scanner/#snippet-scanning-deprecated","text":"--detect.blackduck.signature.scanner.snippet.mode=false If set to true, the signature scanner will, if supported by your Black Duck version, run in snippet scanning mode. DEPRECATED: This property is now deprecated. Please use --detect.blackduck.signature.scanner.snippet.matching in the future. NOTE the new property is one of a particular set of values. You will need to consult the documentation for the Signature Scanner in Black Duck for details. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 4.2.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Snippet Scanning (Deprecated)"},{"location":"properties/detectors/bazel/","text":"bazel # Bazel Executable # --detect.bazel.path The path to the Bazel executable. Details Added 5.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Bazel Target # --detect.bazel.target The Bazel target (for example, //foo:foolib) for which dependencies are collected. For Detect to run Bazel, this property must be set. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Bazel cquery additional options # --detect.bazel.cquery.options A comma-separated list of additional options to pass to the bazel cquery command. Details Added 6.1.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Bazel workspace external dependency rule # --detect.bazel.dependency.type=ALL,NONE,MAVEN_JAR,MAVEN_INSTALL,HASKELL_CABAL_LIBRARY The Bazel workspace rule(s) used to pull in external dependencies. If not set, Detect will attempt to determine the rule(s) from the contents of the WORKSPACE file. Details Added 6.0.0 Type WorkspaceRule List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, MAVEN_JAR, MAVEN_INSTALL, HASKELL_CABAL_LIBRARY Strict Yes","title":"bazel"},{"location":"properties/detectors/bazel/#bazel","text":"","title":"bazel"},{"location":"properties/detectors/bazel/#bazel-executable","text":"--detect.bazel.path The path to the Bazel executable. Details Added 5.2.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Bazel Executable"},{"location":"properties/detectors/bazel/#bazel-target","text":"--detect.bazel.target The Bazel target (for example, //foo:foolib) for which dependencies are collected. For Detect to run Bazel, this property must be set. Details Added 5.2.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Bazel Target"},{"location":"properties/detectors/bazel/#bazel-cquery-additional-options","text":"--detect.bazel.cquery.options A comma-separated list of additional options to pass to the bazel cquery command. Details Added 6.1.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Bazel cquery additional options"},{"location":"properties/detectors/bazel/#bazel-workspace-external-dependency-rule","text":"--detect.bazel.dependency.type=ALL,NONE,MAVEN_JAR,MAVEN_INSTALL,HASKELL_CABAL_LIBRARY The Bazel workspace rule(s) used to pull in external dependencies. If not set, Detect will attempt to determine the rule(s) from the contents of the WORKSPACE file. Details Added 6.0.0 Type WorkspaceRule List Default Value Comma Separated Yes Case Sensitive Yes Acceptable Values ALL, NONE, MAVEN_JAR, MAVEN_INSTALL, HASKELL_CABAL_LIBRARY Strict Yes","title":"Bazel workspace external dependency rule"},{"location":"properties/detectors/bitbake/","text":"bitbake # BitBake Init Script Name # --detect.bitbake.build.env.name=oe-init-build-env The name of the build environment init script. Details Added 4.4.0 Type String Default Value oe-init-build-env Comma Separated No Case Sensitive No Acceptable Values Any Strict No BitBake Package Names # --detect.bitbake.package.names A comma-separated list of package names from which dependencies are extracted. Details Added 4.4.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No BitBake Source Arguments # --detect.bitbake.source.arguments A comma-separated list of arguments to supply when sourcing the build environment init script. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No BitBake Search Depth # --detect.bitbake.search.depth=1 The depth at which Detect will search for files generated by Bitbake. Details Added 6.1.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No Reference implementation (Deprecated) # --detect.bitbake.reference.impl=-poky-linux The reference implementation of the Yocto project. These characters are stripped from the discovered target architecture. DEPRECATED: This property is no longer required and will not be used in the Bitbake Detector. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.4.0 Type String Default Value -poky-linux Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"bitbake"},{"location":"properties/detectors/bitbake/#bitbake","text":"","title":"bitbake"},{"location":"properties/detectors/bitbake/#bitbake-init-script-name","text":"--detect.bitbake.build.env.name=oe-init-build-env The name of the build environment init script. Details Added 4.4.0 Type String Default Value oe-init-build-env Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"BitBake Init Script Name"},{"location":"properties/detectors/bitbake/#bitbake-package-names","text":"--detect.bitbake.package.names A comma-separated list of package names from which dependencies are extracted. Details Added 4.4.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"BitBake Package Names"},{"location":"properties/detectors/bitbake/#bitbake-source-arguments","text":"--detect.bitbake.source.arguments A comma-separated list of arguments to supply when sourcing the build environment init script. Details Added 6.0.0 Type String List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"BitBake Source Arguments"},{"location":"properties/detectors/bitbake/#bitbake-search-depth","text":"--detect.bitbake.search.depth=1 The depth at which Detect will search for files generated by Bitbake. Details Added 6.1.0 Type Integer Default Value 1 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"BitBake Search Depth"},{"location":"properties/detectors/bitbake/#reference-implementation-deprecated","text":"--detect.bitbake.reference.impl=-poky-linux The reference implementation of the Yocto project. These characters are stripped from the discovered target architecture. DEPRECATED: This property is no longer required and will not be used in the Bitbake Detector. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 4.4.0 Type String Default Value -poky-linux Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Reference implementation (Deprecated)"},{"location":"properties/detectors/conda/","text":"conda # Anaconda Environment Name # --detect.conda.environment.name The name of the anaconda environment used by your project. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Conda Executable # --detect.conda.path The path to the conda executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"conda"},{"location":"properties/detectors/conda/#conda","text":"","title":"conda"},{"location":"properties/detectors/conda/#anaconda-environment-name","text":"--detect.conda.environment.name The name of the anaconda environment used by your project. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Anaconda Environment Name"},{"location":"properties/detectors/conda/#conda-executable","text":"--detect.conda.path The path to the conda executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Conda Executable"},{"location":"properties/detectors/cpan/","text":"cpan # cpan Executable # --detect.cpan.path The path to the cpan executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No cpanm Executable # --detect.cpanm.path The path to the cpanm executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"cpan"},{"location":"properties/detectors/cpan/#cpan","text":"","title":"cpan"},{"location":"properties/detectors/cpan/#cpan-executable","text":"--detect.cpan.path The path to the cpan executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"cpan Executable"},{"location":"properties/detectors/cpan/#cpanm-executable","text":"--detect.cpanm.path The path to the cpanm executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"cpanm Executable"},{"location":"properties/detectors/docker/","text":"docker # Docker Image Name # --detect.docker.image The Docker image name to inspect. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Image ID # --detect.docker.image.id The Docker image ID to inspect. Details Added 6.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Executable # --detect.docker.path Path to the docker executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Image Archive File # --detect.docker.tar A saved Docker image - must be a .tar file. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Phone Home Passthrough (Advanced) # --detect.phone.home.passthrough Additional values may be sent home for usage information. The keys will be sent without the prefix. Details Added 6.0.0 Type None Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Passthrough (Advanced) # --detect.docker.passthrough Additional properties may be passed to the docker inspector by adding the prefix detect.docker.passthrough. The keys will be given to docker inspector without the prefix. Details Added 6.0.0 Type None Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Inspector AirGap Path (Advanced) # --detect.docker.inspector.air.gap.path The path to the directory containing the Docker Inspector jar and images. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Inspector .jar File Path (Advanced) # --detect.docker.inspector.path This is used to override using the hosted Docker Inspector .jar file by binary repository url. You can use a compatible (the same major version that Detect downloads by default) local Docker Inspector .jar file at this path. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Docker Inspector Version (Advanced) # --detect.docker.inspector.version Version of the Docker Inspector to use. By default Detect will attempt to automatically determine the version to use. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Run Without Docker in Path (Advanced) # --detect.docker.path.required=false If set to true, Detect will attempt to run the Docker Inspector only if it finds a docker client executable. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Platform Top Layer ID (Advanced) # --detect.docker.platform.top.layer.id To exclude components from platform layers from the results, assign to this property the ID of the top layer of the platform image. Get the platform top layer ID from the output of 'docker inspect platformimage:tag'. The platform top layer ID is the last item in RootFS.Layers. For more information, see 'Isolating application components' in the Docker Inspector documentation. If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from the results by using this property to specify the boundary between platform layers and application layers. Details Added 6.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"docker"},{"location":"properties/detectors/docker/#docker","text":"","title":"docker"},{"location":"properties/detectors/docker/#docker-image-name","text":"--detect.docker.image The Docker image name to inspect. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Image Name"},{"location":"properties/detectors/docker/#docker-image-id","text":"--detect.docker.image.id The Docker image ID to inspect. Details Added 6.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Image ID"},{"location":"properties/detectors/docker/#docker-executable","text":"--detect.docker.path Path to the docker executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Executable"},{"location":"properties/detectors/docker/#docker-image-archive-file","text":"--detect.docker.tar A saved Docker image - must be a .tar file. For Detect to run Docker Inspector, either this property or detect.docker.tar must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Image Archive File"},{"location":"properties/detectors/docker/#phone-home-passthrough-advanced","text":"--detect.phone.home.passthrough Additional values may be sent home for usage information. The keys will be sent without the prefix. Details Added 6.0.0 Type None Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Phone Home Passthrough (Advanced)"},{"location":"properties/detectors/docker/#docker-passthrough-advanced","text":"--detect.docker.passthrough Additional properties may be passed to the docker inspector by adding the prefix detect.docker.passthrough. The keys will be given to docker inspector without the prefix. Details Added 6.0.0 Type None Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Passthrough (Advanced)"},{"location":"properties/detectors/docker/#docker-inspector-airgap-path-advanced","text":"--detect.docker.inspector.air.gap.path The path to the directory containing the Docker Inspector jar and images. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Inspector AirGap Path (Advanced)"},{"location":"properties/detectors/docker/#docker-inspector-46jar-file-path-advanced","text":"--detect.docker.inspector.path This is used to override using the hosted Docker Inspector .jar file by binary repository url. You can use a compatible (the same major version that Detect downloads by default) local Docker Inspector .jar file at this path. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Inspector .jar File Path (Advanced)"},{"location":"properties/detectors/docker/#docker-inspector-version-advanced","text":"--detect.docker.inspector.version Version of the Docker Inspector to use. By default Detect will attempt to automatically determine the version to use. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Docker Inspector Version (Advanced)"},{"location":"properties/detectors/docker/#run-without-docker-in-path-advanced","text":"--detect.docker.path.required=false If set to true, Detect will attempt to run the Docker Inspector only if it finds a docker client executable. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Run Without Docker in Path (Advanced)"},{"location":"properties/detectors/docker/#platform-top-layer-id-advanced","text":"--detect.docker.platform.top.layer.id To exclude components from platform layers from the results, assign to this property the ID of the top layer of the platform image. Get the platform top layer ID from the output of 'docker inspect platformimage:tag'. The platform top layer ID is the last item in RootFS.Layers. For more information, see 'Isolating application components' in the Docker Inspector documentation. If you are interested in components from the application layers of your image, but not interested in components from the underlying platform layers, you can exclude components from platform layers from the results by using this property to specify the boundary between platform layers and application layers. Details Added 6.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Platform Top Layer ID (Advanced)"},{"location":"properties/detectors/go/","text":"go # Go Executable # --detect.go.path Path to the Go executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"go"},{"location":"properties/detectors/go/#go","text":"","title":"go"},{"location":"properties/detectors/go/#go-executable","text":"--detect.go.path Path to the Go executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Go Executable"},{"location":"properties/detectors/gradle/","text":"gradle # Gradle Build Command # --detect.gradle.build.command Gradle command line arguments to add to the gradle/gradlew command line. By default, Detect runs the gradle (or gradlew) command with one task: dependencies. You can use this property to insert one or more additional gradle command line arguments (options or tasks) before the dependencies argument. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Executable # --detect.gradle.path The path to the Gradle executable (gradle or gradlew). If set, Detect will use the given Gradle executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Exclude Configurations (Advanced) # --detect.gradle.excluded.configurations A comma-separated list of Gradle configurations to exclude. As Detect examines the Gradle project for dependencies, Detect will skip any Gradle configurations specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Exclude Projects (Advanced) # --detect.gradle.excluded.projects A comma-separated list of Gradle sub-projects to exclude. As Detect examines the Gradle project for dependencies, Detect will skip any Gradle sub-projects specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Include Configurations (Advanced) # --detect.gradle.included.configurations A comma-separated list of Gradle configurations to include. As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those Gradle configurations specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Include Projects (Advanced) # --detect.gradle.included.projects A comma-separated list of Gradle sub-projects to include. As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those sub-projects specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Inspector AirGap Path (Advanced) # --detect.gradle.inspector.air.gap.path The path to the directory containing the air gap dependencies for the gradle inspector. Use this property when running Detect on a Gradle project in 'air gap' mode (offline). Download and unzip the Detect air gap zip file, and point this property to the packaged-inspectors/gradle directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Gradle Inspector Version (Advanced) # --detect.gradle.inspector.version The version of the Gradle Inspector that Detect should use. By default, Detect will try to automatically determine the correct Gradle Inspector version. The Detect Gradle detector uses a separate program, the Gradle Inspector, to discover dependencies from Gradle projects. Detect automatically downloads the Gradle Inspector as needed. Use the property to use a specific version of the Gradle Inspector. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Gradle Inspector Repository Url (Deprecated) # --detect.gradle.inspector.repository.url The respository gradle should use to look for the gradle inspector dependencies. DEPRECATED: In the future, the gradle inspector will no longer be downloaded from a custom repository, please use Detect Air Gap instead. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"gradle"},{"location":"properties/detectors/gradle/#gradle","text":"","title":"gradle"},{"location":"properties/detectors/gradle/#gradle-build-command","text":"--detect.gradle.build.command Gradle command line arguments to add to the gradle/gradlew command line. By default, Detect runs the gradle (or gradlew) command with one task: dependencies. You can use this property to insert one or more additional gradle command line arguments (options or tasks) before the dependencies argument. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Build Command"},{"location":"properties/detectors/gradle/#gradle-executable","text":"--detect.gradle.path The path to the Gradle executable (gradle or gradlew). If set, Detect will use the given Gradle executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Executable"},{"location":"properties/detectors/gradle/#gradle-exclude-configurations-advanced","text":"--detect.gradle.excluded.configurations A comma-separated list of Gradle configurations to exclude. As Detect examines the Gradle project for dependencies, Detect will skip any Gradle configurations specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Exclude Configurations (Advanced)"},{"location":"properties/detectors/gradle/#gradle-exclude-projects-advanced","text":"--detect.gradle.excluded.projects A comma-separated list of Gradle sub-projects to exclude. As Detect examines the Gradle project for dependencies, Detect will skip any Gradle sub-projects specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Exclude Projects (Advanced)"},{"location":"properties/detectors/gradle/#gradle-include-configurations-advanced","text":"--detect.gradle.included.configurations A comma-separated list of Gradle configurations to include. As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those Gradle configurations specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Include Configurations (Advanced)"},{"location":"properties/detectors/gradle/#gradle-include-projects-advanced","text":"--detect.gradle.included.projects A comma-separated list of Gradle sub-projects to include. As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those sub-projects specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Include Projects (Advanced)"},{"location":"properties/detectors/gradle/#gradle-inspector-airgap-path-advanced","text":"--detect.gradle.inspector.air.gap.path The path to the directory containing the air gap dependencies for the gradle inspector. Use this property when running Detect on a Gradle project in 'air gap' mode (offline). Download and unzip the Detect air gap zip file, and point this property to the packaged-inspectors/gradle directory. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Inspector AirGap Path (Advanced)"},{"location":"properties/detectors/gradle/#gradle-inspector-version-advanced","text":"--detect.gradle.inspector.version The version of the Gradle Inspector that Detect should use. By default, Detect will try to automatically determine the correct Gradle Inspector version. The Detect Gradle detector uses a separate program, the Gradle Inspector, to discover dependencies from Gradle projects. Detect automatically downloads the Gradle Inspector as needed. Use the property to use a specific version of the Gradle Inspector. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Gradle Inspector Version (Advanced)"},{"location":"properties/detectors/gradle/#detect-gradle-inspector-repository-url-deprecated","text":"--detect.gradle.inspector.repository.url The respository gradle should use to look for the gradle inspector dependencies. DEPRECATED: In the future, the gradle inspector will no longer be downloaded from a custom repository, please use Detect Air Gap instead. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Gradle Inspector Repository Url (Deprecated)"},{"location":"properties/detectors/hex/","text":"hex # Rebar3 Executable # --detect.hex.rebar3.path The path to the rebar3 executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"hex"},{"location":"properties/detectors/hex/#hex","text":"","title":"hex"},{"location":"properties/detectors/hex/#rebar3-executable","text":"--detect.hex.rebar3.path The path to the rebar3 executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Rebar3 Executable"},{"location":"properties/detectors/lerna/","text":"lerna # Lerna Executable # --detect.lerna.path Path of the lerna executable. Details Added 6.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Include Lerna Packages defined as private. # --detect.lerna.include.private=false Lerna allows for private packages that do not get published. Set this to true to include all packages including private packages. Details Added 6.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"lerna"},{"location":"properties/detectors/lerna/#lerna","text":"","title":"lerna"},{"location":"properties/detectors/lerna/#lerna-executable","text":"--detect.lerna.path Path of the lerna executable. Details Added 6.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Lerna Executable"},{"location":"properties/detectors/lerna/#include-lerna-packages-defined-as-private46","text":"--detect.lerna.include.private=false Lerna allows for private packages that do not get published. Set this to true to include all packages including private packages. Details Added 6.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Include Lerna Packages defined as private."},{"location":"properties/detectors/maven/","text":"maven # Maven Build Command # --detect.maven.build.command Maven command line arguments to add to the mvn/mvnw command line. By default, Detect runs the mvn (or mvnw) command with one argument: dependency:tree. You can use this property to insert one or more additional mvn command line arguments (goals, etc.) before the dependency:tree argument. For example: suppose you are running in bash on Linux, and want to point maven to your settings file (maven_dev_settings.xml in your home directory) and assign the value 'other' to property 'reason'. You could do this with: --detect.maven.build.command='--settings \\${HOME}/maven_dev_settings.xml --define reason=other' Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Maven Executable # --detect.maven.path The path to the Maven executable (mvn or mvnw). If set, Detect will use the given Maven executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Dependency Scope Included # --detect.maven.included.scopes A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude). If set, Detect will include only dependencies of the given Maven scope. This property accepts filename globbing-style wildcards. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Dependency Scope Excluded # --detect.maven.excluded.scopes A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include). If set, Detect will include only dependencies outside of the given Maven scope. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Maven Modules Excluded (Advanced) # --detect.maven.excluded.modules A comma-separated list of Maven modules (sub-projects) to exclude. As Detect parses the mvn dependency:tree output for dependencies, Detect will skip any Maven modules specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Maven Modules Included (Advanced) # --detect.maven.included.modules A comma-separated list of Maven modules (sub-projects) to include. As Detect parses the mvn dependency:tree output for dependencies, if this property is set, Detect will include only those Maven modules specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Maven Include Plugins (Advanced) # --detect.maven.include.plugins=false Whether or not detect will include the plugins section when parsing a pom.xml. Details Added 5.6.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Dependency Scope Included (Deprecated) # --detect.maven.scope The name of a Maven scope. Output will be limited to dependencies with this scope. If set, Detect will include only dependencies of the given Maven scope. DEPRECATED: This property is changing. Please use --detect.maven.included.scope in the future. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"maven"},{"location":"properties/detectors/maven/#maven","text":"","title":"maven"},{"location":"properties/detectors/maven/#maven-build-command","text":"--detect.maven.build.command Maven command line arguments to add to the mvn/mvnw command line. By default, Detect runs the mvn (or mvnw) command with one argument: dependency:tree. You can use this property to insert one or more additional mvn command line arguments (goals, etc.) before the dependency:tree argument. For example: suppose you are running in bash on Linux, and want to point maven to your settings file (maven_dev_settings.xml in your home directory) and assign the value 'other' to property 'reason'. You could do this with: --detect.maven.build.command='--settings \\${HOME}/maven_dev_settings.xml --define reason=other' Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Maven Build Command"},{"location":"properties/detectors/maven/#maven-executable","text":"--detect.maven.path The path to the Maven executable (mvn or mvnw). If set, Detect will use the given Maven executable instead of searching for one. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Maven Executable"},{"location":"properties/detectors/maven/#dependency-scope-included","text":"--detect.maven.included.scopes A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude). If set, Detect will include only dependencies of the given Maven scope. This property accepts filename globbing-style wildcards. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Dependency Scope Included"},{"location":"properties/detectors/maven/#dependency-scope-excluded","text":"--detect.maven.excluded.scopes A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include). If set, Detect will include only dependencies outside of the given Maven scope. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 6.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Dependency Scope Excluded"},{"location":"properties/detectors/maven/#maven-modules-excluded-advanced","text":"--detect.maven.excluded.modules A comma-separated list of Maven modules (sub-projects) to exclude. As Detect parses the mvn dependency:tree output for dependencies, Detect will skip any Maven modules specified via this property. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Maven Modules Excluded (Advanced)"},{"location":"properties/detectors/maven/#maven-modules-included-advanced","text":"--detect.maven.included.modules A comma-separated list of Maven modules (sub-projects) to include. As Detect parses the mvn dependency:tree output for dependencies, if this property is set, Detect will include only those Maven modules specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Maven Modules Included (Advanced)"},{"location":"properties/detectors/maven/#maven-include-plugins-advanced","text":"--detect.maven.include.plugins=false Whether or not detect will include the plugins section when parsing a pom.xml. Details Added 5.6.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Maven Include Plugins (Advanced)"},{"location":"properties/detectors/maven/#dependency-scope-included-deprecated","text":"--detect.maven.scope The name of a Maven scope. Output will be limited to dependencies with this scope. If set, Detect will include only dependencies of the given Maven scope. DEPRECATED: This property is changing. Please use --detect.maven.included.scope in the future. It will cause failure in 7.0.0 and be removed in 8.0.0. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Dependency Scope Included (Deprecated)"},{"location":"properties/detectors/npm/","text":"npm # Additional NPM Command Arguments # --detect.npm.arguments A space-separated list of additional arguments to add to the npm command line when running Detect against an NPM project. Details Added 4.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Include NPM Development Dependencies # --detect.npm.include.dev.dependencies=true Set this value to false if you would like to exclude your dev dependencies when ran. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No NPM Executable # --detect.npm.path The path to the Npm executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"npm"},{"location":"properties/detectors/npm/#npm","text":"","title":"npm"},{"location":"properties/detectors/npm/#additional-npm-command-arguments","text":"--detect.npm.arguments A space-separated list of additional arguments to add to the npm command line when running Detect against an NPM project. Details Added 4.3.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Additional NPM Command Arguments"},{"location":"properties/detectors/npm/#include-npm-development-dependencies","text":"--detect.npm.include.dev.dependencies=true Set this value to false if you would like to exclude your dev dependencies when ran. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Include NPM Development Dependencies"},{"location":"properties/detectors/npm/#npm-executable","text":"--detect.npm.path The path to the Npm executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"NPM Executable"},{"location":"properties/detectors/nuget/","text":"nuget # dotnet Executable # --detect.dotnet.path The path to the dotnet executable. Details Added 4.4.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Nuget Config File # --detect.nuget.config.path The path to the Nuget.Config file to supply to the nuget exe. Details Added 4.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Nuget Packages Repository URL # --detect.nuget.packages.repo.url=https://api.nuget.org/v3/index.json The source for nuget packages Set this to \"https://www.nuget.org/api/v2/\" if your are still using a nuget client expecting the v2 api. Details Added 3.0.0 Type String List Default Value https://api.nuget.org/v3/index.json Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No Nuget Projects Excluded (Advanced) # --detect.nuget.excluded.modules The names of the projects in a solution to exclude. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Ignore Nuget Failures (Advanced) # --detect.nuget.ignore.failure=false If true errors will be logged and then ignored. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Nuget Modules Included (Advanced) # --detect.nuget.included.modules The names of the projects in a solution to include (overrides exclude). Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Nuget Inspector AirGap Path (Advanced) # --detect.nuget.inspector.air.gap.path The path to the directory containing the nuget inspector nupkg. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Nuget Inspector Version (Advanced) # --detect.nuget.inspector.version Version of the Nuget Inspector. By default Detect will run the latest version that is compatible with the Detect version. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Nuget Inspector Name (Deprecated) # --detect.nuget.inspector.name=IntegrationNugetInspector Name of the Nuget Inspector package and the Nuget Inspector exe. (Do not include '.exe'.) The nuget inspector (previously) could be hosted on a custom nuget feed. In this case, Detect needed to know the name of the package to pull and the name of the exe file (which has to match). In the future, Detect will only retreive it from Artifactory or from Air Gap so a custom name is no longer supported. DEPRECATED: In the future, Detect will not look for a custom named inspector. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type String Default Value IntegrationNugetInspector Comma Separated No Case Sensitive No Acceptable Values Any Strict No Detect Nuget Path (Deprecated) # --detect.nuget.path The path to the Nuget executable. Nuget is used to download the classic inspectors nuget package. DEPRECATED: In the future, Detect will no longer need a nuget executable as it will download the inspector from Artifactory exclusively. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"nuget"},{"location":"properties/detectors/nuget/#nuget","text":"","title":"nuget"},{"location":"properties/detectors/nuget/#dotnet-executable","text":"--detect.dotnet.path The path to the dotnet executable. Details Added 4.4.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"dotnet Executable"},{"location":"properties/detectors/nuget/#nuget-config-file","text":"--detect.nuget.config.path The path to the Nuget.Config file to supply to the nuget exe. Details Added 4.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Config File"},{"location":"properties/detectors/nuget/#nuget-packages-repository-url","text":"--detect.nuget.packages.repo.url=https://api.nuget.org/v3/index.json The source for nuget packages Set this to \"https://www.nuget.org/api/v2/\" if your are still using a nuget client expecting the v2 api. Details Added 3.0.0 Type String List Default Value https://api.nuget.org/v3/index.json Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Packages Repository URL"},{"location":"properties/detectors/nuget/#nuget-projects-excluded-advanced","text":"--detect.nuget.excluded.modules The names of the projects in a solution to exclude. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Projects Excluded (Advanced)"},{"location":"properties/detectors/nuget/#ignore-nuget-failures-advanced","text":"--detect.nuget.ignore.failure=false If true errors will be logged and then ignored. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Ignore Nuget Failures (Advanced)"},{"location":"properties/detectors/nuget/#nuget-modules-included-advanced","text":"--detect.nuget.included.modules The names of the projects in a solution to include (overrides exclude). Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Modules Included (Advanced)"},{"location":"properties/detectors/nuget/#nuget-inspector-airgap-path-advanced","text":"--detect.nuget.inspector.air.gap.path The path to the directory containing the nuget inspector nupkg. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Inspector AirGap Path (Advanced)"},{"location":"properties/detectors/nuget/#nuget-inspector-version-advanced","text":"--detect.nuget.inspector.version Version of the Nuget Inspector. By default Detect will run the latest version that is compatible with the Detect version. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Nuget Inspector Version (Advanced)"},{"location":"properties/detectors/nuget/#detect-nuget-inspector-name-deprecated","text":"--detect.nuget.inspector.name=IntegrationNugetInspector Name of the Nuget Inspector package and the Nuget Inspector exe. (Do not include '.exe'.) The nuget inspector (previously) could be hosted on a custom nuget feed. In this case, Detect needed to know the name of the package to pull and the name of the exe file (which has to match). In the future, Detect will only retreive it from Artifactory or from Air Gap so a custom name is no longer supported. DEPRECATED: In the future, Detect will not look for a custom named inspector. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type String Default Value IntegrationNugetInspector Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Nuget Inspector Name (Deprecated)"},{"location":"properties/detectors/nuget/#detect-nuget-path-deprecated","text":"--detect.nuget.path The path to the Nuget executable. Nuget is used to download the classic inspectors nuget package. DEPRECATED: In the future, Detect will no longer need a nuget executable as it will download the inspector from Artifactory exclusively. It will cause failure in 6.0.0 and be removed in 7.0.0. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Detect Nuget Path (Deprecated)"},{"location":"properties/detectors/packagist/","text":"packagist # Include Packagist Development Dependencies # --detect.packagist.include.dev.dependencies=true Set this value to false if you would like to exclude your dev requires dependencies when ran. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"packagist"},{"location":"properties/detectors/packagist/#packagist","text":"","title":"packagist"},{"location":"properties/detectors/packagist/#include-packagist-development-dependencies","text":"--detect.packagist.include.dev.dependencies=true Set this value to false if you would like to exclude your dev requires dependencies when ran. Details Added 3.0.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Include Packagist Development Dependencies"},{"location":"properties/detectors/pear/","text":"pear # Include Only Required Pear Dependencies # --detect.pear.only.required.deps=false Set to true if you would like to include only required packages. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Pear Executable # --detect.pear.path The path to the pear executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"pear"},{"location":"properties/detectors/pear/#pear","text":"","title":"pear"},{"location":"properties/detectors/pear/#include-only-required-pear-dependencies","text":"--detect.pear.only.required.deps=false Set to true if you would like to include only required packages. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Include Only Required Pear Dependencies"},{"location":"properties/detectors/pear/#pear-executable","text":"--detect.pear.path The path to the pear executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Pear Executable"},{"location":"properties/detectors/pip/","text":"pip # PIP Project Name # --detect.pip.project.name The name of your PIP project, to be used if your project's name cannot be correctly inferred from its setup.py file. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No PIP Project Version Name # --detect.pip.project.version.name The version of your PIP project, to be used if your project's version name cannot be correctly inferred from its setup.py file. Details Added 4.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No PIP Requirements Path # --detect.pip.requirements.path A comma-separated list of paths to requirements.txt files. Details Added 3.0.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No PIP Include Only Project Tree # --detect.pip.only.project.tree=false By default, pipenv includes all dependencies found in the graph. Set to true to only include dependencies found underneath the dependency that matches the provided pip project and version name. Details Added 6.1.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No Pipenv Executable # --detect.pipenv.path The path to the Pipenv executable. Details Added 4.1.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"pip"},{"location":"properties/detectors/pip/#pip","text":"","title":"pip"},{"location":"properties/detectors/pip/#pip-project-name","text":"--detect.pip.project.name The name of your PIP project, to be used if your project's name cannot be correctly inferred from its setup.py file. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"PIP Project Name"},{"location":"properties/detectors/pip/#pip-project-version-name","text":"--detect.pip.project.version.name The version of your PIP project, to be used if your project's version name cannot be correctly inferred from its setup.py file. Details Added 4.1.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"PIP Project Version Name"},{"location":"properties/detectors/pip/#pip-requirements-path","text":"--detect.pip.requirements.path A comma-separated list of paths to requirements.txt files. Details Added 3.0.0 Type Path List Default Value Comma Separated Yes Case Sensitive No Acceptable Values Any Strict No","title":"PIP Requirements Path"},{"location":"properties/detectors/pip/#pip-include-only-project-tree","text":"--detect.pip.only.project.tree=false By default, pipenv includes all dependencies found in the graph. Set to true to only include dependencies found underneath the dependency that matches the provided pip project and version name. Details Added 6.1.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"PIP Include Only Project Tree"},{"location":"properties/detectors/pip/#pipenv-executable","text":"--detect.pipenv.path The path to the Pipenv executable. Details Added 4.1.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Pipenv Executable"},{"location":"properties/detectors/python/","text":"python # Python Executable # --detect.python.path The path to the Python executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No Use Python3 # --detect.python.python3=false If true will use Python 3 if available on class path. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"python"},{"location":"properties/detectors/python/#python","text":"","title":"python"},{"location":"properties/detectors/python/#python-executable","text":"--detect.python.path The path to the Python executable. Details Added 3.0.0 Type Optional Path Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Python Executable"},{"location":"properties/detectors/python/#use-python3","text":"--detect.python.python3=false If true will use Python 3 if available on class path. Details Added 3.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Use Python3"},{"location":"properties/detectors/ruby/","text":"ruby # Ruby Runtime Dependencies # --detect.ruby.include.runtime.dependencies=true If set to false, runtime dependencies will not be included when parsing *.gemspec files. Details Added 5.4.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No Ruby Development Dependencies # --detect.ruby.include.dev.dependencies=false If set to true, development dependencies will be included when parsing *.gemspec files. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"ruby"},{"location":"properties/detectors/ruby/#ruby","text":"","title":"ruby"},{"location":"properties/detectors/ruby/#ruby-runtime-dependencies","text":"--detect.ruby.include.runtime.dependencies=true If set to false, runtime dependencies will not be included when parsing *.gemspec files. Details Added 5.4.0 Type Boolean Default Value true Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Ruby Runtime Dependencies"},{"location":"properties/detectors/ruby/#ruby-development-dependencies","text":"--detect.ruby.include.dev.dependencies=false If set to true, development dependencies will be included when parsing *.gemspec files. Details Added 5.4.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Ruby Development Dependencies"},{"location":"properties/detectors/sbt/","text":"sbt # SBT Report Search Depth # --detect.sbt.report.search.depth=3 Depth the sbt detector will use to search for report files. Details Added 4.3.0 Type Integer Default Value 3 Comma Separated No Case Sensitive No Acceptable Values Any Strict No SBT Configurations Excluded (Advanced) # --detect.sbt.excluded.configurations The names of the sbt configurations to exclude. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No SBT Configurations Included (Advanced) # --detect.sbt.included.configurations The names of the sbt configurations to include. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"sbt"},{"location":"properties/detectors/sbt/#sbt","text":"","title":"sbt"},{"location":"properties/detectors/sbt/#sbt-report-search-depth","text":"--detect.sbt.report.search.depth=3 Depth the sbt detector will use to search for report files. Details Added 4.3.0 Type Integer Default Value 3 Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"SBT Report Search Depth"},{"location":"properties/detectors/sbt/#sbt-configurations-excluded-advanced","text":"--detect.sbt.excluded.configurations The names of the sbt configurations to exclude. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"SBT Configurations Excluded (Advanced)"},{"location":"properties/detectors/sbt/#sbt-configurations-included-advanced","text":"--detect.sbt.included.configurations The names of the sbt configurations to include. This property accepts filename globbing-style wildcards. Refer to the Advanced Property wildcard support page for more details. Details Added 3.0.0 Type Optional String Default Value Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"SBT Configurations Included (Advanced)"},{"location":"properties/detectors/yarn/","text":"yarn # Include Yarn Production Dependencies Only # --detect.yarn.prod.only=false Set this to true to only scan production dependencies. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"yarn"},{"location":"properties/detectors/yarn/#yarn","text":"","title":"yarn"},{"location":"properties/detectors/yarn/#include-yarn-production-dependencies-only","text":"--detect.yarn.prod.only=false Set this to true to only scan production dependencies. Details Added 4.0.0 Type Boolean Default Value false Comma Separated No Case Sensitive No Acceptable Values Any Strict No","title":"Include Yarn Production Dependencies Only"}]}